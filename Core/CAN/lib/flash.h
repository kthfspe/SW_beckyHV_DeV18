/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Fri Dec  8 21:19:10 2023.
 */

#ifndef FLASH_H
#define FLASH_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define FLASH_SYSTEM_STATUS_FRAME_ID (0x579u)
#define FLASH_DCU_STATUS_FRAME_ID (0x582u)
#define FLASH_DCU_WRITE_REQ_FRAME_ID (0x583u)
#define FLASH_DCU_WRITE_RES_FRAME_ID (0x584u)
#define FLASH_DCU_READ_REQ_FRAME_ID (0x585u)
#define FLASH_DCU_READ_RES_FRAME_ID (0x586u)
#define FLASH_DCU_ERASE_REQ_FRAME_ID (0x587u)
#define FLASH_DCU_ERASE_RES_FRAME_ID (0x588u)
#define FLASH_ECU_STATUS_FRAME_ID (0x58cu)
#define FLASH_ECU_WRITE_REQ_FRAME_ID (0x58du)
#define FLASH_ECU_WRITE_RES_FRAME_ID (0x58eu)
#define FLASH_ECU_READ_REQ_FRAME_ID (0x58fu)
#define FLASH_ECU_READ_RES_FRAME_ID (0x590u)
#define FLASH_ECU_ERASE_REQ_FRAME_ID (0x591u)
#define FLASH_ECU_ERASE_RES_FRAME_ID (0x592u)
#define FLASH_CCU_STATUS_FRAME_ID (0x596u)
#define FLASH_CCU_WRITE_REQ_FRAME_ID (0x597u)
#define FLASH_CCU_WRITE_RES_FRAME_ID (0x598u)
#define FLASH_CCU_READ_REQ_FRAME_ID (0x599u)
#define FLASH_CCU_READ_RES_FRAME_ID (0x59au)
#define FLASH_CCU_ERASE_REQ_FRAME_ID (0x59bu)
#define FLASH_CCU_ERASE_RES_FRAME_ID (0x59cu)
#define FLASH_DBU_STATUS_FRAME_ID (0x5a0u)
#define FLASH_DBU_WRITE_REQ_FRAME_ID (0x5a1u)
#define FLASH_DBU_WRITE_RES_FRAME_ID (0x5a2u)
#define FLASH_DBU_READ_REQ_FRAME_ID (0x5a3u)
#define FLASH_DBU_READ_RES_FRAME_ID (0x5a4u)
#define FLASH_DBU_ERASE_REQ_FRAME_ID (0x5a5u)
#define FLASH_DBU_ERASE_RES_FRAME_ID (0x5a6u)
#define FLASH_AMS_STATUS_FRAME_ID (0x5aau)
#define FLASH_AMS_WRITE_REQ_FRAME_ID (0x5abu)
#define FLASH_AMS_WRITE_RES_FRAME_ID (0x5acu)
#define FLASH_AMS_READ_REQ_FRAME_ID (0x5adu)
#define FLASH_AMS_READ_RES_FRAME_ID (0x5aeu)
#define FLASH_AMS_ERASE_REQ_FRAME_ID (0x5afu)
#define FLASH_AMS_ERASE_RES_FRAME_ID (0x5b0u)

/* Frame lengths in bytes. */
#define FLASH_SYSTEM_STATUS_LENGTH (8u)
#define FLASH_DCU_STATUS_LENGTH (8u)
#define FLASH_DCU_WRITE_REQ_LENGTH (8u)
#define FLASH_DCU_WRITE_RES_LENGTH (8u)
#define FLASH_DCU_READ_REQ_LENGTH (8u)
#define FLASH_DCU_READ_RES_LENGTH (8u)
#define FLASH_DCU_ERASE_REQ_LENGTH (8u)
#define FLASH_DCU_ERASE_RES_LENGTH (8u)
#define FLASH_ECU_STATUS_LENGTH (8u)
#define FLASH_ECU_WRITE_REQ_LENGTH (8u)
#define FLASH_ECU_WRITE_RES_LENGTH (8u)
#define FLASH_ECU_READ_REQ_LENGTH (8u)
#define FLASH_ECU_READ_RES_LENGTH (8u)
#define FLASH_ECU_ERASE_REQ_LENGTH (8u)
#define FLASH_ECU_ERASE_RES_LENGTH (8u)
#define FLASH_CCU_STATUS_LENGTH (8u)
#define FLASH_CCU_WRITE_REQ_LENGTH (8u)
#define FLASH_CCU_WRITE_RES_LENGTH (8u)
#define FLASH_CCU_READ_REQ_LENGTH (8u)
#define FLASH_CCU_READ_RES_LENGTH (8u)
#define FLASH_CCU_ERASE_REQ_LENGTH (8u)
#define FLASH_CCU_ERASE_RES_LENGTH (8u)
#define FLASH_DBU_STATUS_LENGTH (8u)
#define FLASH_DBU_WRITE_REQ_LENGTH (8u)
#define FLASH_DBU_WRITE_RES_LENGTH (8u)
#define FLASH_DBU_READ_REQ_LENGTH (8u)
#define FLASH_DBU_READ_RES_LENGTH (8u)
#define FLASH_DBU_ERASE_REQ_LENGTH (8u)
#define FLASH_DBU_ERASE_RES_LENGTH (8u)
#define FLASH_AMS_STATUS_LENGTH (8u)
#define FLASH_AMS_WRITE_REQ_LENGTH (8u)
#define FLASH_AMS_WRITE_RES_LENGTH (8u)
#define FLASH_AMS_READ_REQ_LENGTH (8u)
#define FLASH_AMS_READ_RES_LENGTH (8u)
#define FLASH_AMS_ERASE_REQ_LENGTH (8u)
#define FLASH_AMS_ERASE_RES_LENGTH (8u)

/* Extended or standard frame types. */
#define FLASH_SYSTEM_STATUS_IS_EXTENDED (0)
#define FLASH_DCU_STATUS_IS_EXTENDED (0)
#define FLASH_DCU_WRITE_REQ_IS_EXTENDED (0)
#define FLASH_DCU_WRITE_RES_IS_EXTENDED (0)
#define FLASH_DCU_READ_REQ_IS_EXTENDED (0)
#define FLASH_DCU_READ_RES_IS_EXTENDED (0)
#define FLASH_DCU_ERASE_REQ_IS_EXTENDED (0)
#define FLASH_DCU_ERASE_RES_IS_EXTENDED (0)
#define FLASH_ECU_STATUS_IS_EXTENDED (0)
#define FLASH_ECU_WRITE_REQ_IS_EXTENDED (0)
#define FLASH_ECU_WRITE_RES_IS_EXTENDED (0)
#define FLASH_ECU_READ_REQ_IS_EXTENDED (0)
#define FLASH_ECU_READ_RES_IS_EXTENDED (0)
#define FLASH_ECU_ERASE_REQ_IS_EXTENDED (0)
#define FLASH_ECU_ERASE_RES_IS_EXTENDED (0)
#define FLASH_CCU_STATUS_IS_EXTENDED (0)
#define FLASH_CCU_WRITE_REQ_IS_EXTENDED (0)
#define FLASH_CCU_WRITE_RES_IS_EXTENDED (0)
#define FLASH_CCU_READ_REQ_IS_EXTENDED (0)
#define FLASH_CCU_READ_RES_IS_EXTENDED (0)
#define FLASH_CCU_ERASE_REQ_IS_EXTENDED (0)
#define FLASH_CCU_ERASE_RES_IS_EXTENDED (0)
#define FLASH_DBU_STATUS_IS_EXTENDED (0)
#define FLASH_DBU_WRITE_REQ_IS_EXTENDED (0)
#define FLASH_DBU_WRITE_RES_IS_EXTENDED (0)
#define FLASH_DBU_READ_REQ_IS_EXTENDED (0)
#define FLASH_DBU_READ_RES_IS_EXTENDED (0)
#define FLASH_DBU_ERASE_REQ_IS_EXTENDED (0)
#define FLASH_DBU_ERASE_RES_IS_EXTENDED (0)
#define FLASH_AMS_STATUS_IS_EXTENDED (0)
#define FLASH_AMS_WRITE_REQ_IS_EXTENDED (0)
#define FLASH_AMS_WRITE_RES_IS_EXTENDED (0)
#define FLASH_AMS_READ_REQ_IS_EXTENDED (0)
#define FLASH_AMS_READ_RES_IS_EXTENDED (0)
#define FLASH_AMS_ERASE_REQ_IS_EXTENDED (0)
#define FLASH_AMS_ERASE_RES_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message system_status.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_system_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t goto_app;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t goto_iap;
};

/**
 * Signals in message DCU_status.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t status;
};

/**
 * Signals in message DCU_write_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_write_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DCU_write_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_write_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DCU_read_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_read_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DCU_read_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_read_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DCU_erase_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_erase_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message DCU_erase_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dcu_erase_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message ECU_status.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t status;
};

/**
 * Signals in message ECU_write_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_write_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message ECU_write_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_write_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message ECU_read_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_read_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message ECU_read_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_read_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message ECU_erase_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_erase_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message ECU_erase_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ecu_erase_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message CCU_status.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t status;
};

/**
 * Signals in message CCU_write_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_write_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message CCU_write_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_write_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message CCU_read_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_read_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message CCU_read_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_read_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message CCU_erase_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_erase_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message CCU_erase_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ccu_erase_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message DBU_status.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t status;
};

/**
 * Signals in message DBU_write_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_write_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DBU_write_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_write_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DBU_read_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_read_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DBU_read_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_read_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message DBU_erase_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_erase_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message DBU_erase_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_dbu_erase_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message AMS_status.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t status;
};

/**
 * Signals in message AMS_write_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_write_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message AMS_write_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_write_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message AMS_read_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_read_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message AMS_read_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_read_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t address;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t word;
};

/**
 * Signals in message AMS_erase_req.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_erase_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Signals in message AMS_erase_res.
 *
 * All signal values are as on the CAN bus.
 */
struct flash_ams_erase_res_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t erase_all;
};

/**
 * Pack message system_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_system_status_pack(
    uint8_t *dst_p,
    const struct flash_system_status_t *src_p,
    size_t size);

/**
 * Unpack message system_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_system_status_unpack(
    struct flash_system_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t flash_system_status_goto_app_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_system_status_goto_app_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_system_status_goto_app_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t flash_system_status_goto_iap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_system_status_goto_iap_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_system_status_goto_iap_is_in_range(uint8_t value);

/**
 * Pack message DCU_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_status_pack(
    uint8_t *dst_p,
    const struct flash_dcu_status_t *src_p,
    size_t size);

/**
 * Unpack message DCU_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_status_unpack(
    struct flash_dcu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t flash_dcu_status_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_status_status_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_status_status_is_in_range(uint64_t value);

/**
 * Pack message DCU_write_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_write_req_pack(
    uint8_t *dst_p,
    const struct flash_dcu_write_req_t *src_p,
    size_t size);

/**
 * Unpack message DCU_write_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_write_req_unpack(
    struct flash_dcu_write_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_write_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_write_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_write_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_write_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_write_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_write_req_word_is_in_range(uint32_t value);

/**
 * Pack message DCU_write_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_write_res_pack(
    uint8_t *dst_p,
    const struct flash_dcu_write_res_t *src_p,
    size_t size);

/**
 * Unpack message DCU_write_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_write_res_unpack(
    struct flash_dcu_write_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_write_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_write_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_write_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_write_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_write_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_write_res_word_is_in_range(uint32_t value);

/**
 * Pack message DCU_read_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_read_req_pack(
    uint8_t *dst_p,
    const struct flash_dcu_read_req_t *src_p,
    size_t size);

/**
 * Unpack message DCU_read_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_read_req_unpack(
    struct flash_dcu_read_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_read_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_read_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_read_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_read_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_read_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_read_req_word_is_in_range(uint32_t value);

/**
 * Pack message DCU_read_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_read_res_pack(
    uint8_t *dst_p,
    const struct flash_dcu_read_res_t *src_p,
    size_t size);

/**
 * Unpack message DCU_read_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_read_res_unpack(
    struct flash_dcu_read_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_read_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_read_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_read_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_read_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_read_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_read_res_word_is_in_range(uint32_t value);

/**
 * Pack message DCU_erase_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_erase_req_pack(
    uint8_t *dst_p,
    const struct flash_dcu_erase_req_t *src_p,
    size_t size);

/**
 * Unpack message DCU_erase_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_erase_req_unpack(
    struct flash_dcu_erase_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_erase_req_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_erase_req_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_erase_req_erase_all_is_in_range(uint32_t value);

/**
 * Pack message DCU_erase_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dcu_erase_res_pack(
    uint8_t *dst_p,
    const struct flash_dcu_erase_res_t *src_p,
    size_t size);

/**
 * Unpack message DCU_erase_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dcu_erase_res_unpack(
    struct flash_dcu_erase_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dcu_erase_res_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dcu_erase_res_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dcu_erase_res_erase_all_is_in_range(uint32_t value);

/**
 * Pack message ECU_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_status_pack(
    uint8_t *dst_p,
    const struct flash_ecu_status_t *src_p,
    size_t size);

/**
 * Unpack message ECU_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_status_unpack(
    struct flash_ecu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t flash_ecu_status_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_status_status_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_status_status_is_in_range(uint64_t value);

/**
 * Pack message ECU_write_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_write_req_pack(
    uint8_t *dst_p,
    const struct flash_ecu_write_req_t *src_p,
    size_t size);

/**
 * Unpack message ECU_write_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_write_req_unpack(
    struct flash_ecu_write_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_write_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_write_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_write_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_write_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_write_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_write_req_word_is_in_range(uint32_t value);

/**
 * Pack message ECU_write_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_write_res_pack(
    uint8_t *dst_p,
    const struct flash_ecu_write_res_t *src_p,
    size_t size);

/**
 * Unpack message ECU_write_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_write_res_unpack(
    struct flash_ecu_write_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_write_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_write_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_write_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_write_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_write_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_write_res_word_is_in_range(uint32_t value);

/**
 * Pack message ECU_read_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_read_req_pack(
    uint8_t *dst_p,
    const struct flash_ecu_read_req_t *src_p,
    size_t size);

/**
 * Unpack message ECU_read_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_read_req_unpack(
    struct flash_ecu_read_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_read_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_read_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_read_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_read_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_read_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_read_req_word_is_in_range(uint32_t value);

/**
 * Pack message ECU_read_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_read_res_pack(
    uint8_t *dst_p,
    const struct flash_ecu_read_res_t *src_p,
    size_t size);

/**
 * Unpack message ECU_read_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_read_res_unpack(
    struct flash_ecu_read_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_read_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_read_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_read_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_read_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_read_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_read_res_word_is_in_range(uint32_t value);

/**
 * Pack message ECU_erase_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_erase_req_pack(
    uint8_t *dst_p,
    const struct flash_ecu_erase_req_t *src_p,
    size_t size);

/**
 * Unpack message ECU_erase_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_erase_req_unpack(
    struct flash_ecu_erase_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_erase_req_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_erase_req_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_erase_req_erase_all_is_in_range(uint32_t value);

/**
 * Pack message ECU_erase_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ecu_erase_res_pack(
    uint8_t *dst_p,
    const struct flash_ecu_erase_res_t *src_p,
    size_t size);

/**
 * Unpack message ECU_erase_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ecu_erase_res_unpack(
    struct flash_ecu_erase_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ecu_erase_res_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ecu_erase_res_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ecu_erase_res_erase_all_is_in_range(uint32_t value);

/**
 * Pack message CCU_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_status_pack(
    uint8_t *dst_p,
    const struct flash_ccu_status_t *src_p,
    size_t size);

/**
 * Unpack message CCU_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_status_unpack(
    struct flash_ccu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t flash_ccu_status_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_status_status_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_status_status_is_in_range(uint64_t value);

/**
 * Pack message CCU_write_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_write_req_pack(
    uint8_t *dst_p,
    const struct flash_ccu_write_req_t *src_p,
    size_t size);

/**
 * Unpack message CCU_write_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_write_req_unpack(
    struct flash_ccu_write_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_write_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_write_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_write_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_write_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_write_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_write_req_word_is_in_range(uint32_t value);

/**
 * Pack message CCU_write_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_write_res_pack(
    uint8_t *dst_p,
    const struct flash_ccu_write_res_t *src_p,
    size_t size);

/**
 * Unpack message CCU_write_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_write_res_unpack(
    struct flash_ccu_write_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_write_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_write_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_write_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_write_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_write_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_write_res_word_is_in_range(uint32_t value);

/**
 * Pack message CCU_read_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_read_req_pack(
    uint8_t *dst_p,
    const struct flash_ccu_read_req_t *src_p,
    size_t size);

/**
 * Unpack message CCU_read_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_read_req_unpack(
    struct flash_ccu_read_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_read_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_read_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_read_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_read_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_read_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_read_req_word_is_in_range(uint32_t value);

/**
 * Pack message CCU_read_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_read_res_pack(
    uint8_t *dst_p,
    const struct flash_ccu_read_res_t *src_p,
    size_t size);

/**
 * Unpack message CCU_read_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_read_res_unpack(
    struct flash_ccu_read_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_read_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_read_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_read_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_read_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_read_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_read_res_word_is_in_range(uint32_t value);

/**
 * Pack message CCU_erase_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_erase_req_pack(
    uint8_t *dst_p,
    const struct flash_ccu_erase_req_t *src_p,
    size_t size);

/**
 * Unpack message CCU_erase_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_erase_req_unpack(
    struct flash_ccu_erase_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_erase_req_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_erase_req_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_erase_req_erase_all_is_in_range(uint32_t value);

/**
 * Pack message CCU_erase_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ccu_erase_res_pack(
    uint8_t *dst_p,
    const struct flash_ccu_erase_res_t *src_p,
    size_t size);

/**
 * Unpack message CCU_erase_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ccu_erase_res_unpack(
    struct flash_ccu_erase_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ccu_erase_res_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ccu_erase_res_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ccu_erase_res_erase_all_is_in_range(uint32_t value);

/**
 * Pack message DBU_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_status_pack(
    uint8_t *dst_p,
    const struct flash_dbu_status_t *src_p,
    size_t size);

/**
 * Unpack message DBU_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_status_unpack(
    struct flash_dbu_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t flash_dbu_status_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_status_status_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_status_status_is_in_range(uint64_t value);

/**
 * Pack message DBU_write_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_write_req_pack(
    uint8_t *dst_p,
    const struct flash_dbu_write_req_t *src_p,
    size_t size);

/**
 * Unpack message DBU_write_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_write_req_unpack(
    struct flash_dbu_write_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_write_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_write_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_write_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_write_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_write_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_write_req_word_is_in_range(uint32_t value);

/**
 * Pack message DBU_write_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_write_res_pack(
    uint8_t *dst_p,
    const struct flash_dbu_write_res_t *src_p,
    size_t size);

/**
 * Unpack message DBU_write_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_write_res_unpack(
    struct flash_dbu_write_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_write_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_write_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_write_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_write_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_write_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_write_res_word_is_in_range(uint32_t value);

/**
 * Pack message DBU_read_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_read_req_pack(
    uint8_t *dst_p,
    const struct flash_dbu_read_req_t *src_p,
    size_t size);

/**
 * Unpack message DBU_read_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_read_req_unpack(
    struct flash_dbu_read_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_read_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_read_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_read_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_read_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_read_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_read_req_word_is_in_range(uint32_t value);

/**
 * Pack message DBU_read_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_read_res_pack(
    uint8_t *dst_p,
    const struct flash_dbu_read_res_t *src_p,
    size_t size);

/**
 * Unpack message DBU_read_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_read_res_unpack(
    struct flash_dbu_read_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_read_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_read_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_read_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_read_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_read_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_read_res_word_is_in_range(uint32_t value);

/**
 * Pack message DBU_erase_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_erase_req_pack(
    uint8_t *dst_p,
    const struct flash_dbu_erase_req_t *src_p,
    size_t size);

/**
 * Unpack message DBU_erase_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_erase_req_unpack(
    struct flash_dbu_erase_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_erase_req_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_erase_req_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_erase_req_erase_all_is_in_range(uint32_t value);

/**
 * Pack message DBU_erase_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_dbu_erase_res_pack(
    uint8_t *dst_p,
    const struct flash_dbu_erase_res_t *src_p,
    size_t size);

/**
 * Unpack message DBU_erase_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_dbu_erase_res_unpack(
    struct flash_dbu_erase_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_dbu_erase_res_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_dbu_erase_res_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_dbu_erase_res_erase_all_is_in_range(uint32_t value);

/**
 * Pack message AMS_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_status_pack(
    uint8_t *dst_p,
    const struct flash_ams_status_t *src_p,
    size_t size);

/**
 * Unpack message AMS_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_status_unpack(
    struct flash_ams_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t flash_ams_status_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_status_status_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_status_status_is_in_range(uint64_t value);

/**
 * Pack message AMS_write_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_write_req_pack(
    uint8_t *dst_p,
    const struct flash_ams_write_req_t *src_p,
    size_t size);

/**
 * Unpack message AMS_write_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_write_req_unpack(
    struct flash_ams_write_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_write_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_write_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_write_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_write_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_write_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_write_req_word_is_in_range(uint32_t value);

/**
 * Pack message AMS_write_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_write_res_pack(
    uint8_t *dst_p,
    const struct flash_ams_write_res_t *src_p,
    size_t size);

/**
 * Unpack message AMS_write_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_write_res_unpack(
    struct flash_ams_write_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_write_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_write_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_write_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_write_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_write_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_write_res_word_is_in_range(uint32_t value);

/**
 * Pack message AMS_read_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_read_req_pack(
    uint8_t *dst_p,
    const struct flash_ams_read_req_t *src_p,
    size_t size);

/**
 * Unpack message AMS_read_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_read_req_unpack(
    struct flash_ams_read_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_read_req_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_read_req_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_read_req_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_read_req_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_read_req_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_read_req_word_is_in_range(uint32_t value);

/**
 * Pack message AMS_read_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_read_res_pack(
    uint8_t *dst_p,
    const struct flash_ams_read_res_t *src_p,
    size_t size);

/**
 * Unpack message AMS_read_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_read_res_unpack(
    struct flash_ams_read_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_read_res_address_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_read_res_address_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_read_res_address_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_read_res_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_read_res_word_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_read_res_word_is_in_range(uint32_t value);

/**
 * Pack message AMS_erase_req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_erase_req_pack(
    uint8_t *dst_p,
    const struct flash_ams_erase_req_t *src_p,
    size_t size);

/**
 * Unpack message AMS_erase_req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_erase_req_unpack(
    struct flash_ams_erase_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_erase_req_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_erase_req_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_erase_req_erase_all_is_in_range(uint32_t value);

/**
 * Pack message AMS_erase_res.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int flash_ams_erase_res_pack(
    uint8_t *dst_p,
    const struct flash_ams_erase_res_t *src_p,
    size_t size);

/**
 * Unpack message AMS_erase_res.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int flash_ams_erase_res_unpack(
    struct flash_ams_erase_res_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t flash_ams_erase_res_erase_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double flash_ams_erase_res_erase_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool flash_ams_erase_res_erase_all_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
