
hall_sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004000  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800412c  0800412c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800412c  0800412c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800412c  0800412c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000018  0800414c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  0800414c  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006629  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001777  00000000  00000000  000266ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  00027e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d3  00000000  00000000  000284a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019192  00000000  00000000  00028973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008275  00000000  00000000  00041b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a631d  00000000  00000000  00049d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001708  00000000  00000000  000f0098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f17a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000018 	.word	0x20000018
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080040a4 	.word	0x080040a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000001c 	.word	0x2000001c
 8000100:	080040a4 	.word	0x080040a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_fmul>:
 80003f0:	0243      	lsls	r3, r0, #9
 80003f2:	0a5b      	lsrs	r3, r3, #9
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	4699      	mov	r9, r3
 80003fc:	46d6      	mov	lr, sl
 80003fe:	0fc3      	lsrs	r3, r0, #31
 8000400:	0045      	lsls	r5, r0, #1
 8000402:	4698      	mov	r8, r3
 8000404:	b5c0      	push	{r6, r7, lr}
 8000406:	464b      	mov	r3, r9
 8000408:	1c0f      	adds	r7, r1, #0
 800040a:	0e2d      	lsrs	r5, r5, #24
 800040c:	d100      	bne.n	8000410 <__aeabi_fmul+0x20>
 800040e:	e0cb      	b.n	80005a8 <__aeabi_fmul+0x1b8>
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fmul+0x26>
 8000414:	e0cf      	b.n	80005b6 <__aeabi_fmul+0x1c6>
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	04d2      	lsls	r2, r2, #19
 800041c:	431a      	orrs	r2, r3
 800041e:	2300      	movs	r3, #0
 8000420:	4691      	mov	r9, r2
 8000422:	2600      	movs	r6, #0
 8000424:	469a      	mov	sl, r3
 8000426:	3d7f      	subs	r5, #127	; 0x7f
 8000428:	027c      	lsls	r4, r7, #9
 800042a:	007b      	lsls	r3, r7, #1
 800042c:	0a64      	lsrs	r4, r4, #9
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fff      	lsrs	r7, r7, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d100      	bne.n	8000438 <__aeabi_fmul+0x48>
 8000436:	e0a9      	b.n	800058c <__aeabi_fmul+0x19c>
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d011      	beq.n	8000460 <__aeabi_fmul+0x70>
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	00e4      	lsls	r4, r4, #3
 8000440:	04d2      	lsls	r2, r2, #19
 8000442:	4314      	orrs	r4, r2
 8000444:	4642      	mov	r2, r8
 8000446:	3b7f      	subs	r3, #127	; 0x7f
 8000448:	195b      	adds	r3, r3, r5
 800044a:	407a      	eors	r2, r7
 800044c:	2000      	movs	r0, #0
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	1c5d      	adds	r5, r3, #1
 8000452:	2e0a      	cmp	r6, #10
 8000454:	dd13      	ble.n	800047e <__aeabi_fmul+0x8e>
 8000456:	003a      	movs	r2, r7
 8000458:	2e0b      	cmp	r6, #11
 800045a:	d047      	beq.n	80004ec <__aeabi_fmul+0xfc>
 800045c:	4647      	mov	r7, r8
 800045e:	e03f      	b.n	80004e0 <__aeabi_fmul+0xf0>
 8000460:	002b      	movs	r3, r5
 8000462:	33ff      	adds	r3, #255	; 0xff
 8000464:	2c00      	cmp	r4, #0
 8000466:	d11e      	bne.n	80004a6 <__aeabi_fmul+0xb6>
 8000468:	2202      	movs	r2, #2
 800046a:	4316      	orrs	r6, r2
 800046c:	4642      	mov	r2, r8
 800046e:	3501      	adds	r5, #1
 8000470:	407a      	eors	r2, r7
 8000472:	b2d2      	uxtb	r2, r2
 8000474:	35ff      	adds	r5, #255	; 0xff
 8000476:	2e0a      	cmp	r6, #10
 8000478:	dd00      	ble.n	800047c <__aeabi_fmul+0x8c>
 800047a:	e0e4      	b.n	8000646 <__aeabi_fmul+0x256>
 800047c:	2002      	movs	r0, #2
 800047e:	2e02      	cmp	r6, #2
 8000480:	dc1c      	bgt.n	80004bc <__aeabi_fmul+0xcc>
 8000482:	3e01      	subs	r6, #1
 8000484:	2e01      	cmp	r6, #1
 8000486:	d842      	bhi.n	800050e <__aeabi_fmul+0x11e>
 8000488:	2802      	cmp	r0, #2
 800048a:	d03d      	beq.n	8000508 <__aeabi_fmul+0x118>
 800048c:	2801      	cmp	r0, #1
 800048e:	d166      	bne.n	800055e <__aeabi_fmul+0x16e>
 8000490:	2000      	movs	r0, #0
 8000492:	2100      	movs	r1, #0
 8000494:	05c0      	lsls	r0, r0, #23
 8000496:	4308      	orrs	r0, r1
 8000498:	07d2      	lsls	r2, r2, #31
 800049a:	4310      	orrs	r0, r2
 800049c:	bce0      	pop	{r5, r6, r7}
 800049e:	46ba      	mov	sl, r7
 80004a0:	46b1      	mov	r9, r6
 80004a2:	46a8      	mov	r8, r5
 80004a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a6:	2203      	movs	r2, #3
 80004a8:	4316      	orrs	r6, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	3501      	adds	r5, #1
 80004ae:	407a      	eors	r2, r7
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	35ff      	adds	r5, #255	; 0xff
 80004b4:	2e0a      	cmp	r6, #10
 80004b6:	dd00      	ble.n	80004ba <__aeabi_fmul+0xca>
 80004b8:	e0e4      	b.n	8000684 <__aeabi_fmul+0x294>
 80004ba:	2003      	movs	r0, #3
 80004bc:	2101      	movs	r1, #1
 80004be:	40b1      	lsls	r1, r6
 80004c0:	26a6      	movs	r6, #166	; 0xa6
 80004c2:	00f6      	lsls	r6, r6, #3
 80004c4:	4231      	tst	r1, r6
 80004c6:	d10a      	bne.n	80004de <__aeabi_fmul+0xee>
 80004c8:	2690      	movs	r6, #144	; 0x90
 80004ca:	00b6      	lsls	r6, r6, #2
 80004cc:	4231      	tst	r1, r6
 80004ce:	d116      	bne.n	80004fe <__aeabi_fmul+0x10e>
 80004d0:	3eb9      	subs	r6, #185	; 0xb9
 80004d2:	3eff      	subs	r6, #255	; 0xff
 80004d4:	420e      	tst	r6, r1
 80004d6:	d01a      	beq.n	800050e <__aeabi_fmul+0x11e>
 80004d8:	46a1      	mov	r9, r4
 80004da:	4682      	mov	sl, r0
 80004dc:	e000      	b.n	80004e0 <__aeabi_fmul+0xf0>
 80004de:	0017      	movs	r7, r2
 80004e0:	4653      	mov	r3, sl
 80004e2:	003a      	movs	r2, r7
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d00f      	beq.n	8000508 <__aeabi_fmul+0x118>
 80004e8:	464c      	mov	r4, r9
 80004ea:	4650      	mov	r0, sl
 80004ec:	2803      	cmp	r0, #3
 80004ee:	d1cd      	bne.n	800048c <__aeabi_fmul+0x9c>
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	03c9      	lsls	r1, r1, #15
 80004f4:	4321      	orrs	r1, r4
 80004f6:	0249      	lsls	r1, r1, #9
 80004f8:	20ff      	movs	r0, #255	; 0xff
 80004fa:	0a49      	lsrs	r1, r1, #9
 80004fc:	e7ca      	b.n	8000494 <__aeabi_fmul+0xa4>
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	2200      	movs	r2, #0
 8000502:	20ff      	movs	r0, #255	; 0xff
 8000504:	03c9      	lsls	r1, r1, #15
 8000506:	e7c5      	b.n	8000494 <__aeabi_fmul+0xa4>
 8000508:	20ff      	movs	r0, #255	; 0xff
 800050a:	2100      	movs	r1, #0
 800050c:	e7c2      	b.n	8000494 <__aeabi_fmul+0xa4>
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	4649      	mov	r1, r9
 8000512:	0424      	lsls	r4, r4, #16
 8000514:	0c24      	lsrs	r4, r4, #16
 8000516:	0027      	movs	r7, r4
 8000518:	0c0e      	lsrs	r6, r1, #16
 800051a:	0409      	lsls	r1, r1, #16
 800051c:	0c09      	lsrs	r1, r1, #16
 800051e:	4374      	muls	r4, r6
 8000520:	434f      	muls	r7, r1
 8000522:	4346      	muls	r6, r0
 8000524:	4348      	muls	r0, r1
 8000526:	0c39      	lsrs	r1, r7, #16
 8000528:	1900      	adds	r0, r0, r4
 800052a:	1809      	adds	r1, r1, r0
 800052c:	428c      	cmp	r4, r1
 800052e:	d903      	bls.n	8000538 <__aeabi_fmul+0x148>
 8000530:	2080      	movs	r0, #128	; 0x80
 8000532:	0240      	lsls	r0, r0, #9
 8000534:	4684      	mov	ip, r0
 8000536:	4466      	add	r6, ip
 8000538:	043f      	lsls	r7, r7, #16
 800053a:	0408      	lsls	r0, r1, #16
 800053c:	0c3f      	lsrs	r7, r7, #16
 800053e:	19c0      	adds	r0, r0, r7
 8000540:	0184      	lsls	r4, r0, #6
 8000542:	1e67      	subs	r7, r4, #1
 8000544:	41bc      	sbcs	r4, r7
 8000546:	0c09      	lsrs	r1, r1, #16
 8000548:	0e80      	lsrs	r0, r0, #26
 800054a:	1989      	adds	r1, r1, r6
 800054c:	4304      	orrs	r4, r0
 800054e:	0189      	lsls	r1, r1, #6
 8000550:	430c      	orrs	r4, r1
 8000552:	0109      	lsls	r1, r1, #4
 8000554:	d571      	bpl.n	800063a <__aeabi_fmul+0x24a>
 8000556:	2301      	movs	r3, #1
 8000558:	0861      	lsrs	r1, r4, #1
 800055a:	401c      	ands	r4, r3
 800055c:	430c      	orrs	r4, r1
 800055e:	002b      	movs	r3, r5
 8000560:	337f      	adds	r3, #127	; 0x7f
 8000562:	2b00      	cmp	r3, #0
 8000564:	dd51      	ble.n	800060a <__aeabi_fmul+0x21a>
 8000566:	0761      	lsls	r1, r4, #29
 8000568:	d004      	beq.n	8000574 <__aeabi_fmul+0x184>
 800056a:	210f      	movs	r1, #15
 800056c:	4021      	ands	r1, r4
 800056e:	2904      	cmp	r1, #4
 8000570:	d000      	beq.n	8000574 <__aeabi_fmul+0x184>
 8000572:	3404      	adds	r4, #4
 8000574:	0121      	lsls	r1, r4, #4
 8000576:	d503      	bpl.n	8000580 <__aeabi_fmul+0x190>
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <__aeabi_fmul+0x298>)
 800057a:	401c      	ands	r4, r3
 800057c:	002b      	movs	r3, r5
 800057e:	3380      	adds	r3, #128	; 0x80
 8000580:	2bfe      	cmp	r3, #254	; 0xfe
 8000582:	dcc1      	bgt.n	8000508 <__aeabi_fmul+0x118>
 8000584:	01a1      	lsls	r1, r4, #6
 8000586:	0a49      	lsrs	r1, r1, #9
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	e783      	b.n	8000494 <__aeabi_fmul+0xa4>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d12c      	bne.n	80005ea <__aeabi_fmul+0x1fa>
 8000590:	2301      	movs	r3, #1
 8000592:	4642      	mov	r2, r8
 8000594:	431e      	orrs	r6, r3
 8000596:	002b      	movs	r3, r5
 8000598:	407a      	eors	r2, r7
 800059a:	2001      	movs	r0, #1
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	1c5d      	adds	r5, r3, #1
 80005a0:	2e0a      	cmp	r6, #10
 80005a2:	dd00      	ble.n	80005a6 <__aeabi_fmul+0x1b6>
 80005a4:	e757      	b.n	8000456 <__aeabi_fmul+0x66>
 80005a6:	e76a      	b.n	800047e <__aeabi_fmul+0x8e>
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d110      	bne.n	80005ce <__aeabi_fmul+0x1de>
 80005ac:	2301      	movs	r3, #1
 80005ae:	2604      	movs	r6, #4
 80005b0:	2500      	movs	r5, #0
 80005b2:	469a      	mov	sl, r3
 80005b4:	e738      	b.n	8000428 <__aeabi_fmul+0x38>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d104      	bne.n	80005c4 <__aeabi_fmul+0x1d4>
 80005ba:	2302      	movs	r3, #2
 80005bc:	2608      	movs	r6, #8
 80005be:	25ff      	movs	r5, #255	; 0xff
 80005c0:	469a      	mov	sl, r3
 80005c2:	e731      	b.n	8000428 <__aeabi_fmul+0x38>
 80005c4:	2303      	movs	r3, #3
 80005c6:	260c      	movs	r6, #12
 80005c8:	25ff      	movs	r5, #255	; 0xff
 80005ca:	469a      	mov	sl, r3
 80005cc:	e72c      	b.n	8000428 <__aeabi_fmul+0x38>
 80005ce:	4648      	mov	r0, r9
 80005d0:	f001 fa28 	bl	8001a24 <__clzsi2>
 80005d4:	464a      	mov	r2, r9
 80005d6:	1f43      	subs	r3, r0, #5
 80005d8:	2576      	movs	r5, #118	; 0x76
 80005da:	409a      	lsls	r2, r3
 80005dc:	2300      	movs	r3, #0
 80005de:	426d      	negs	r5, r5
 80005e0:	4691      	mov	r9, r2
 80005e2:	2600      	movs	r6, #0
 80005e4:	469a      	mov	sl, r3
 80005e6:	1a2d      	subs	r5, r5, r0
 80005e8:	e71e      	b.n	8000428 <__aeabi_fmul+0x38>
 80005ea:	0020      	movs	r0, r4
 80005ec:	f001 fa1a 	bl	8001a24 <__clzsi2>
 80005f0:	4642      	mov	r2, r8
 80005f2:	1f43      	subs	r3, r0, #5
 80005f4:	409c      	lsls	r4, r3
 80005f6:	1a2b      	subs	r3, r5, r0
 80005f8:	3b76      	subs	r3, #118	; 0x76
 80005fa:	407a      	eors	r2, r7
 80005fc:	2000      	movs	r0, #0
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	1c5d      	adds	r5, r3, #1
 8000602:	2e0a      	cmp	r6, #10
 8000604:	dd00      	ble.n	8000608 <__aeabi_fmul+0x218>
 8000606:	e726      	b.n	8000456 <__aeabi_fmul+0x66>
 8000608:	e739      	b.n	800047e <__aeabi_fmul+0x8e>
 800060a:	2101      	movs	r1, #1
 800060c:	1acb      	subs	r3, r1, r3
 800060e:	2b1b      	cmp	r3, #27
 8000610:	dd00      	ble.n	8000614 <__aeabi_fmul+0x224>
 8000612:	e73d      	b.n	8000490 <__aeabi_fmul+0xa0>
 8000614:	359e      	adds	r5, #158	; 0x9e
 8000616:	0021      	movs	r1, r4
 8000618:	40ac      	lsls	r4, r5
 800061a:	40d9      	lsrs	r1, r3
 800061c:	1e63      	subs	r3, r4, #1
 800061e:	419c      	sbcs	r4, r3
 8000620:	4321      	orrs	r1, r4
 8000622:	074b      	lsls	r3, r1, #29
 8000624:	d004      	beq.n	8000630 <__aeabi_fmul+0x240>
 8000626:	230f      	movs	r3, #15
 8000628:	400b      	ands	r3, r1
 800062a:	2b04      	cmp	r3, #4
 800062c:	d000      	beq.n	8000630 <__aeabi_fmul+0x240>
 800062e:	3104      	adds	r1, #4
 8000630:	014b      	lsls	r3, r1, #5
 8000632:	d504      	bpl.n	800063e <__aeabi_fmul+0x24e>
 8000634:	2001      	movs	r0, #1
 8000636:	2100      	movs	r1, #0
 8000638:	e72c      	b.n	8000494 <__aeabi_fmul+0xa4>
 800063a:	001d      	movs	r5, r3
 800063c:	e78f      	b.n	800055e <__aeabi_fmul+0x16e>
 800063e:	0189      	lsls	r1, r1, #6
 8000640:	2000      	movs	r0, #0
 8000642:	0a49      	lsrs	r1, r1, #9
 8000644:	e726      	b.n	8000494 <__aeabi_fmul+0xa4>
 8000646:	2302      	movs	r3, #2
 8000648:	2e0f      	cmp	r6, #15
 800064a:	d10c      	bne.n	8000666 <__aeabi_fmul+0x276>
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	464b      	mov	r3, r9
 8000650:	03c9      	lsls	r1, r1, #15
 8000652:	420b      	tst	r3, r1
 8000654:	d00d      	beq.n	8000672 <__aeabi_fmul+0x282>
 8000656:	420c      	tst	r4, r1
 8000658:	d10b      	bne.n	8000672 <__aeabi_fmul+0x282>
 800065a:	4321      	orrs	r1, r4
 800065c:	0249      	lsls	r1, r1, #9
 800065e:	003a      	movs	r2, r7
 8000660:	20ff      	movs	r0, #255	; 0xff
 8000662:	0a49      	lsrs	r1, r1, #9
 8000664:	e716      	b.n	8000494 <__aeabi_fmul+0xa4>
 8000666:	2e0b      	cmp	r6, #11
 8000668:	d000      	beq.n	800066c <__aeabi_fmul+0x27c>
 800066a:	e6f7      	b.n	800045c <__aeabi_fmul+0x6c>
 800066c:	46a1      	mov	r9, r4
 800066e:	469a      	mov	sl, r3
 8000670:	e736      	b.n	80004e0 <__aeabi_fmul+0xf0>
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	464b      	mov	r3, r9
 8000676:	03c9      	lsls	r1, r1, #15
 8000678:	4319      	orrs	r1, r3
 800067a:	0249      	lsls	r1, r1, #9
 800067c:	4642      	mov	r2, r8
 800067e:	20ff      	movs	r0, #255	; 0xff
 8000680:	0a49      	lsrs	r1, r1, #9
 8000682:	e707      	b.n	8000494 <__aeabi_fmul+0xa4>
 8000684:	2303      	movs	r3, #3
 8000686:	e7df      	b.n	8000648 <__aeabi_fmul+0x258>
 8000688:	f7ffffff 	.word	0xf7ffffff

0800068c <__aeabi_i2f>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	2800      	cmp	r0, #0
 8000690:	d013      	beq.n	80006ba <__aeabi_i2f+0x2e>
 8000692:	17c3      	asrs	r3, r0, #31
 8000694:	18c5      	adds	r5, r0, r3
 8000696:	405d      	eors	r5, r3
 8000698:	0fc4      	lsrs	r4, r0, #31
 800069a:	0028      	movs	r0, r5
 800069c:	f001 f9c2 	bl	8001a24 <__clzsi2>
 80006a0:	239e      	movs	r3, #158	; 0x9e
 80006a2:	0001      	movs	r1, r0
 80006a4:	1a1b      	subs	r3, r3, r0
 80006a6:	2b96      	cmp	r3, #150	; 0x96
 80006a8:	dc0f      	bgt.n	80006ca <__aeabi_i2f+0x3e>
 80006aa:	2808      	cmp	r0, #8
 80006ac:	d031      	beq.n	8000712 <__aeabi_i2f+0x86>
 80006ae:	3908      	subs	r1, #8
 80006b0:	408d      	lsls	r5, r1
 80006b2:	026d      	lsls	r5, r5, #9
 80006b4:	0a6d      	lsrs	r5, r5, #9
 80006b6:	b2d8      	uxtb	r0, r3
 80006b8:	e002      	b.n	80006c0 <__aeabi_i2f+0x34>
 80006ba:	2400      	movs	r4, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	2500      	movs	r5, #0
 80006c0:	05c0      	lsls	r0, r0, #23
 80006c2:	4328      	orrs	r0, r5
 80006c4:	07e4      	lsls	r4, r4, #31
 80006c6:	4320      	orrs	r0, r4
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	2b99      	cmp	r3, #153	; 0x99
 80006cc:	dd0c      	ble.n	80006e8 <__aeabi_i2f+0x5c>
 80006ce:	2205      	movs	r2, #5
 80006d0:	1a12      	subs	r2, r2, r0
 80006d2:	0028      	movs	r0, r5
 80006d4:	40d0      	lsrs	r0, r2
 80006d6:	0002      	movs	r2, r0
 80006d8:	0008      	movs	r0, r1
 80006da:	301b      	adds	r0, #27
 80006dc:	4085      	lsls	r5, r0
 80006de:	0028      	movs	r0, r5
 80006e0:	1e45      	subs	r5, r0, #1
 80006e2:	41a8      	sbcs	r0, r5
 80006e4:	4302      	orrs	r2, r0
 80006e6:	0015      	movs	r5, r2
 80006e8:	2905      	cmp	r1, #5
 80006ea:	dc16      	bgt.n	800071a <__aeabi_i2f+0x8e>
 80006ec:	002a      	movs	r2, r5
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <__aeabi_i2f+0xa0>)
 80006f0:	4002      	ands	r2, r0
 80006f2:	076e      	lsls	r6, r5, #29
 80006f4:	d009      	beq.n	800070a <__aeabi_i2f+0x7e>
 80006f6:	260f      	movs	r6, #15
 80006f8:	4035      	ands	r5, r6
 80006fa:	2d04      	cmp	r5, #4
 80006fc:	d005      	beq.n	800070a <__aeabi_i2f+0x7e>
 80006fe:	3204      	adds	r2, #4
 8000700:	0155      	lsls	r5, r2, #5
 8000702:	d502      	bpl.n	800070a <__aeabi_i2f+0x7e>
 8000704:	239f      	movs	r3, #159	; 0x9f
 8000706:	4002      	ands	r2, r0
 8000708:	1a5b      	subs	r3, r3, r1
 800070a:	0192      	lsls	r2, r2, #6
 800070c:	0a55      	lsrs	r5, r2, #9
 800070e:	b2d8      	uxtb	r0, r3
 8000710:	e7d6      	b.n	80006c0 <__aeabi_i2f+0x34>
 8000712:	026d      	lsls	r5, r5, #9
 8000714:	2096      	movs	r0, #150	; 0x96
 8000716:	0a6d      	lsrs	r5, r5, #9
 8000718:	e7d2      	b.n	80006c0 <__aeabi_i2f+0x34>
 800071a:	1f4a      	subs	r2, r1, #5
 800071c:	4095      	lsls	r5, r2
 800071e:	002a      	movs	r2, r5
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <__aeabi_i2f+0xa0>)
 8000722:	4002      	ands	r2, r0
 8000724:	076e      	lsls	r6, r5, #29
 8000726:	d0f0      	beq.n	800070a <__aeabi_i2f+0x7e>
 8000728:	e7e5      	b.n	80006f6 <__aeabi_i2f+0x6a>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	fbffffff 	.word	0xfbffffff

08000730 <__aeabi_ddiv>:
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000732:	4657      	mov	r7, sl
 8000734:	464e      	mov	r6, r9
 8000736:	4645      	mov	r5, r8
 8000738:	46de      	mov	lr, fp
 800073a:	b5e0      	push	{r5, r6, r7, lr}
 800073c:	030c      	lsls	r4, r1, #12
 800073e:	001f      	movs	r7, r3
 8000740:	004b      	lsls	r3, r1, #1
 8000742:	4681      	mov	r9, r0
 8000744:	4692      	mov	sl, r2
 8000746:	0005      	movs	r5, r0
 8000748:	b085      	sub	sp, #20
 800074a:	0b24      	lsrs	r4, r4, #12
 800074c:	0d5b      	lsrs	r3, r3, #21
 800074e:	0fce      	lsrs	r6, r1, #31
 8000750:	2b00      	cmp	r3, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_ddiv+0x26>
 8000754:	e152      	b.n	80009fc <__aeabi_ddiv+0x2cc>
 8000756:	4ad2      	ldr	r2, [pc, #840]	; (8000aa0 <__aeabi_ddiv+0x370>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d100      	bne.n	800075e <__aeabi_ddiv+0x2e>
 800075c:	e16e      	b.n	8000a3c <__aeabi_ddiv+0x30c>
 800075e:	0f42      	lsrs	r2, r0, #29
 8000760:	00e4      	lsls	r4, r4, #3
 8000762:	4314      	orrs	r4, r2
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0412      	lsls	r2, r2, #16
 8000768:	4322      	orrs	r2, r4
 800076a:	4690      	mov	r8, r2
 800076c:	4acd      	ldr	r2, [pc, #820]	; (8000aa4 <__aeabi_ddiv+0x374>)
 800076e:	00c5      	lsls	r5, r0, #3
 8000770:	4693      	mov	fp, r2
 8000772:	449b      	add	fp, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4699      	mov	r9, r3
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	033c      	lsls	r4, r7, #12
 800077c:	007b      	lsls	r3, r7, #1
 800077e:	4650      	mov	r0, sl
 8000780:	0b24      	lsrs	r4, r4, #12
 8000782:	0d5b      	lsrs	r3, r3, #21
 8000784:	0fff      	lsrs	r7, r7, #31
 8000786:	2b00      	cmp	r3, #0
 8000788:	d100      	bne.n	800078c <__aeabi_ddiv+0x5c>
 800078a:	e11a      	b.n	80009c2 <__aeabi_ddiv+0x292>
 800078c:	4ac4      	ldr	r2, [pc, #784]	; (8000aa0 <__aeabi_ddiv+0x370>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d100      	bne.n	8000794 <__aeabi_ddiv+0x64>
 8000792:	e15e      	b.n	8000a52 <__aeabi_ddiv+0x322>
 8000794:	0f42      	lsrs	r2, r0, #29
 8000796:	00e4      	lsls	r4, r4, #3
 8000798:	4322      	orrs	r2, r4
 800079a:	2480      	movs	r4, #128	; 0x80
 800079c:	0424      	lsls	r4, r4, #16
 800079e:	4314      	orrs	r4, r2
 80007a0:	4ac0      	ldr	r2, [pc, #768]	; (8000aa4 <__aeabi_ddiv+0x374>)
 80007a2:	00c1      	lsls	r1, r0, #3
 80007a4:	4694      	mov	ip, r2
 80007a6:	465a      	mov	r2, fp
 80007a8:	4463      	add	r3, ip
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	469b      	mov	fp, r3
 80007ae:	2000      	movs	r0, #0
 80007b0:	0033      	movs	r3, r6
 80007b2:	407b      	eors	r3, r7
 80007b4:	469a      	mov	sl, r3
 80007b6:	464b      	mov	r3, r9
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d827      	bhi.n	800080c <__aeabi_ddiv+0xdc>
 80007bc:	4aba      	ldr	r2, [pc, #744]	; (8000aa8 <__aeabi_ddiv+0x378>)
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	58d3      	ldr	r3, [r2, r3]
 80007c2:	469f      	mov	pc, r3
 80007c4:	46b2      	mov	sl, r6
 80007c6:	9b00      	ldr	r3, [sp, #0]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d016      	beq.n	80007fa <__aeabi_ddiv+0xca>
 80007cc:	2b03      	cmp	r3, #3
 80007ce:	d100      	bne.n	80007d2 <__aeabi_ddiv+0xa2>
 80007d0:	e287      	b.n	8000ce2 <__aeabi_ddiv+0x5b2>
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0xa8>
 80007d6:	e0d5      	b.n	8000984 <__aeabi_ddiv+0x254>
 80007d8:	2300      	movs	r3, #0
 80007da:	2200      	movs	r2, #0
 80007dc:	2500      	movs	r5, #0
 80007de:	051b      	lsls	r3, r3, #20
 80007e0:	4313      	orrs	r3, r2
 80007e2:	4652      	mov	r2, sl
 80007e4:	07d2      	lsls	r2, r2, #31
 80007e6:	4313      	orrs	r3, r2
 80007e8:	0028      	movs	r0, r5
 80007ea:	0019      	movs	r1, r3
 80007ec:	b005      	add	sp, #20
 80007ee:	bcf0      	pop	{r4, r5, r6, r7}
 80007f0:	46bb      	mov	fp, r7
 80007f2:	46b2      	mov	sl, r6
 80007f4:	46a9      	mov	r9, r5
 80007f6:	46a0      	mov	r8, r4
 80007f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007fa:	2200      	movs	r2, #0
 80007fc:	2500      	movs	r5, #0
 80007fe:	4ba8      	ldr	r3, [pc, #672]	; (8000aa0 <__aeabi_ddiv+0x370>)
 8000800:	e7ed      	b.n	80007de <__aeabi_ddiv+0xae>
 8000802:	46ba      	mov	sl, r7
 8000804:	46a0      	mov	r8, r4
 8000806:	000d      	movs	r5, r1
 8000808:	9000      	str	r0, [sp, #0]
 800080a:	e7dc      	b.n	80007c6 <__aeabi_ddiv+0x96>
 800080c:	4544      	cmp	r4, r8
 800080e:	d200      	bcs.n	8000812 <__aeabi_ddiv+0xe2>
 8000810:	e1c4      	b.n	8000b9c <__aeabi_ddiv+0x46c>
 8000812:	d100      	bne.n	8000816 <__aeabi_ddiv+0xe6>
 8000814:	e1bf      	b.n	8000b96 <__aeabi_ddiv+0x466>
 8000816:	2301      	movs	r3, #1
 8000818:	425b      	negs	r3, r3
 800081a:	469c      	mov	ip, r3
 800081c:	002e      	movs	r6, r5
 800081e:	4640      	mov	r0, r8
 8000820:	2500      	movs	r5, #0
 8000822:	44e3      	add	fp, ip
 8000824:	0223      	lsls	r3, r4, #8
 8000826:	0e0c      	lsrs	r4, r1, #24
 8000828:	431c      	orrs	r4, r3
 800082a:	0c1b      	lsrs	r3, r3, #16
 800082c:	4699      	mov	r9, r3
 800082e:	0423      	lsls	r3, r4, #16
 8000830:	020a      	lsls	r2, r1, #8
 8000832:	0c1f      	lsrs	r7, r3, #16
 8000834:	4649      	mov	r1, r9
 8000836:	9200      	str	r2, [sp, #0]
 8000838:	9701      	str	r7, [sp, #4]
 800083a:	f7ff fce9 	bl	8000210 <__aeabi_uidivmod>
 800083e:	0002      	movs	r2, r0
 8000840:	437a      	muls	r2, r7
 8000842:	040b      	lsls	r3, r1, #16
 8000844:	0c31      	lsrs	r1, r6, #16
 8000846:	4680      	mov	r8, r0
 8000848:	4319      	orrs	r1, r3
 800084a:	428a      	cmp	r2, r1
 800084c:	d907      	bls.n	800085e <__aeabi_ddiv+0x12e>
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
 8000852:	469c      	mov	ip, r3
 8000854:	1909      	adds	r1, r1, r4
 8000856:	44e0      	add	r8, ip
 8000858:	428c      	cmp	r4, r1
 800085a:	d800      	bhi.n	800085e <__aeabi_ddiv+0x12e>
 800085c:	e201      	b.n	8000c62 <__aeabi_ddiv+0x532>
 800085e:	1a88      	subs	r0, r1, r2
 8000860:	4649      	mov	r1, r9
 8000862:	f7ff fcd5 	bl	8000210 <__aeabi_uidivmod>
 8000866:	9a01      	ldr	r2, [sp, #4]
 8000868:	0436      	lsls	r6, r6, #16
 800086a:	4342      	muls	r2, r0
 800086c:	0409      	lsls	r1, r1, #16
 800086e:	0c36      	lsrs	r6, r6, #16
 8000870:	0003      	movs	r3, r0
 8000872:	430e      	orrs	r6, r1
 8000874:	42b2      	cmp	r2, r6
 8000876:	d904      	bls.n	8000882 <__aeabi_ddiv+0x152>
 8000878:	1936      	adds	r6, r6, r4
 800087a:	3b01      	subs	r3, #1
 800087c:	42b4      	cmp	r4, r6
 800087e:	d800      	bhi.n	8000882 <__aeabi_ddiv+0x152>
 8000880:	e1e9      	b.n	8000c56 <__aeabi_ddiv+0x526>
 8000882:	1ab0      	subs	r0, r6, r2
 8000884:	4642      	mov	r2, r8
 8000886:	9e00      	ldr	r6, [sp, #0]
 8000888:	0412      	lsls	r2, r2, #16
 800088a:	431a      	orrs	r2, r3
 800088c:	0c33      	lsrs	r3, r6, #16
 800088e:	001f      	movs	r7, r3
 8000890:	0c11      	lsrs	r1, r2, #16
 8000892:	4690      	mov	r8, r2
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	0413      	lsls	r3, r2, #16
 8000898:	0432      	lsls	r2, r6, #16
 800089a:	0c16      	lsrs	r6, r2, #16
 800089c:	0032      	movs	r2, r6
 800089e:	0c1b      	lsrs	r3, r3, #16
 80008a0:	435a      	muls	r2, r3
 80008a2:	9603      	str	r6, [sp, #12]
 80008a4:	437b      	muls	r3, r7
 80008a6:	434e      	muls	r6, r1
 80008a8:	4379      	muls	r1, r7
 80008aa:	0c17      	lsrs	r7, r2, #16
 80008ac:	46bc      	mov	ip, r7
 80008ae:	199b      	adds	r3, r3, r6
 80008b0:	4463      	add	r3, ip
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d903      	bls.n	80008be <__aeabi_ddiv+0x18e>
 80008b6:	2680      	movs	r6, #128	; 0x80
 80008b8:	0276      	lsls	r6, r6, #9
 80008ba:	46b4      	mov	ip, r6
 80008bc:	4461      	add	r1, ip
 80008be:	0c1e      	lsrs	r6, r3, #16
 80008c0:	1871      	adds	r1, r6, r1
 80008c2:	0416      	lsls	r6, r2, #16
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	0c36      	lsrs	r6, r6, #16
 80008c8:	199e      	adds	r6, r3, r6
 80008ca:	4288      	cmp	r0, r1
 80008cc:	d302      	bcc.n	80008d4 <__aeabi_ddiv+0x1a4>
 80008ce:	d112      	bne.n	80008f6 <__aeabi_ddiv+0x1c6>
 80008d0:	42b5      	cmp	r5, r6
 80008d2:	d210      	bcs.n	80008f6 <__aeabi_ddiv+0x1c6>
 80008d4:	4643      	mov	r3, r8
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	9b00      	ldr	r3, [sp, #0]
 80008da:	469c      	mov	ip, r3
 80008dc:	4465      	add	r5, ip
 80008de:	001f      	movs	r7, r3
 80008e0:	429d      	cmp	r5, r3
 80008e2:	419b      	sbcs	r3, r3
 80008e4:	425b      	negs	r3, r3
 80008e6:	191b      	adds	r3, r3, r4
 80008e8:	18c0      	adds	r0, r0, r3
 80008ea:	4284      	cmp	r4, r0
 80008ec:	d200      	bcs.n	80008f0 <__aeabi_ddiv+0x1c0>
 80008ee:	e19e      	b.n	8000c2e <__aeabi_ddiv+0x4fe>
 80008f0:	d100      	bne.n	80008f4 <__aeabi_ddiv+0x1c4>
 80008f2:	e199      	b.n	8000c28 <__aeabi_ddiv+0x4f8>
 80008f4:	4690      	mov	r8, r2
 80008f6:	1bae      	subs	r6, r5, r6
 80008f8:	42b5      	cmp	r5, r6
 80008fa:	41ad      	sbcs	r5, r5
 80008fc:	1a40      	subs	r0, r0, r1
 80008fe:	426d      	negs	r5, r5
 8000900:	1b40      	subs	r0, r0, r5
 8000902:	4284      	cmp	r4, r0
 8000904:	d100      	bne.n	8000908 <__aeabi_ddiv+0x1d8>
 8000906:	e1d2      	b.n	8000cae <__aeabi_ddiv+0x57e>
 8000908:	4649      	mov	r1, r9
 800090a:	f7ff fc81 	bl	8000210 <__aeabi_uidivmod>
 800090e:	9a01      	ldr	r2, [sp, #4]
 8000910:	040b      	lsls	r3, r1, #16
 8000912:	4342      	muls	r2, r0
 8000914:	0c31      	lsrs	r1, r6, #16
 8000916:	0005      	movs	r5, r0
 8000918:	4319      	orrs	r1, r3
 800091a:	428a      	cmp	r2, r1
 800091c:	d900      	bls.n	8000920 <__aeabi_ddiv+0x1f0>
 800091e:	e16c      	b.n	8000bfa <__aeabi_ddiv+0x4ca>
 8000920:	1a88      	subs	r0, r1, r2
 8000922:	4649      	mov	r1, r9
 8000924:	f7ff fc74 	bl	8000210 <__aeabi_uidivmod>
 8000928:	9a01      	ldr	r2, [sp, #4]
 800092a:	0436      	lsls	r6, r6, #16
 800092c:	4342      	muls	r2, r0
 800092e:	0409      	lsls	r1, r1, #16
 8000930:	0c36      	lsrs	r6, r6, #16
 8000932:	0003      	movs	r3, r0
 8000934:	430e      	orrs	r6, r1
 8000936:	42b2      	cmp	r2, r6
 8000938:	d900      	bls.n	800093c <__aeabi_ddiv+0x20c>
 800093a:	e153      	b.n	8000be4 <__aeabi_ddiv+0x4b4>
 800093c:	9803      	ldr	r0, [sp, #12]
 800093e:	1ab6      	subs	r6, r6, r2
 8000940:	0002      	movs	r2, r0
 8000942:	042d      	lsls	r5, r5, #16
 8000944:	431d      	orrs	r5, r3
 8000946:	9f02      	ldr	r7, [sp, #8]
 8000948:	042b      	lsls	r3, r5, #16
 800094a:	0c1b      	lsrs	r3, r3, #16
 800094c:	435a      	muls	r2, r3
 800094e:	437b      	muls	r3, r7
 8000950:	469c      	mov	ip, r3
 8000952:	0c29      	lsrs	r1, r5, #16
 8000954:	4348      	muls	r0, r1
 8000956:	0c13      	lsrs	r3, r2, #16
 8000958:	4484      	add	ip, r0
 800095a:	4463      	add	r3, ip
 800095c:	4379      	muls	r1, r7
 800095e:	4298      	cmp	r0, r3
 8000960:	d903      	bls.n	800096a <__aeabi_ddiv+0x23a>
 8000962:	2080      	movs	r0, #128	; 0x80
 8000964:	0240      	lsls	r0, r0, #9
 8000966:	4684      	mov	ip, r0
 8000968:	4461      	add	r1, ip
 800096a:	0c18      	lsrs	r0, r3, #16
 800096c:	0412      	lsls	r2, r2, #16
 800096e:	041b      	lsls	r3, r3, #16
 8000970:	0c12      	lsrs	r2, r2, #16
 8000972:	1840      	adds	r0, r0, r1
 8000974:	189b      	adds	r3, r3, r2
 8000976:	4286      	cmp	r6, r0
 8000978:	d200      	bcs.n	800097c <__aeabi_ddiv+0x24c>
 800097a:	e100      	b.n	8000b7e <__aeabi_ddiv+0x44e>
 800097c:	d100      	bne.n	8000980 <__aeabi_ddiv+0x250>
 800097e:	e0fb      	b.n	8000b78 <__aeabi_ddiv+0x448>
 8000980:	2301      	movs	r3, #1
 8000982:	431d      	orrs	r5, r3
 8000984:	4b49      	ldr	r3, [pc, #292]	; (8000aac <__aeabi_ddiv+0x37c>)
 8000986:	445b      	add	r3, fp
 8000988:	2b00      	cmp	r3, #0
 800098a:	dc00      	bgt.n	800098e <__aeabi_ddiv+0x25e>
 800098c:	e0aa      	b.n	8000ae4 <__aeabi_ddiv+0x3b4>
 800098e:	076a      	lsls	r2, r5, #29
 8000990:	d000      	beq.n	8000994 <__aeabi_ddiv+0x264>
 8000992:	e13d      	b.n	8000c10 <__aeabi_ddiv+0x4e0>
 8000994:	08e9      	lsrs	r1, r5, #3
 8000996:	4642      	mov	r2, r8
 8000998:	01d2      	lsls	r2, r2, #7
 800099a:	d506      	bpl.n	80009aa <__aeabi_ddiv+0x27a>
 800099c:	4642      	mov	r2, r8
 800099e:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <__aeabi_ddiv+0x380>)
 80009a0:	401a      	ands	r2, r3
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	4690      	mov	r8, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	445b      	add	r3, fp
 80009aa:	4a42      	ldr	r2, [pc, #264]	; (8000ab4 <__aeabi_ddiv+0x384>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	dd00      	ble.n	80009b2 <__aeabi_ddiv+0x282>
 80009b0:	e723      	b.n	80007fa <__aeabi_ddiv+0xca>
 80009b2:	4642      	mov	r2, r8
 80009b4:	055b      	lsls	r3, r3, #21
 80009b6:	0755      	lsls	r5, r2, #29
 80009b8:	0252      	lsls	r2, r2, #9
 80009ba:	430d      	orrs	r5, r1
 80009bc:	0b12      	lsrs	r2, r2, #12
 80009be:	0d5b      	lsrs	r3, r3, #21
 80009c0:	e70d      	b.n	80007de <__aeabi_ddiv+0xae>
 80009c2:	4651      	mov	r1, sl
 80009c4:	4321      	orrs	r1, r4
 80009c6:	d100      	bne.n	80009ca <__aeabi_ddiv+0x29a>
 80009c8:	e07c      	b.n	8000ac4 <__aeabi_ddiv+0x394>
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_ddiv+0x2a0>
 80009ce:	e0fb      	b.n	8000bc8 <__aeabi_ddiv+0x498>
 80009d0:	0020      	movs	r0, r4
 80009d2:	f001 f827 	bl	8001a24 <__clzsi2>
 80009d6:	0002      	movs	r2, r0
 80009d8:	3a0b      	subs	r2, #11
 80009da:	231d      	movs	r3, #29
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	4652      	mov	r2, sl
 80009e0:	0001      	movs	r1, r0
 80009e2:	40da      	lsrs	r2, r3
 80009e4:	4653      	mov	r3, sl
 80009e6:	3908      	subs	r1, #8
 80009e8:	408b      	lsls	r3, r1
 80009ea:	408c      	lsls	r4, r1
 80009ec:	0019      	movs	r1, r3
 80009ee:	4314      	orrs	r4, r2
 80009f0:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <__aeabi_ddiv+0x388>)
 80009f2:	4458      	add	r0, fp
 80009f4:	469b      	mov	fp, r3
 80009f6:	4483      	add	fp, r0
 80009f8:	2000      	movs	r0, #0
 80009fa:	e6d9      	b.n	80007b0 <__aeabi_ddiv+0x80>
 80009fc:	0003      	movs	r3, r0
 80009fe:	4323      	orrs	r3, r4
 8000a00:	4698      	mov	r8, r3
 8000a02:	d044      	beq.n	8000a8e <__aeabi_ddiv+0x35e>
 8000a04:	2c00      	cmp	r4, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_ddiv+0x2da>
 8000a08:	e0cf      	b.n	8000baa <__aeabi_ddiv+0x47a>
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	f001 f80a 	bl	8001a24 <__clzsi2>
 8000a10:	0001      	movs	r1, r0
 8000a12:	0002      	movs	r2, r0
 8000a14:	390b      	subs	r1, #11
 8000a16:	231d      	movs	r3, #29
 8000a18:	1a5b      	subs	r3, r3, r1
 8000a1a:	4649      	mov	r1, r9
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	40d9      	lsrs	r1, r3
 8000a20:	3808      	subs	r0, #8
 8000a22:	4084      	lsls	r4, r0
 8000a24:	000b      	movs	r3, r1
 8000a26:	464d      	mov	r5, r9
 8000a28:	4323      	orrs	r3, r4
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	4085      	lsls	r5, r0
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <__aeabi_ddiv+0x38c>)
 8000a30:	1a9b      	subs	r3, r3, r2
 8000a32:	469b      	mov	fp, r3
 8000a34:	2300      	movs	r3, #0
 8000a36:	4699      	mov	r9, r3
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	e69e      	b.n	800077a <__aeabi_ddiv+0x4a>
 8000a3c:	0002      	movs	r2, r0
 8000a3e:	4322      	orrs	r2, r4
 8000a40:	4690      	mov	r8, r2
 8000a42:	d11d      	bne.n	8000a80 <__aeabi_ddiv+0x350>
 8000a44:	2208      	movs	r2, #8
 8000a46:	469b      	mov	fp, r3
 8000a48:	2302      	movs	r3, #2
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	4691      	mov	r9, r2
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	e693      	b.n	800077a <__aeabi_ddiv+0x4a>
 8000a52:	4651      	mov	r1, sl
 8000a54:	4321      	orrs	r1, r4
 8000a56:	d109      	bne.n	8000a6c <__aeabi_ddiv+0x33c>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	464a      	mov	r2, r9
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <__aeabi_ddiv+0x390>)
 8000a60:	4691      	mov	r9, r2
 8000a62:	469c      	mov	ip, r3
 8000a64:	2400      	movs	r4, #0
 8000a66:	2002      	movs	r0, #2
 8000a68:	44e3      	add	fp, ip
 8000a6a:	e6a1      	b.n	80007b0 <__aeabi_ddiv+0x80>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	464a      	mov	r2, r9
 8000a70:	431a      	orrs	r2, r3
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <__aeabi_ddiv+0x390>)
 8000a74:	4691      	mov	r9, r2
 8000a76:	469c      	mov	ip, r3
 8000a78:	4651      	mov	r1, sl
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	44e3      	add	fp, ip
 8000a7e:	e697      	b.n	80007b0 <__aeabi_ddiv+0x80>
 8000a80:	220c      	movs	r2, #12
 8000a82:	469b      	mov	fp, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	46a0      	mov	r8, r4
 8000a88:	4691      	mov	r9, r2
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	e675      	b.n	800077a <__aeabi_ddiv+0x4a>
 8000a8e:	2304      	movs	r3, #4
 8000a90:	4699      	mov	r9, r3
 8000a92:	2300      	movs	r3, #0
 8000a94:	469b      	mov	fp, r3
 8000a96:	3301      	adds	r3, #1
 8000a98:	2500      	movs	r5, #0
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	e66d      	b.n	800077a <__aeabi_ddiv+0x4a>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	fffffc01 	.word	0xfffffc01
 8000aa8:	080040bc 	.word	0x080040bc
 8000aac:	000003ff 	.word	0x000003ff
 8000ab0:	feffffff 	.word	0xfeffffff
 8000ab4:	000007fe 	.word	0x000007fe
 8000ab8:	000003f3 	.word	0x000003f3
 8000abc:	fffffc0d 	.word	0xfffffc0d
 8000ac0:	fffff801 	.word	0xfffff801
 8000ac4:	464a      	mov	r2, r9
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	4691      	mov	r9, r2
 8000acc:	2400      	movs	r4, #0
 8000ace:	2001      	movs	r0, #1
 8000ad0:	e66e      	b.n	80007b0 <__aeabi_ddiv+0x80>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	2500      	movs	r5, #0
 8000ada:	4b88      	ldr	r3, [pc, #544]	; (8000cfc <__aeabi_ddiv+0x5cc>)
 8000adc:	0312      	lsls	r2, r2, #12
 8000ade:	e67e      	b.n	80007de <__aeabi_ddiv+0xae>
 8000ae0:	2501      	movs	r5, #1
 8000ae2:	426d      	negs	r5, r5
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	1ad2      	subs	r2, r2, r3
 8000ae8:	2a38      	cmp	r2, #56	; 0x38
 8000aea:	dd00      	ble.n	8000aee <__aeabi_ddiv+0x3be>
 8000aec:	e674      	b.n	80007d8 <__aeabi_ddiv+0xa8>
 8000aee:	2a1f      	cmp	r2, #31
 8000af0:	dc00      	bgt.n	8000af4 <__aeabi_ddiv+0x3c4>
 8000af2:	e0bd      	b.n	8000c70 <__aeabi_ddiv+0x540>
 8000af4:	211f      	movs	r1, #31
 8000af6:	4249      	negs	r1, r1
 8000af8:	1acb      	subs	r3, r1, r3
 8000afa:	4641      	mov	r1, r8
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	000b      	movs	r3, r1
 8000b00:	2a20      	cmp	r2, #32
 8000b02:	d004      	beq.n	8000b0e <__aeabi_ddiv+0x3de>
 8000b04:	4641      	mov	r1, r8
 8000b06:	4a7e      	ldr	r2, [pc, #504]	; (8000d00 <__aeabi_ddiv+0x5d0>)
 8000b08:	445a      	add	r2, fp
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	430d      	orrs	r5, r1
 8000b0e:	0029      	movs	r1, r5
 8000b10:	1e4a      	subs	r2, r1, #1
 8000b12:	4191      	sbcs	r1, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	2307      	movs	r3, #7
 8000b18:	001d      	movs	r5, r3
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	400d      	ands	r5, r1
 8000b1e:	420b      	tst	r3, r1
 8000b20:	d100      	bne.n	8000b24 <__aeabi_ddiv+0x3f4>
 8000b22:	e0d0      	b.n	8000cc6 <__aeabi_ddiv+0x596>
 8000b24:	220f      	movs	r2, #15
 8000b26:	2300      	movs	r3, #0
 8000b28:	400a      	ands	r2, r1
 8000b2a:	2a04      	cmp	r2, #4
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_ddiv+0x400>
 8000b2e:	e0c7      	b.n	8000cc0 <__aeabi_ddiv+0x590>
 8000b30:	1d0a      	adds	r2, r1, #4
 8000b32:	428a      	cmp	r2, r1
 8000b34:	4189      	sbcs	r1, r1
 8000b36:	4249      	negs	r1, r1
 8000b38:	185b      	adds	r3, r3, r1
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	021a      	lsls	r2, r3, #8
 8000b3e:	d400      	bmi.n	8000b42 <__aeabi_ddiv+0x412>
 8000b40:	e0be      	b.n	8000cc0 <__aeabi_ddiv+0x590>
 8000b42:	2301      	movs	r3, #1
 8000b44:	2200      	movs	r2, #0
 8000b46:	2500      	movs	r5, #0
 8000b48:	e649      	b.n	80007de <__aeabi_ddiv+0xae>
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	0312      	lsls	r2, r2, #12
 8000b50:	4213      	tst	r3, r2
 8000b52:	d008      	beq.n	8000b66 <__aeabi_ddiv+0x436>
 8000b54:	4214      	tst	r4, r2
 8000b56:	d106      	bne.n	8000b66 <__aeabi_ddiv+0x436>
 8000b58:	4322      	orrs	r2, r4
 8000b5a:	0312      	lsls	r2, r2, #12
 8000b5c:	46ba      	mov	sl, r7
 8000b5e:	000d      	movs	r5, r1
 8000b60:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <__aeabi_ddiv+0x5cc>)
 8000b62:	0b12      	lsrs	r2, r2, #12
 8000b64:	e63b      	b.n	80007de <__aeabi_ddiv+0xae>
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	4643      	mov	r3, r8
 8000b6a:	0312      	lsls	r2, r2, #12
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	0312      	lsls	r2, r2, #12
 8000b70:	46b2      	mov	sl, r6
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <__aeabi_ddiv+0x5cc>)
 8000b74:	0b12      	lsrs	r2, r2, #12
 8000b76:	e632      	b.n	80007de <__aeabi_ddiv+0xae>
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_ddiv+0x44e>
 8000b7c:	e702      	b.n	8000984 <__aeabi_ddiv+0x254>
 8000b7e:	19a6      	adds	r6, r4, r6
 8000b80:	1e6a      	subs	r2, r5, #1
 8000b82:	42a6      	cmp	r6, r4
 8000b84:	d200      	bcs.n	8000b88 <__aeabi_ddiv+0x458>
 8000b86:	e089      	b.n	8000c9c <__aeabi_ddiv+0x56c>
 8000b88:	4286      	cmp	r6, r0
 8000b8a:	d200      	bcs.n	8000b8e <__aeabi_ddiv+0x45e>
 8000b8c:	e09f      	b.n	8000cce <__aeabi_ddiv+0x59e>
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_ddiv+0x462>
 8000b90:	e0af      	b.n	8000cf2 <__aeabi_ddiv+0x5c2>
 8000b92:	0015      	movs	r5, r2
 8000b94:	e6f4      	b.n	8000980 <__aeabi_ddiv+0x250>
 8000b96:	42a9      	cmp	r1, r5
 8000b98:	d900      	bls.n	8000b9c <__aeabi_ddiv+0x46c>
 8000b9a:	e63c      	b.n	8000816 <__aeabi_ddiv+0xe6>
 8000b9c:	4643      	mov	r3, r8
 8000b9e:	07de      	lsls	r6, r3, #31
 8000ba0:	0858      	lsrs	r0, r3, #1
 8000ba2:	086b      	lsrs	r3, r5, #1
 8000ba4:	431e      	orrs	r6, r3
 8000ba6:	07ed      	lsls	r5, r5, #31
 8000ba8:	e63c      	b.n	8000824 <__aeabi_ddiv+0xf4>
 8000baa:	f000 ff3b 	bl	8001a24 <__clzsi2>
 8000bae:	0001      	movs	r1, r0
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	3115      	adds	r1, #21
 8000bb4:	3220      	adds	r2, #32
 8000bb6:	291c      	cmp	r1, #28
 8000bb8:	dc00      	bgt.n	8000bbc <__aeabi_ddiv+0x48c>
 8000bba:	e72c      	b.n	8000a16 <__aeabi_ddiv+0x2e6>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	3808      	subs	r0, #8
 8000bc0:	4083      	lsls	r3, r0
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	e732      	b.n	8000a2e <__aeabi_ddiv+0x2fe>
 8000bc8:	f000 ff2c 	bl	8001a24 <__clzsi2>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	001a      	movs	r2, r3
 8000bd0:	3215      	adds	r2, #21
 8000bd2:	3020      	adds	r0, #32
 8000bd4:	2a1c      	cmp	r2, #28
 8000bd6:	dc00      	bgt.n	8000bda <__aeabi_ddiv+0x4aa>
 8000bd8:	e6ff      	b.n	80009da <__aeabi_ddiv+0x2aa>
 8000bda:	4654      	mov	r4, sl
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	2100      	movs	r1, #0
 8000be0:	409c      	lsls	r4, r3
 8000be2:	e705      	b.n	80009f0 <__aeabi_ddiv+0x2c0>
 8000be4:	1936      	adds	r6, r6, r4
 8000be6:	3b01      	subs	r3, #1
 8000be8:	42b4      	cmp	r4, r6
 8000bea:	d900      	bls.n	8000bee <__aeabi_ddiv+0x4be>
 8000bec:	e6a6      	b.n	800093c <__aeabi_ddiv+0x20c>
 8000bee:	42b2      	cmp	r2, r6
 8000bf0:	d800      	bhi.n	8000bf4 <__aeabi_ddiv+0x4c4>
 8000bf2:	e6a3      	b.n	800093c <__aeabi_ddiv+0x20c>
 8000bf4:	1e83      	subs	r3, r0, #2
 8000bf6:	1936      	adds	r6, r6, r4
 8000bf8:	e6a0      	b.n	800093c <__aeabi_ddiv+0x20c>
 8000bfa:	1909      	adds	r1, r1, r4
 8000bfc:	3d01      	subs	r5, #1
 8000bfe:	428c      	cmp	r4, r1
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x4d4>
 8000c02:	e68d      	b.n	8000920 <__aeabi_ddiv+0x1f0>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	d800      	bhi.n	8000c0a <__aeabi_ddiv+0x4da>
 8000c08:	e68a      	b.n	8000920 <__aeabi_ddiv+0x1f0>
 8000c0a:	1e85      	subs	r5, r0, #2
 8000c0c:	1909      	adds	r1, r1, r4
 8000c0e:	e687      	b.n	8000920 <__aeabi_ddiv+0x1f0>
 8000c10:	220f      	movs	r2, #15
 8000c12:	402a      	ands	r2, r5
 8000c14:	2a04      	cmp	r2, #4
 8000c16:	d100      	bne.n	8000c1a <__aeabi_ddiv+0x4ea>
 8000c18:	e6bc      	b.n	8000994 <__aeabi_ddiv+0x264>
 8000c1a:	1d29      	adds	r1, r5, #4
 8000c1c:	42a9      	cmp	r1, r5
 8000c1e:	41ad      	sbcs	r5, r5
 8000c20:	426d      	negs	r5, r5
 8000c22:	08c9      	lsrs	r1, r1, #3
 8000c24:	44a8      	add	r8, r5
 8000c26:	e6b6      	b.n	8000996 <__aeabi_ddiv+0x266>
 8000c28:	42af      	cmp	r7, r5
 8000c2a:	d900      	bls.n	8000c2e <__aeabi_ddiv+0x4fe>
 8000c2c:	e662      	b.n	80008f4 <__aeabi_ddiv+0x1c4>
 8000c2e:	4281      	cmp	r1, r0
 8000c30:	d804      	bhi.n	8000c3c <__aeabi_ddiv+0x50c>
 8000c32:	d000      	beq.n	8000c36 <__aeabi_ddiv+0x506>
 8000c34:	e65e      	b.n	80008f4 <__aeabi_ddiv+0x1c4>
 8000c36:	42ae      	cmp	r6, r5
 8000c38:	d800      	bhi.n	8000c3c <__aeabi_ddiv+0x50c>
 8000c3a:	e65b      	b.n	80008f4 <__aeabi_ddiv+0x1c4>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	425b      	negs	r3, r3
 8000c40:	469c      	mov	ip, r3
 8000c42:	9b00      	ldr	r3, [sp, #0]
 8000c44:	44e0      	add	r8, ip
 8000c46:	469c      	mov	ip, r3
 8000c48:	4465      	add	r5, ip
 8000c4a:	429d      	cmp	r5, r3
 8000c4c:	419b      	sbcs	r3, r3
 8000c4e:	425b      	negs	r3, r3
 8000c50:	191b      	adds	r3, r3, r4
 8000c52:	18c0      	adds	r0, r0, r3
 8000c54:	e64f      	b.n	80008f6 <__aeabi_ddiv+0x1c6>
 8000c56:	42b2      	cmp	r2, r6
 8000c58:	d800      	bhi.n	8000c5c <__aeabi_ddiv+0x52c>
 8000c5a:	e612      	b.n	8000882 <__aeabi_ddiv+0x152>
 8000c5c:	1e83      	subs	r3, r0, #2
 8000c5e:	1936      	adds	r6, r6, r4
 8000c60:	e60f      	b.n	8000882 <__aeabi_ddiv+0x152>
 8000c62:	428a      	cmp	r2, r1
 8000c64:	d800      	bhi.n	8000c68 <__aeabi_ddiv+0x538>
 8000c66:	e5fa      	b.n	800085e <__aeabi_ddiv+0x12e>
 8000c68:	1e83      	subs	r3, r0, #2
 8000c6a:	4698      	mov	r8, r3
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	e5f6      	b.n	800085e <__aeabi_ddiv+0x12e>
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <__aeabi_ddiv+0x5d4>)
 8000c72:	0028      	movs	r0, r5
 8000c74:	445b      	add	r3, fp
 8000c76:	4641      	mov	r1, r8
 8000c78:	409d      	lsls	r5, r3
 8000c7a:	4099      	lsls	r1, r3
 8000c7c:	40d0      	lsrs	r0, r2
 8000c7e:	1e6b      	subs	r3, r5, #1
 8000c80:	419d      	sbcs	r5, r3
 8000c82:	4643      	mov	r3, r8
 8000c84:	4301      	orrs	r1, r0
 8000c86:	4329      	orrs	r1, r5
 8000c88:	40d3      	lsrs	r3, r2
 8000c8a:	074a      	lsls	r2, r1, #29
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x560>
 8000c8e:	e755      	b.n	8000b3c <__aeabi_ddiv+0x40c>
 8000c90:	220f      	movs	r2, #15
 8000c92:	400a      	ands	r2, r1
 8000c94:	2a04      	cmp	r2, #4
 8000c96:	d000      	beq.n	8000c9a <__aeabi_ddiv+0x56a>
 8000c98:	e74a      	b.n	8000b30 <__aeabi_ddiv+0x400>
 8000c9a:	e74f      	b.n	8000b3c <__aeabi_ddiv+0x40c>
 8000c9c:	0015      	movs	r5, r2
 8000c9e:	4286      	cmp	r6, r0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_ddiv+0x574>
 8000ca2:	e66d      	b.n	8000980 <__aeabi_ddiv+0x250>
 8000ca4:	9a00      	ldr	r2, [sp, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d000      	beq.n	8000cac <__aeabi_ddiv+0x57c>
 8000caa:	e669      	b.n	8000980 <__aeabi_ddiv+0x250>
 8000cac:	e66a      	b.n	8000984 <__aeabi_ddiv+0x254>
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <__aeabi_ddiv+0x5d8>)
 8000cb0:	445b      	add	r3, fp
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	dc00      	bgt.n	8000cb8 <__aeabi_ddiv+0x588>
 8000cb6:	e713      	b.n	8000ae0 <__aeabi_ddiv+0x3b0>
 8000cb8:	2501      	movs	r5, #1
 8000cba:	2100      	movs	r1, #0
 8000cbc:	44a8      	add	r8, r5
 8000cbe:	e66a      	b.n	8000996 <__aeabi_ddiv+0x266>
 8000cc0:	075d      	lsls	r5, r3, #29
 8000cc2:	025b      	lsls	r3, r3, #9
 8000cc4:	0b1a      	lsrs	r2, r3, #12
 8000cc6:	08c9      	lsrs	r1, r1, #3
 8000cc8:	2300      	movs	r3, #0
 8000cca:	430d      	orrs	r5, r1
 8000ccc:	e587      	b.n	80007de <__aeabi_ddiv+0xae>
 8000cce:	9900      	ldr	r1, [sp, #0]
 8000cd0:	3d02      	subs	r5, #2
 8000cd2:	004a      	lsls	r2, r1, #1
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	41bf      	sbcs	r7, r7
 8000cd8:	427f      	negs	r7, r7
 8000cda:	193f      	adds	r7, r7, r4
 8000cdc:	19f6      	adds	r6, r6, r7
 8000cde:	9200      	str	r2, [sp, #0]
 8000ce0:	e7dd      	b.n	8000c9e <__aeabi_ddiv+0x56e>
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	4643      	mov	r3, r8
 8000ce6:	0312      	lsls	r2, r2, #12
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	0312      	lsls	r2, r2, #12
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <__aeabi_ddiv+0x5cc>)
 8000cee:	0b12      	lsrs	r2, r2, #12
 8000cf0:	e575      	b.n	80007de <__aeabi_ddiv+0xae>
 8000cf2:	9900      	ldr	r1, [sp, #0]
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	d3ea      	bcc.n	8000cce <__aeabi_ddiv+0x59e>
 8000cf8:	0015      	movs	r5, r2
 8000cfa:	e7d3      	b.n	8000ca4 <__aeabi_ddiv+0x574>
 8000cfc:	000007ff 	.word	0x000007ff
 8000d00:	0000043e 	.word	0x0000043e
 8000d04:	0000041e 	.word	0x0000041e
 8000d08:	000003ff 	.word	0x000003ff

08000d0c <__aeabi_dmul>:
 8000d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0e:	4645      	mov	r5, r8
 8000d10:	46de      	mov	lr, fp
 8000d12:	4657      	mov	r7, sl
 8000d14:	464e      	mov	r6, r9
 8000d16:	b5e0      	push	{r5, r6, r7, lr}
 8000d18:	001f      	movs	r7, r3
 8000d1a:	030b      	lsls	r3, r1, #12
 8000d1c:	0b1b      	lsrs	r3, r3, #12
 8000d1e:	469b      	mov	fp, r3
 8000d20:	004d      	lsls	r5, r1, #1
 8000d22:	0fcb      	lsrs	r3, r1, #31
 8000d24:	0004      	movs	r4, r0
 8000d26:	4691      	mov	r9, r2
 8000d28:	4698      	mov	r8, r3
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	0d6d      	lsrs	r5, r5, #21
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dmul+0x26>
 8000d30:	e1cd      	b.n	80010ce <__aeabi_dmul+0x3c2>
 8000d32:	4bce      	ldr	r3, [pc, #824]	; (800106c <__aeabi_dmul+0x360>)
 8000d34:	429d      	cmp	r5, r3
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dmul+0x2e>
 8000d38:	e1e9      	b.n	800110e <__aeabi_dmul+0x402>
 8000d3a:	465a      	mov	r2, fp
 8000d3c:	0f43      	lsrs	r3, r0, #29
 8000d3e:	00d2      	lsls	r2, r2, #3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	0412      	lsls	r2, r2, #16
 8000d46:	431a      	orrs	r2, r3
 8000d48:	00c3      	lsls	r3, r0, #3
 8000d4a:	469a      	mov	sl, r3
 8000d4c:	4bc8      	ldr	r3, [pc, #800]	; (8001070 <__aeabi_dmul+0x364>)
 8000d4e:	4693      	mov	fp, r2
 8000d50:	469c      	mov	ip, r3
 8000d52:	2300      	movs	r3, #0
 8000d54:	2600      	movs	r6, #0
 8000d56:	4465      	add	r5, ip
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	033c      	lsls	r4, r7, #12
 8000d5c:	007b      	lsls	r3, r7, #1
 8000d5e:	4648      	mov	r0, r9
 8000d60:	0b24      	lsrs	r4, r4, #12
 8000d62:	0d5b      	lsrs	r3, r3, #21
 8000d64:	0fff      	lsrs	r7, r7, #31
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dmul+0x60>
 8000d6a:	e189      	b.n	8001080 <__aeabi_dmul+0x374>
 8000d6c:	4abf      	ldr	r2, [pc, #764]	; (800106c <__aeabi_dmul+0x360>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <__aeabi_dmul+0x9a>
 8000d72:	0f42      	lsrs	r2, r0, #29
 8000d74:	00e4      	lsls	r4, r4, #3
 8000d76:	4322      	orrs	r2, r4
 8000d78:	2480      	movs	r4, #128	; 0x80
 8000d7a:	0424      	lsls	r4, r4, #16
 8000d7c:	4314      	orrs	r4, r2
 8000d7e:	4abc      	ldr	r2, [pc, #752]	; (8001070 <__aeabi_dmul+0x364>)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4694      	mov	ip, r2
 8000d84:	4642      	mov	r2, r8
 8000d86:	4463      	add	r3, ip
 8000d88:	195b      	adds	r3, r3, r5
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	9b01      	ldr	r3, [sp, #4]
 8000d8e:	407a      	eors	r2, r7
 8000d90:	3301      	adds	r3, #1
 8000d92:	00c0      	lsls	r0, r0, #3
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2e0a      	cmp	r6, #10
 8000d9a:	dd1c      	ble.n	8000dd6 <__aeabi_dmul+0xca>
 8000d9c:	003a      	movs	r2, r7
 8000d9e:	2e0b      	cmp	r6, #11
 8000da0:	d05e      	beq.n	8000e60 <__aeabi_dmul+0x154>
 8000da2:	4647      	mov	r7, r8
 8000da4:	e056      	b.n	8000e54 <__aeabi_dmul+0x148>
 8000da6:	4649      	mov	r1, r9
 8000da8:	4bb0      	ldr	r3, [pc, #704]	; (800106c <__aeabi_dmul+0x360>)
 8000daa:	4321      	orrs	r1, r4
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	2900      	cmp	r1, #0
 8000db2:	d12a      	bne.n	8000e0a <__aeabi_dmul+0xfe>
 8000db4:	2080      	movs	r0, #128	; 0x80
 8000db6:	2202      	movs	r2, #2
 8000db8:	0100      	lsls	r0, r0, #4
 8000dba:	002b      	movs	r3, r5
 8000dbc:	4684      	mov	ip, r0
 8000dbe:	4316      	orrs	r6, r2
 8000dc0:	4642      	mov	r2, r8
 8000dc2:	4463      	add	r3, ip
 8000dc4:	407a      	eors	r2, r7
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2e0a      	cmp	r6, #10
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dmul+0xc4>
 8000dce:	e231      	b.n	8001234 <__aeabi_dmul+0x528>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	2400      	movs	r4, #0
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	2e02      	cmp	r6, #2
 8000dd8:	dc26      	bgt.n	8000e28 <__aeabi_dmul+0x11c>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e01      	cmp	r6, #1
 8000dde:	d852      	bhi.n	8000e86 <__aeabi_dmul+0x17a>
 8000de0:	2902      	cmp	r1, #2
 8000de2:	d04c      	beq.n	8000e7e <__aeabi_dmul+0x172>
 8000de4:	2901      	cmp	r1, #1
 8000de6:	d000      	beq.n	8000dea <__aeabi_dmul+0xde>
 8000de8:	e118      	b.n	800101c <__aeabi_dmul+0x310>
 8000dea:	2300      	movs	r3, #0
 8000dec:	2400      	movs	r4, #0
 8000dee:	2500      	movs	r5, #0
 8000df0:	051b      	lsls	r3, r3, #20
 8000df2:	4323      	orrs	r3, r4
 8000df4:	07d2      	lsls	r2, r2, #31
 8000df6:	4313      	orrs	r3, r2
 8000df8:	0028      	movs	r0, r5
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	b007      	add	sp, #28
 8000dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8000e00:	46bb      	mov	fp, r7
 8000e02:	46b2      	mov	sl, r6
 8000e04:	46a9      	mov	r9, r5
 8000e06:	46a0      	mov	r8, r4
 8000e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	0109      	lsls	r1, r1, #4
 8000e10:	002b      	movs	r3, r5
 8000e12:	468c      	mov	ip, r1
 8000e14:	4316      	orrs	r6, r2
 8000e16:	4642      	mov	r2, r8
 8000e18:	4463      	add	r3, ip
 8000e1a:	407a      	eors	r2, r7
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	2e0a      	cmp	r6, #10
 8000e22:	dd00      	ble.n	8000e26 <__aeabi_dmul+0x11a>
 8000e24:	e228      	b.n	8001278 <__aeabi_dmul+0x56c>
 8000e26:	2103      	movs	r1, #3
 8000e28:	2501      	movs	r5, #1
 8000e2a:	40b5      	lsls	r5, r6
 8000e2c:	46ac      	mov	ip, r5
 8000e2e:	26a6      	movs	r6, #166	; 0xa6
 8000e30:	4663      	mov	r3, ip
 8000e32:	00f6      	lsls	r6, r6, #3
 8000e34:	4035      	ands	r5, r6
 8000e36:	4233      	tst	r3, r6
 8000e38:	d10b      	bne.n	8000e52 <__aeabi_dmul+0x146>
 8000e3a:	2690      	movs	r6, #144	; 0x90
 8000e3c:	00b6      	lsls	r6, r6, #2
 8000e3e:	4233      	tst	r3, r6
 8000e40:	d118      	bne.n	8000e74 <__aeabi_dmul+0x168>
 8000e42:	3eb9      	subs	r6, #185	; 0xb9
 8000e44:	3eff      	subs	r6, #255	; 0xff
 8000e46:	421e      	tst	r6, r3
 8000e48:	d01d      	beq.n	8000e86 <__aeabi_dmul+0x17a>
 8000e4a:	46a3      	mov	fp, r4
 8000e4c:	4682      	mov	sl, r0
 8000e4e:	9100      	str	r1, [sp, #0]
 8000e50:	e000      	b.n	8000e54 <__aeabi_dmul+0x148>
 8000e52:	0017      	movs	r7, r2
 8000e54:	9900      	ldr	r1, [sp, #0]
 8000e56:	003a      	movs	r2, r7
 8000e58:	2902      	cmp	r1, #2
 8000e5a:	d010      	beq.n	8000e7e <__aeabi_dmul+0x172>
 8000e5c:	465c      	mov	r4, fp
 8000e5e:	4650      	mov	r0, sl
 8000e60:	2903      	cmp	r1, #3
 8000e62:	d1bf      	bne.n	8000de4 <__aeabi_dmul+0xd8>
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	031b      	lsls	r3, r3, #12
 8000e68:	431c      	orrs	r4, r3
 8000e6a:	0324      	lsls	r4, r4, #12
 8000e6c:	0005      	movs	r5, r0
 8000e6e:	4b7f      	ldr	r3, [pc, #508]	; (800106c <__aeabi_dmul+0x360>)
 8000e70:	0b24      	lsrs	r4, r4, #12
 8000e72:	e7bd      	b.n	8000df0 <__aeabi_dmul+0xe4>
 8000e74:	2480      	movs	r4, #128	; 0x80
 8000e76:	2200      	movs	r2, #0
 8000e78:	4b7c      	ldr	r3, [pc, #496]	; (800106c <__aeabi_dmul+0x360>)
 8000e7a:	0324      	lsls	r4, r4, #12
 8000e7c:	e7b8      	b.n	8000df0 <__aeabi_dmul+0xe4>
 8000e7e:	2400      	movs	r4, #0
 8000e80:	2500      	movs	r5, #0
 8000e82:	4b7a      	ldr	r3, [pc, #488]	; (800106c <__aeabi_dmul+0x360>)
 8000e84:	e7b4      	b.n	8000df0 <__aeabi_dmul+0xe4>
 8000e86:	4653      	mov	r3, sl
 8000e88:	041e      	lsls	r6, r3, #16
 8000e8a:	0c36      	lsrs	r6, r6, #16
 8000e8c:	0c1f      	lsrs	r7, r3, #16
 8000e8e:	0033      	movs	r3, r6
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	0400      	lsls	r0, r0, #16
 8000e94:	0c00      	lsrs	r0, r0, #16
 8000e96:	4343      	muls	r3, r0
 8000e98:	4698      	mov	r8, r3
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	437b      	muls	r3, r7
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	0033      	movs	r3, r6
 8000ea2:	434b      	muls	r3, r1
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	000d      	movs	r5, r1
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	469a      	mov	sl, r3
 8000eae:	437d      	muls	r5, r7
 8000eb0:	44cc      	add	ip, r9
 8000eb2:	44d4      	add	ip, sl
 8000eb4:	9500      	str	r5, [sp, #0]
 8000eb6:	45e1      	cmp	r9, ip
 8000eb8:	d904      	bls.n	8000ec4 <__aeabi_dmul+0x1b8>
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	025b      	lsls	r3, r3, #9
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	444d      	add	r5, r9
 8000ec2:	9500      	str	r5, [sp, #0]
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	001d      	movs	r5, r3
 8000eca:	4663      	mov	r3, ip
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	469c      	mov	ip, r3
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	0c1b      	lsrs	r3, r3, #16
 8000ed6:	4698      	mov	r8, r3
 8000ed8:	4663      	mov	r3, ip
 8000eda:	4443      	add	r3, r8
 8000edc:	9303      	str	r3, [sp, #12]
 8000ede:	0c23      	lsrs	r3, r4, #16
 8000ee0:	4698      	mov	r8, r3
 8000ee2:	0033      	movs	r3, r6
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	0c24      	lsrs	r4, r4, #16
 8000ee8:	4363      	muls	r3, r4
 8000eea:	469c      	mov	ip, r3
 8000eec:	0023      	movs	r3, r4
 8000eee:	437b      	muls	r3, r7
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	435e      	muls	r6, r3
 8000ef6:	435f      	muls	r7, r3
 8000ef8:	444e      	add	r6, r9
 8000efa:	4663      	mov	r3, ip
 8000efc:	46b2      	mov	sl, r6
 8000efe:	0c1e      	lsrs	r6, r3, #16
 8000f00:	4456      	add	r6, sl
 8000f02:	45b1      	cmp	r9, r6
 8000f04:	d903      	bls.n	8000f0e <__aeabi_dmul+0x202>
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	025b      	lsls	r3, r3, #9
 8000f0a:	4699      	mov	r9, r3
 8000f0c:	444f      	add	r7, r9
 8000f0e:	0c33      	lsrs	r3, r6, #16
 8000f10:	4699      	mov	r9, r3
 8000f12:	003b      	movs	r3, r7
 8000f14:	444b      	add	r3, r9
 8000f16:	9305      	str	r3, [sp, #20]
 8000f18:	4663      	mov	r3, ip
 8000f1a:	46ac      	mov	ip, r5
 8000f1c:	041f      	lsls	r7, r3, #16
 8000f1e:	0c3f      	lsrs	r7, r7, #16
 8000f20:	0436      	lsls	r6, r6, #16
 8000f22:	19f6      	adds	r6, r6, r7
 8000f24:	44b4      	add	ip, r6
 8000f26:	4663      	mov	r3, ip
 8000f28:	9304      	str	r3, [sp, #16]
 8000f2a:	465b      	mov	r3, fp
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	469c      	mov	ip, r3
 8000f30:	465b      	mov	r3, fp
 8000f32:	041f      	lsls	r7, r3, #16
 8000f34:	0c3f      	lsrs	r7, r7, #16
 8000f36:	003b      	movs	r3, r7
 8000f38:	4343      	muls	r3, r0
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	4343      	muls	r3, r0
 8000f40:	469a      	mov	sl, r3
 8000f42:	464b      	mov	r3, r9
 8000f44:	4660      	mov	r0, ip
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	469b      	mov	fp, r3
 8000f4a:	4348      	muls	r0, r1
 8000f4c:	4379      	muls	r1, r7
 8000f4e:	4451      	add	r1, sl
 8000f50:	4459      	add	r1, fp
 8000f52:	458a      	cmp	sl, r1
 8000f54:	d903      	bls.n	8000f5e <__aeabi_dmul+0x252>
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	025b      	lsls	r3, r3, #9
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	4450      	add	r0, sl
 8000f5e:	0c0b      	lsrs	r3, r1, #16
 8000f60:	469a      	mov	sl, r3
 8000f62:	464b      	mov	r3, r9
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	4699      	mov	r9, r3
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	4363      	muls	r3, r4
 8000f6e:	0409      	lsls	r1, r1, #16
 8000f70:	4645      	mov	r5, r8
 8000f72:	4449      	add	r1, r9
 8000f74:	4699      	mov	r9, r3
 8000f76:	4663      	mov	r3, ip
 8000f78:	435c      	muls	r4, r3
 8000f7a:	436b      	muls	r3, r5
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	464b      	mov	r3, r9
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	4698      	mov	r8, r3
 8000f84:	436f      	muls	r7, r5
 8000f86:	193f      	adds	r7, r7, r4
 8000f88:	4447      	add	r7, r8
 8000f8a:	4450      	add	r0, sl
 8000f8c:	42bc      	cmp	r4, r7
 8000f8e:	d903      	bls.n	8000f98 <__aeabi_dmul+0x28c>
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	025b      	lsls	r3, r3, #9
 8000f94:	4698      	mov	r8, r3
 8000f96:	44c4      	add	ip, r8
 8000f98:	9b04      	ldr	r3, [sp, #16]
 8000f9a:	9d00      	ldr	r5, [sp, #0]
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	4445      	add	r5, r8
 8000fa0:	42b5      	cmp	r5, r6
 8000fa2:	41b6      	sbcs	r6, r6
 8000fa4:	4273      	negs	r3, r6
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	464b      	mov	r3, r9
 8000faa:	041e      	lsls	r6, r3, #16
 8000fac:	9b05      	ldr	r3, [sp, #20]
 8000fae:	043c      	lsls	r4, r7, #16
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	19a4      	adds	r4, r4, r6
 8000fb6:	444c      	add	r4, r9
 8000fb8:	46a1      	mov	r9, r4
 8000fba:	4683      	mov	fp, r0
 8000fbc:	186e      	adds	r6, r5, r1
 8000fbe:	44c1      	add	r9, r8
 8000fc0:	428e      	cmp	r6, r1
 8000fc2:	4189      	sbcs	r1, r1
 8000fc4:	44cb      	add	fp, r9
 8000fc6:	465d      	mov	r5, fp
 8000fc8:	4249      	negs	r1, r1
 8000fca:	186d      	adds	r5, r5, r1
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	41a4      	sbcs	r4, r4
 8000fd0:	45c1      	cmp	r9, r8
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	4583      	cmp	fp, r0
 8000fd6:	4180      	sbcs	r0, r0
 8000fd8:	428d      	cmp	r5, r1
 8000fda:	4189      	sbcs	r1, r1
 8000fdc:	425b      	negs	r3, r3
 8000fde:	4264      	negs	r4, r4
 8000fe0:	431c      	orrs	r4, r3
 8000fe2:	4240      	negs	r0, r0
 8000fe4:	9b03      	ldr	r3, [sp, #12]
 8000fe6:	4249      	negs	r1, r1
 8000fe8:	4301      	orrs	r1, r0
 8000fea:	0270      	lsls	r0, r6, #9
 8000fec:	0c3f      	lsrs	r7, r7, #16
 8000fee:	4318      	orrs	r0, r3
 8000ff0:	19e4      	adds	r4, r4, r7
 8000ff2:	1e47      	subs	r7, r0, #1
 8000ff4:	41b8      	sbcs	r0, r7
 8000ff6:	1864      	adds	r4, r4, r1
 8000ff8:	4464      	add	r4, ip
 8000ffa:	0df6      	lsrs	r6, r6, #23
 8000ffc:	0261      	lsls	r1, r4, #9
 8000ffe:	4330      	orrs	r0, r6
 8001000:	0dec      	lsrs	r4, r5, #23
 8001002:	026e      	lsls	r6, r5, #9
 8001004:	430c      	orrs	r4, r1
 8001006:	4330      	orrs	r0, r6
 8001008:	01c9      	lsls	r1, r1, #7
 800100a:	d400      	bmi.n	800100e <__aeabi_dmul+0x302>
 800100c:	e0f1      	b.n	80011f2 <__aeabi_dmul+0x4e6>
 800100e:	2101      	movs	r1, #1
 8001010:	0843      	lsrs	r3, r0, #1
 8001012:	4001      	ands	r1, r0
 8001014:	430b      	orrs	r3, r1
 8001016:	07e0      	lsls	r0, r4, #31
 8001018:	4318      	orrs	r0, r3
 800101a:	0864      	lsrs	r4, r4, #1
 800101c:	4915      	ldr	r1, [pc, #84]	; (8001074 <__aeabi_dmul+0x368>)
 800101e:	9b02      	ldr	r3, [sp, #8]
 8001020:	468c      	mov	ip, r1
 8001022:	4463      	add	r3, ip
 8001024:	2b00      	cmp	r3, #0
 8001026:	dc00      	bgt.n	800102a <__aeabi_dmul+0x31e>
 8001028:	e097      	b.n	800115a <__aeabi_dmul+0x44e>
 800102a:	0741      	lsls	r1, r0, #29
 800102c:	d009      	beq.n	8001042 <__aeabi_dmul+0x336>
 800102e:	210f      	movs	r1, #15
 8001030:	4001      	ands	r1, r0
 8001032:	2904      	cmp	r1, #4
 8001034:	d005      	beq.n	8001042 <__aeabi_dmul+0x336>
 8001036:	1d01      	adds	r1, r0, #4
 8001038:	4281      	cmp	r1, r0
 800103a:	4180      	sbcs	r0, r0
 800103c:	4240      	negs	r0, r0
 800103e:	1824      	adds	r4, r4, r0
 8001040:	0008      	movs	r0, r1
 8001042:	01e1      	lsls	r1, r4, #7
 8001044:	d506      	bpl.n	8001054 <__aeabi_dmul+0x348>
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	00c9      	lsls	r1, r1, #3
 800104a:	468c      	mov	ip, r1
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <__aeabi_dmul+0x36c>)
 800104e:	401c      	ands	r4, r3
 8001050:	9b02      	ldr	r3, [sp, #8]
 8001052:	4463      	add	r3, ip
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <__aeabi_dmul+0x370>)
 8001056:	428b      	cmp	r3, r1
 8001058:	dd00      	ble.n	800105c <__aeabi_dmul+0x350>
 800105a:	e710      	b.n	8000e7e <__aeabi_dmul+0x172>
 800105c:	0761      	lsls	r1, r4, #29
 800105e:	08c5      	lsrs	r5, r0, #3
 8001060:	0264      	lsls	r4, r4, #9
 8001062:	055b      	lsls	r3, r3, #21
 8001064:	430d      	orrs	r5, r1
 8001066:	0b24      	lsrs	r4, r4, #12
 8001068:	0d5b      	lsrs	r3, r3, #21
 800106a:	e6c1      	b.n	8000df0 <__aeabi_dmul+0xe4>
 800106c:	000007ff 	.word	0x000007ff
 8001070:	fffffc01 	.word	0xfffffc01
 8001074:	000003ff 	.word	0x000003ff
 8001078:	feffffff 	.word	0xfeffffff
 800107c:	000007fe 	.word	0x000007fe
 8001080:	464b      	mov	r3, r9
 8001082:	4323      	orrs	r3, r4
 8001084:	d059      	beq.n	800113a <__aeabi_dmul+0x42e>
 8001086:	2c00      	cmp	r4, #0
 8001088:	d100      	bne.n	800108c <__aeabi_dmul+0x380>
 800108a:	e0a3      	b.n	80011d4 <__aeabi_dmul+0x4c8>
 800108c:	0020      	movs	r0, r4
 800108e:	f000 fcc9 	bl	8001a24 <__clzsi2>
 8001092:	0001      	movs	r1, r0
 8001094:	0003      	movs	r3, r0
 8001096:	390b      	subs	r1, #11
 8001098:	221d      	movs	r2, #29
 800109a:	1a52      	subs	r2, r2, r1
 800109c:	4649      	mov	r1, r9
 800109e:	0018      	movs	r0, r3
 80010a0:	40d1      	lsrs	r1, r2
 80010a2:	464a      	mov	r2, r9
 80010a4:	3808      	subs	r0, #8
 80010a6:	4082      	lsls	r2, r0
 80010a8:	4084      	lsls	r4, r0
 80010aa:	0010      	movs	r0, r2
 80010ac:	430c      	orrs	r4, r1
 80010ae:	4a74      	ldr	r2, [pc, #464]	; (8001280 <__aeabi_dmul+0x574>)
 80010b0:	1aeb      	subs	r3, r5, r3
 80010b2:	4694      	mov	ip, r2
 80010b4:	4642      	mov	r2, r8
 80010b6:	4463      	add	r3, ip
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	9b01      	ldr	r3, [sp, #4]
 80010bc:	407a      	eors	r2, r7
 80010be:	3301      	adds	r3, #1
 80010c0:	2100      	movs	r1, #0
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2e0a      	cmp	r6, #10
 80010c8:	dd00      	ble.n	80010cc <__aeabi_dmul+0x3c0>
 80010ca:	e667      	b.n	8000d9c <__aeabi_dmul+0x90>
 80010cc:	e683      	b.n	8000dd6 <__aeabi_dmul+0xca>
 80010ce:	465b      	mov	r3, fp
 80010d0:	4303      	orrs	r3, r0
 80010d2:	469a      	mov	sl, r3
 80010d4:	d02a      	beq.n	800112c <__aeabi_dmul+0x420>
 80010d6:	465b      	mov	r3, fp
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d06d      	beq.n	80011b8 <__aeabi_dmul+0x4ac>
 80010dc:	4658      	mov	r0, fp
 80010de:	f000 fca1 	bl	8001a24 <__clzsi2>
 80010e2:	0001      	movs	r1, r0
 80010e4:	0003      	movs	r3, r0
 80010e6:	390b      	subs	r1, #11
 80010e8:	221d      	movs	r2, #29
 80010ea:	1a52      	subs	r2, r2, r1
 80010ec:	0021      	movs	r1, r4
 80010ee:	0018      	movs	r0, r3
 80010f0:	465d      	mov	r5, fp
 80010f2:	40d1      	lsrs	r1, r2
 80010f4:	3808      	subs	r0, #8
 80010f6:	4085      	lsls	r5, r0
 80010f8:	000a      	movs	r2, r1
 80010fa:	4084      	lsls	r4, r0
 80010fc:	432a      	orrs	r2, r5
 80010fe:	4693      	mov	fp, r2
 8001100:	46a2      	mov	sl, r4
 8001102:	4d5f      	ldr	r5, [pc, #380]	; (8001280 <__aeabi_dmul+0x574>)
 8001104:	2600      	movs	r6, #0
 8001106:	1aed      	subs	r5, r5, r3
 8001108:	2300      	movs	r3, #0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	e625      	b.n	8000d5a <__aeabi_dmul+0x4e>
 800110e:	465b      	mov	r3, fp
 8001110:	4303      	orrs	r3, r0
 8001112:	469a      	mov	sl, r3
 8001114:	d105      	bne.n	8001122 <__aeabi_dmul+0x416>
 8001116:	2300      	movs	r3, #0
 8001118:	469b      	mov	fp, r3
 800111a:	3302      	adds	r3, #2
 800111c:	2608      	movs	r6, #8
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	e61b      	b.n	8000d5a <__aeabi_dmul+0x4e>
 8001122:	2303      	movs	r3, #3
 8001124:	4682      	mov	sl, r0
 8001126:	260c      	movs	r6, #12
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	e616      	b.n	8000d5a <__aeabi_dmul+0x4e>
 800112c:	2300      	movs	r3, #0
 800112e:	469b      	mov	fp, r3
 8001130:	3301      	adds	r3, #1
 8001132:	2604      	movs	r6, #4
 8001134:	2500      	movs	r5, #0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e60f      	b.n	8000d5a <__aeabi_dmul+0x4e>
 800113a:	4642      	mov	r2, r8
 800113c:	3301      	adds	r3, #1
 800113e:	9501      	str	r5, [sp, #4]
 8001140:	431e      	orrs	r6, r3
 8001142:	9b01      	ldr	r3, [sp, #4]
 8001144:	407a      	eors	r2, r7
 8001146:	3301      	adds	r3, #1
 8001148:	2400      	movs	r4, #0
 800114a:	2000      	movs	r0, #0
 800114c:	2101      	movs	r1, #1
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2e0a      	cmp	r6, #10
 8001154:	dd00      	ble.n	8001158 <__aeabi_dmul+0x44c>
 8001156:	e621      	b.n	8000d9c <__aeabi_dmul+0x90>
 8001158:	e63d      	b.n	8000dd6 <__aeabi_dmul+0xca>
 800115a:	2101      	movs	r1, #1
 800115c:	1ac9      	subs	r1, r1, r3
 800115e:	2938      	cmp	r1, #56	; 0x38
 8001160:	dd00      	ble.n	8001164 <__aeabi_dmul+0x458>
 8001162:	e642      	b.n	8000dea <__aeabi_dmul+0xde>
 8001164:	291f      	cmp	r1, #31
 8001166:	dd47      	ble.n	80011f8 <__aeabi_dmul+0x4ec>
 8001168:	261f      	movs	r6, #31
 800116a:	0025      	movs	r5, r4
 800116c:	4276      	negs	r6, r6
 800116e:	1af3      	subs	r3, r6, r3
 8001170:	40dd      	lsrs	r5, r3
 8001172:	002b      	movs	r3, r5
 8001174:	2920      	cmp	r1, #32
 8001176:	d005      	beq.n	8001184 <__aeabi_dmul+0x478>
 8001178:	4942      	ldr	r1, [pc, #264]	; (8001284 <__aeabi_dmul+0x578>)
 800117a:	9d02      	ldr	r5, [sp, #8]
 800117c:	468c      	mov	ip, r1
 800117e:	4465      	add	r5, ip
 8001180:	40ac      	lsls	r4, r5
 8001182:	4320      	orrs	r0, r4
 8001184:	1e41      	subs	r1, r0, #1
 8001186:	4188      	sbcs	r0, r1
 8001188:	4318      	orrs	r0, r3
 800118a:	2307      	movs	r3, #7
 800118c:	001d      	movs	r5, r3
 800118e:	2400      	movs	r4, #0
 8001190:	4005      	ands	r5, r0
 8001192:	4203      	tst	r3, r0
 8001194:	d04a      	beq.n	800122c <__aeabi_dmul+0x520>
 8001196:	230f      	movs	r3, #15
 8001198:	2400      	movs	r4, #0
 800119a:	4003      	ands	r3, r0
 800119c:	2b04      	cmp	r3, #4
 800119e:	d042      	beq.n	8001226 <__aeabi_dmul+0x51a>
 80011a0:	1d03      	adds	r3, r0, #4
 80011a2:	4283      	cmp	r3, r0
 80011a4:	4180      	sbcs	r0, r0
 80011a6:	4240      	negs	r0, r0
 80011a8:	1824      	adds	r4, r4, r0
 80011aa:	0018      	movs	r0, r3
 80011ac:	0223      	lsls	r3, r4, #8
 80011ae:	d53a      	bpl.n	8001226 <__aeabi_dmul+0x51a>
 80011b0:	2301      	movs	r3, #1
 80011b2:	2400      	movs	r4, #0
 80011b4:	2500      	movs	r5, #0
 80011b6:	e61b      	b.n	8000df0 <__aeabi_dmul+0xe4>
 80011b8:	f000 fc34 	bl	8001a24 <__clzsi2>
 80011bc:	0001      	movs	r1, r0
 80011be:	0003      	movs	r3, r0
 80011c0:	3115      	adds	r1, #21
 80011c2:	3320      	adds	r3, #32
 80011c4:	291c      	cmp	r1, #28
 80011c6:	dd8f      	ble.n	80010e8 <__aeabi_dmul+0x3dc>
 80011c8:	3808      	subs	r0, #8
 80011ca:	2200      	movs	r2, #0
 80011cc:	4084      	lsls	r4, r0
 80011ce:	4692      	mov	sl, r2
 80011d0:	46a3      	mov	fp, r4
 80011d2:	e796      	b.n	8001102 <__aeabi_dmul+0x3f6>
 80011d4:	f000 fc26 	bl	8001a24 <__clzsi2>
 80011d8:	0001      	movs	r1, r0
 80011da:	0003      	movs	r3, r0
 80011dc:	3115      	adds	r1, #21
 80011de:	3320      	adds	r3, #32
 80011e0:	291c      	cmp	r1, #28
 80011e2:	dc00      	bgt.n	80011e6 <__aeabi_dmul+0x4da>
 80011e4:	e758      	b.n	8001098 <__aeabi_dmul+0x38c>
 80011e6:	0002      	movs	r2, r0
 80011e8:	464c      	mov	r4, r9
 80011ea:	3a08      	subs	r2, #8
 80011ec:	2000      	movs	r0, #0
 80011ee:	4094      	lsls	r4, r2
 80011f0:	e75d      	b.n	80010ae <__aeabi_dmul+0x3a2>
 80011f2:	9b01      	ldr	r3, [sp, #4]
 80011f4:	9302      	str	r3, [sp, #8]
 80011f6:	e711      	b.n	800101c <__aeabi_dmul+0x310>
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <__aeabi_dmul+0x57c>)
 80011fa:	0026      	movs	r6, r4
 80011fc:	469c      	mov	ip, r3
 80011fe:	0003      	movs	r3, r0
 8001200:	9d02      	ldr	r5, [sp, #8]
 8001202:	40cb      	lsrs	r3, r1
 8001204:	4465      	add	r5, ip
 8001206:	40ae      	lsls	r6, r5
 8001208:	431e      	orrs	r6, r3
 800120a:	0003      	movs	r3, r0
 800120c:	40ab      	lsls	r3, r5
 800120e:	1e58      	subs	r0, r3, #1
 8001210:	4183      	sbcs	r3, r0
 8001212:	0030      	movs	r0, r6
 8001214:	4318      	orrs	r0, r3
 8001216:	40cc      	lsrs	r4, r1
 8001218:	0743      	lsls	r3, r0, #29
 800121a:	d0c7      	beq.n	80011ac <__aeabi_dmul+0x4a0>
 800121c:	230f      	movs	r3, #15
 800121e:	4003      	ands	r3, r0
 8001220:	2b04      	cmp	r3, #4
 8001222:	d1bd      	bne.n	80011a0 <__aeabi_dmul+0x494>
 8001224:	e7c2      	b.n	80011ac <__aeabi_dmul+0x4a0>
 8001226:	0765      	lsls	r5, r4, #29
 8001228:	0264      	lsls	r4, r4, #9
 800122a:	0b24      	lsrs	r4, r4, #12
 800122c:	08c0      	lsrs	r0, r0, #3
 800122e:	2300      	movs	r3, #0
 8001230:	4305      	orrs	r5, r0
 8001232:	e5dd      	b.n	8000df0 <__aeabi_dmul+0xe4>
 8001234:	2500      	movs	r5, #0
 8001236:	2302      	movs	r3, #2
 8001238:	2e0f      	cmp	r6, #15
 800123a:	d10c      	bne.n	8001256 <__aeabi_dmul+0x54a>
 800123c:	2480      	movs	r4, #128	; 0x80
 800123e:	465b      	mov	r3, fp
 8001240:	0324      	lsls	r4, r4, #12
 8001242:	4223      	tst	r3, r4
 8001244:	d00e      	beq.n	8001264 <__aeabi_dmul+0x558>
 8001246:	4221      	tst	r1, r4
 8001248:	d10c      	bne.n	8001264 <__aeabi_dmul+0x558>
 800124a:	430c      	orrs	r4, r1
 800124c:	0324      	lsls	r4, r4, #12
 800124e:	003a      	movs	r2, r7
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <__aeabi_dmul+0x580>)
 8001252:	0b24      	lsrs	r4, r4, #12
 8001254:	e5cc      	b.n	8000df0 <__aeabi_dmul+0xe4>
 8001256:	2e0b      	cmp	r6, #11
 8001258:	d000      	beq.n	800125c <__aeabi_dmul+0x550>
 800125a:	e5a2      	b.n	8000da2 <__aeabi_dmul+0x96>
 800125c:	468b      	mov	fp, r1
 800125e:	46aa      	mov	sl, r5
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	e5f7      	b.n	8000e54 <__aeabi_dmul+0x148>
 8001264:	2480      	movs	r4, #128	; 0x80
 8001266:	465b      	mov	r3, fp
 8001268:	0324      	lsls	r4, r4, #12
 800126a:	431c      	orrs	r4, r3
 800126c:	0324      	lsls	r4, r4, #12
 800126e:	4642      	mov	r2, r8
 8001270:	4655      	mov	r5, sl
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <__aeabi_dmul+0x580>)
 8001274:	0b24      	lsrs	r4, r4, #12
 8001276:	e5bb      	b.n	8000df0 <__aeabi_dmul+0xe4>
 8001278:	464d      	mov	r5, r9
 800127a:	0021      	movs	r1, r4
 800127c:	2303      	movs	r3, #3
 800127e:	e7db      	b.n	8001238 <__aeabi_dmul+0x52c>
 8001280:	fffffc0d 	.word	0xfffffc0d
 8001284:	0000043e 	.word	0x0000043e
 8001288:	0000041e 	.word	0x0000041e
 800128c:	000007ff 	.word	0x000007ff

08001290 <__aeabi_dsub>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	4657      	mov	r7, sl
 8001294:	464e      	mov	r6, r9
 8001296:	4645      	mov	r5, r8
 8001298:	46de      	mov	lr, fp
 800129a:	b5e0      	push	{r5, r6, r7, lr}
 800129c:	000d      	movs	r5, r1
 800129e:	0004      	movs	r4, r0
 80012a0:	0019      	movs	r1, r3
 80012a2:	0010      	movs	r0, r2
 80012a4:	032b      	lsls	r3, r5, #12
 80012a6:	0a5b      	lsrs	r3, r3, #9
 80012a8:	0f62      	lsrs	r2, r4, #29
 80012aa:	431a      	orrs	r2, r3
 80012ac:	00e3      	lsls	r3, r4, #3
 80012ae:	030c      	lsls	r4, r1, #12
 80012b0:	0a64      	lsrs	r4, r4, #9
 80012b2:	0f47      	lsrs	r7, r0, #29
 80012b4:	4327      	orrs	r7, r4
 80012b6:	4cd0      	ldr	r4, [pc, #832]	; (80015f8 <__aeabi_dsub+0x368>)
 80012b8:	006e      	lsls	r6, r5, #1
 80012ba:	4691      	mov	r9, r2
 80012bc:	b083      	sub	sp, #12
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	00c0      	lsls	r0, r0, #3
 80012c2:	4698      	mov	r8, r3
 80012c4:	46a2      	mov	sl, r4
 80012c6:	0d76      	lsrs	r6, r6, #21
 80012c8:	0fed      	lsrs	r5, r5, #31
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	9001      	str	r0, [sp, #4]
 80012d0:	42a2      	cmp	r2, r4
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dsub+0x46>
 80012d4:	e0b9      	b.n	800144a <__aeabi_dsub+0x1ba>
 80012d6:	2401      	movs	r4, #1
 80012d8:	4061      	eors	r1, r4
 80012da:	468b      	mov	fp, r1
 80012dc:	428d      	cmp	r5, r1
 80012de:	d100      	bne.n	80012e2 <__aeabi_dsub+0x52>
 80012e0:	e08d      	b.n	80013fe <__aeabi_dsub+0x16e>
 80012e2:	1ab4      	subs	r4, r6, r2
 80012e4:	46a4      	mov	ip, r4
 80012e6:	2c00      	cmp	r4, #0
 80012e8:	dc00      	bgt.n	80012ec <__aeabi_dsub+0x5c>
 80012ea:	e0b7      	b.n	800145c <__aeabi_dsub+0x1cc>
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dsub+0x62>
 80012f0:	e0cb      	b.n	800148a <__aeabi_dsub+0x1fa>
 80012f2:	4ac1      	ldr	r2, [pc, #772]	; (80015f8 <__aeabi_dsub+0x368>)
 80012f4:	4296      	cmp	r6, r2
 80012f6:	d100      	bne.n	80012fa <__aeabi_dsub+0x6a>
 80012f8:	e186      	b.n	8001608 <__aeabi_dsub+0x378>
 80012fa:	2280      	movs	r2, #128	; 0x80
 80012fc:	0412      	lsls	r2, r2, #16
 80012fe:	4317      	orrs	r7, r2
 8001300:	4662      	mov	r2, ip
 8001302:	2a38      	cmp	r2, #56	; 0x38
 8001304:	dd00      	ble.n	8001308 <__aeabi_dsub+0x78>
 8001306:	e1a4      	b.n	8001652 <__aeabi_dsub+0x3c2>
 8001308:	2a1f      	cmp	r2, #31
 800130a:	dd00      	ble.n	800130e <__aeabi_dsub+0x7e>
 800130c:	e21d      	b.n	800174a <__aeabi_dsub+0x4ba>
 800130e:	4661      	mov	r1, ip
 8001310:	2220      	movs	r2, #32
 8001312:	003c      	movs	r4, r7
 8001314:	1a52      	subs	r2, r2, r1
 8001316:	0001      	movs	r1, r0
 8001318:	4090      	lsls	r0, r2
 800131a:	4094      	lsls	r4, r2
 800131c:	1e42      	subs	r2, r0, #1
 800131e:	4190      	sbcs	r0, r2
 8001320:	4662      	mov	r2, ip
 8001322:	46a0      	mov	r8, r4
 8001324:	4664      	mov	r4, ip
 8001326:	40d7      	lsrs	r7, r2
 8001328:	464a      	mov	r2, r9
 800132a:	40e1      	lsrs	r1, r4
 800132c:	4644      	mov	r4, r8
 800132e:	1bd2      	subs	r2, r2, r7
 8001330:	4691      	mov	r9, r2
 8001332:	430c      	orrs	r4, r1
 8001334:	4304      	orrs	r4, r0
 8001336:	1b1c      	subs	r4, r3, r4
 8001338:	42a3      	cmp	r3, r4
 800133a:	4192      	sbcs	r2, r2
 800133c:	464b      	mov	r3, r9
 800133e:	4252      	negs	r2, r2
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	469a      	mov	sl, r3
 8001344:	4653      	mov	r3, sl
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	d400      	bmi.n	800134c <__aeabi_dsub+0xbc>
 800134a:	e12b      	b.n	80015a4 <__aeabi_dsub+0x314>
 800134c:	4653      	mov	r3, sl
 800134e:	025a      	lsls	r2, r3, #9
 8001350:	0a53      	lsrs	r3, r2, #9
 8001352:	469a      	mov	sl, r3
 8001354:	4653      	mov	r3, sl
 8001356:	2b00      	cmp	r3, #0
 8001358:	d100      	bne.n	800135c <__aeabi_dsub+0xcc>
 800135a:	e166      	b.n	800162a <__aeabi_dsub+0x39a>
 800135c:	4650      	mov	r0, sl
 800135e:	f000 fb61 	bl	8001a24 <__clzsi2>
 8001362:	0003      	movs	r3, r0
 8001364:	3b08      	subs	r3, #8
 8001366:	2220      	movs	r2, #32
 8001368:	0020      	movs	r0, r4
 800136a:	1ad2      	subs	r2, r2, r3
 800136c:	4651      	mov	r1, sl
 800136e:	40d0      	lsrs	r0, r2
 8001370:	4099      	lsls	r1, r3
 8001372:	0002      	movs	r2, r0
 8001374:	409c      	lsls	r4, r3
 8001376:	430a      	orrs	r2, r1
 8001378:	429e      	cmp	r6, r3
 800137a:	dd00      	ble.n	800137e <__aeabi_dsub+0xee>
 800137c:	e164      	b.n	8001648 <__aeabi_dsub+0x3b8>
 800137e:	1b9b      	subs	r3, r3, r6
 8001380:	1c59      	adds	r1, r3, #1
 8001382:	291f      	cmp	r1, #31
 8001384:	dd00      	ble.n	8001388 <__aeabi_dsub+0xf8>
 8001386:	e0fe      	b.n	8001586 <__aeabi_dsub+0x2f6>
 8001388:	2320      	movs	r3, #32
 800138a:	0010      	movs	r0, r2
 800138c:	0026      	movs	r6, r4
 800138e:	1a5b      	subs	r3, r3, r1
 8001390:	409c      	lsls	r4, r3
 8001392:	4098      	lsls	r0, r3
 8001394:	40ce      	lsrs	r6, r1
 8001396:	40ca      	lsrs	r2, r1
 8001398:	1e63      	subs	r3, r4, #1
 800139a:	419c      	sbcs	r4, r3
 800139c:	4330      	orrs	r0, r6
 800139e:	4692      	mov	sl, r2
 80013a0:	2600      	movs	r6, #0
 80013a2:	4304      	orrs	r4, r0
 80013a4:	0763      	lsls	r3, r4, #29
 80013a6:	d009      	beq.n	80013bc <__aeabi_dsub+0x12c>
 80013a8:	230f      	movs	r3, #15
 80013aa:	4023      	ands	r3, r4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d005      	beq.n	80013bc <__aeabi_dsub+0x12c>
 80013b0:	1d23      	adds	r3, r4, #4
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	41a4      	sbcs	r4, r4
 80013b6:	4264      	negs	r4, r4
 80013b8:	44a2      	add	sl, r4
 80013ba:	001c      	movs	r4, r3
 80013bc:	4653      	mov	r3, sl
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	d400      	bmi.n	80013c4 <__aeabi_dsub+0x134>
 80013c2:	e0f2      	b.n	80015aa <__aeabi_dsub+0x31a>
 80013c4:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <__aeabi_dsub+0x368>)
 80013c6:	3601      	adds	r6, #1
 80013c8:	429e      	cmp	r6, r3
 80013ca:	d100      	bne.n	80013ce <__aeabi_dsub+0x13e>
 80013cc:	e10f      	b.n	80015ee <__aeabi_dsub+0x35e>
 80013ce:	4653      	mov	r3, sl
 80013d0:	498a      	ldr	r1, [pc, #552]	; (80015fc <__aeabi_dsub+0x36c>)
 80013d2:	08e4      	lsrs	r4, r4, #3
 80013d4:	400b      	ands	r3, r1
 80013d6:	0019      	movs	r1, r3
 80013d8:	075b      	lsls	r3, r3, #29
 80013da:	4323      	orrs	r3, r4
 80013dc:	0572      	lsls	r2, r6, #21
 80013de:	024c      	lsls	r4, r1, #9
 80013e0:	0b24      	lsrs	r4, r4, #12
 80013e2:	0d52      	lsrs	r2, r2, #21
 80013e4:	0512      	lsls	r2, r2, #20
 80013e6:	4322      	orrs	r2, r4
 80013e8:	07ed      	lsls	r5, r5, #31
 80013ea:	432a      	orrs	r2, r5
 80013ec:	0018      	movs	r0, r3
 80013ee:	0011      	movs	r1, r2
 80013f0:	b003      	add	sp, #12
 80013f2:	bcf0      	pop	{r4, r5, r6, r7}
 80013f4:	46bb      	mov	fp, r7
 80013f6:	46b2      	mov	sl, r6
 80013f8:	46a9      	mov	r9, r5
 80013fa:	46a0      	mov	r8, r4
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	1ab4      	subs	r4, r6, r2
 8001400:	46a4      	mov	ip, r4
 8001402:	2c00      	cmp	r4, #0
 8001404:	dd59      	ble.n	80014ba <__aeabi_dsub+0x22a>
 8001406:	2a00      	cmp	r2, #0
 8001408:	d100      	bne.n	800140c <__aeabi_dsub+0x17c>
 800140a:	e0b0      	b.n	800156e <__aeabi_dsub+0x2de>
 800140c:	4556      	cmp	r6, sl
 800140e:	d100      	bne.n	8001412 <__aeabi_dsub+0x182>
 8001410:	e0fa      	b.n	8001608 <__aeabi_dsub+0x378>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	4317      	orrs	r7, r2
 8001418:	4662      	mov	r2, ip
 800141a:	2a38      	cmp	r2, #56	; 0x38
 800141c:	dd00      	ble.n	8001420 <__aeabi_dsub+0x190>
 800141e:	e0d4      	b.n	80015ca <__aeabi_dsub+0x33a>
 8001420:	2a1f      	cmp	r2, #31
 8001422:	dc00      	bgt.n	8001426 <__aeabi_dsub+0x196>
 8001424:	e1c0      	b.n	80017a8 <__aeabi_dsub+0x518>
 8001426:	0039      	movs	r1, r7
 8001428:	3a20      	subs	r2, #32
 800142a:	40d1      	lsrs	r1, r2
 800142c:	4662      	mov	r2, ip
 800142e:	2a20      	cmp	r2, #32
 8001430:	d006      	beq.n	8001440 <__aeabi_dsub+0x1b0>
 8001432:	4664      	mov	r4, ip
 8001434:	2240      	movs	r2, #64	; 0x40
 8001436:	1b12      	subs	r2, r2, r4
 8001438:	003c      	movs	r4, r7
 800143a:	4094      	lsls	r4, r2
 800143c:	4304      	orrs	r4, r0
 800143e:	9401      	str	r4, [sp, #4]
 8001440:	9c01      	ldr	r4, [sp, #4]
 8001442:	1e62      	subs	r2, r4, #1
 8001444:	4194      	sbcs	r4, r2
 8001446:	430c      	orrs	r4, r1
 8001448:	e0c3      	b.n	80015d2 <__aeabi_dsub+0x342>
 800144a:	003c      	movs	r4, r7
 800144c:	4304      	orrs	r4, r0
 800144e:	d02b      	beq.n	80014a8 <__aeabi_dsub+0x218>
 8001450:	468b      	mov	fp, r1
 8001452:	428d      	cmp	r5, r1
 8001454:	d02e      	beq.n	80014b4 <__aeabi_dsub+0x224>
 8001456:	4c6a      	ldr	r4, [pc, #424]	; (8001600 <__aeabi_dsub+0x370>)
 8001458:	46a4      	mov	ip, r4
 800145a:	44b4      	add	ip, r6
 800145c:	4664      	mov	r4, ip
 800145e:	2c00      	cmp	r4, #0
 8001460:	d05f      	beq.n	8001522 <__aeabi_dsub+0x292>
 8001462:	1b94      	subs	r4, r2, r6
 8001464:	46a4      	mov	ip, r4
 8001466:	2e00      	cmp	r6, #0
 8001468:	d000      	beq.n	800146c <__aeabi_dsub+0x1dc>
 800146a:	e120      	b.n	80016ae <__aeabi_dsub+0x41e>
 800146c:	464c      	mov	r4, r9
 800146e:	431c      	orrs	r4, r3
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x1e4>
 8001472:	e1c7      	b.n	8001804 <__aeabi_dsub+0x574>
 8001474:	4661      	mov	r1, ip
 8001476:	1e4c      	subs	r4, r1, #1
 8001478:	2901      	cmp	r1, #1
 800147a:	d100      	bne.n	800147e <__aeabi_dsub+0x1ee>
 800147c:	e223      	b.n	80018c6 <__aeabi_dsub+0x636>
 800147e:	4d5e      	ldr	r5, [pc, #376]	; (80015f8 <__aeabi_dsub+0x368>)
 8001480:	45ac      	cmp	ip, r5
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x1f6>
 8001484:	e1d8      	b.n	8001838 <__aeabi_dsub+0x5a8>
 8001486:	46a4      	mov	ip, r4
 8001488:	e11a      	b.n	80016c0 <__aeabi_dsub+0x430>
 800148a:	003a      	movs	r2, r7
 800148c:	4302      	orrs	r2, r0
 800148e:	d100      	bne.n	8001492 <__aeabi_dsub+0x202>
 8001490:	e0e4      	b.n	800165c <__aeabi_dsub+0x3cc>
 8001492:	0022      	movs	r2, r4
 8001494:	3a01      	subs	r2, #1
 8001496:	2c01      	cmp	r4, #1
 8001498:	d100      	bne.n	800149c <__aeabi_dsub+0x20c>
 800149a:	e1c3      	b.n	8001824 <__aeabi_dsub+0x594>
 800149c:	4956      	ldr	r1, [pc, #344]	; (80015f8 <__aeabi_dsub+0x368>)
 800149e:	428c      	cmp	r4, r1
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dsub+0x214>
 80014a2:	e0b1      	b.n	8001608 <__aeabi_dsub+0x378>
 80014a4:	4694      	mov	ip, r2
 80014a6:	e72b      	b.n	8001300 <__aeabi_dsub+0x70>
 80014a8:	2401      	movs	r4, #1
 80014aa:	4061      	eors	r1, r4
 80014ac:	468b      	mov	fp, r1
 80014ae:	428d      	cmp	r5, r1
 80014b0:	d000      	beq.n	80014b4 <__aeabi_dsub+0x224>
 80014b2:	e716      	b.n	80012e2 <__aeabi_dsub+0x52>
 80014b4:	4952      	ldr	r1, [pc, #328]	; (8001600 <__aeabi_dsub+0x370>)
 80014b6:	468c      	mov	ip, r1
 80014b8:	44b4      	add	ip, r6
 80014ba:	4664      	mov	r4, ip
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_dsub+0x232>
 80014c0:	e0d3      	b.n	800166a <__aeabi_dsub+0x3da>
 80014c2:	1b91      	subs	r1, r2, r6
 80014c4:	468c      	mov	ip, r1
 80014c6:	2e00      	cmp	r6, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dsub+0x23c>
 80014ca:	e15e      	b.n	800178a <__aeabi_dsub+0x4fa>
 80014cc:	494a      	ldr	r1, [pc, #296]	; (80015f8 <__aeabi_dsub+0x368>)
 80014ce:	428a      	cmp	r2, r1
 80014d0:	d100      	bne.n	80014d4 <__aeabi_dsub+0x244>
 80014d2:	e1be      	b.n	8001852 <__aeabi_dsub+0x5c2>
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	464c      	mov	r4, r9
 80014d8:	0409      	lsls	r1, r1, #16
 80014da:	430c      	orrs	r4, r1
 80014dc:	46a1      	mov	r9, r4
 80014de:	4661      	mov	r1, ip
 80014e0:	2938      	cmp	r1, #56	; 0x38
 80014e2:	dd00      	ble.n	80014e6 <__aeabi_dsub+0x256>
 80014e4:	e1ba      	b.n	800185c <__aeabi_dsub+0x5cc>
 80014e6:	291f      	cmp	r1, #31
 80014e8:	dd00      	ble.n	80014ec <__aeabi_dsub+0x25c>
 80014ea:	e227      	b.n	800193c <__aeabi_dsub+0x6ac>
 80014ec:	2420      	movs	r4, #32
 80014ee:	1a64      	subs	r4, r4, r1
 80014f0:	4649      	mov	r1, r9
 80014f2:	40a1      	lsls	r1, r4
 80014f4:	001e      	movs	r6, r3
 80014f6:	4688      	mov	r8, r1
 80014f8:	4661      	mov	r1, ip
 80014fa:	40a3      	lsls	r3, r4
 80014fc:	40ce      	lsrs	r6, r1
 80014fe:	4641      	mov	r1, r8
 8001500:	1e5c      	subs	r4, r3, #1
 8001502:	41a3      	sbcs	r3, r4
 8001504:	4331      	orrs	r1, r6
 8001506:	4319      	orrs	r1, r3
 8001508:	000c      	movs	r4, r1
 800150a:	4663      	mov	r3, ip
 800150c:	4649      	mov	r1, r9
 800150e:	40d9      	lsrs	r1, r3
 8001510:	187f      	adds	r7, r7, r1
 8001512:	1824      	adds	r4, r4, r0
 8001514:	4284      	cmp	r4, r0
 8001516:	419b      	sbcs	r3, r3
 8001518:	425b      	negs	r3, r3
 800151a:	469a      	mov	sl, r3
 800151c:	0016      	movs	r6, r2
 800151e:	44ba      	add	sl, r7
 8001520:	e05d      	b.n	80015de <__aeabi_dsub+0x34e>
 8001522:	4c38      	ldr	r4, [pc, #224]	; (8001604 <__aeabi_dsub+0x374>)
 8001524:	1c72      	adds	r2, r6, #1
 8001526:	4222      	tst	r2, r4
 8001528:	d000      	beq.n	800152c <__aeabi_dsub+0x29c>
 800152a:	e0df      	b.n	80016ec <__aeabi_dsub+0x45c>
 800152c:	464a      	mov	r2, r9
 800152e:	431a      	orrs	r2, r3
 8001530:	2e00      	cmp	r6, #0
 8001532:	d000      	beq.n	8001536 <__aeabi_dsub+0x2a6>
 8001534:	e15c      	b.n	80017f0 <__aeabi_dsub+0x560>
 8001536:	2a00      	cmp	r2, #0
 8001538:	d100      	bne.n	800153c <__aeabi_dsub+0x2ac>
 800153a:	e1cf      	b.n	80018dc <__aeabi_dsub+0x64c>
 800153c:	003a      	movs	r2, r7
 800153e:	4302      	orrs	r2, r0
 8001540:	d100      	bne.n	8001544 <__aeabi_dsub+0x2b4>
 8001542:	e17f      	b.n	8001844 <__aeabi_dsub+0x5b4>
 8001544:	1a1c      	subs	r4, r3, r0
 8001546:	464a      	mov	r2, r9
 8001548:	42a3      	cmp	r3, r4
 800154a:	4189      	sbcs	r1, r1
 800154c:	1bd2      	subs	r2, r2, r7
 800154e:	4249      	negs	r1, r1
 8001550:	1a52      	subs	r2, r2, r1
 8001552:	4692      	mov	sl, r2
 8001554:	0212      	lsls	r2, r2, #8
 8001556:	d400      	bmi.n	800155a <__aeabi_dsub+0x2ca>
 8001558:	e20a      	b.n	8001970 <__aeabi_dsub+0x6e0>
 800155a:	1ac4      	subs	r4, r0, r3
 800155c:	42a0      	cmp	r0, r4
 800155e:	4180      	sbcs	r0, r0
 8001560:	464b      	mov	r3, r9
 8001562:	4240      	negs	r0, r0
 8001564:	1aff      	subs	r7, r7, r3
 8001566:	1a3b      	subs	r3, r7, r0
 8001568:	469a      	mov	sl, r3
 800156a:	465d      	mov	r5, fp
 800156c:	e71a      	b.n	80013a4 <__aeabi_dsub+0x114>
 800156e:	003a      	movs	r2, r7
 8001570:	4302      	orrs	r2, r0
 8001572:	d073      	beq.n	800165c <__aeabi_dsub+0x3cc>
 8001574:	0022      	movs	r2, r4
 8001576:	3a01      	subs	r2, #1
 8001578:	2c01      	cmp	r4, #1
 800157a:	d100      	bne.n	800157e <__aeabi_dsub+0x2ee>
 800157c:	e0cb      	b.n	8001716 <__aeabi_dsub+0x486>
 800157e:	4554      	cmp	r4, sl
 8001580:	d042      	beq.n	8001608 <__aeabi_dsub+0x378>
 8001582:	4694      	mov	ip, r2
 8001584:	e748      	b.n	8001418 <__aeabi_dsub+0x188>
 8001586:	0010      	movs	r0, r2
 8001588:	3b1f      	subs	r3, #31
 800158a:	40d8      	lsrs	r0, r3
 800158c:	2920      	cmp	r1, #32
 800158e:	d003      	beq.n	8001598 <__aeabi_dsub+0x308>
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	1a5b      	subs	r3, r3, r1
 8001594:	409a      	lsls	r2, r3
 8001596:	4314      	orrs	r4, r2
 8001598:	1e63      	subs	r3, r4, #1
 800159a:	419c      	sbcs	r4, r3
 800159c:	2300      	movs	r3, #0
 800159e:	2600      	movs	r6, #0
 80015a0:	469a      	mov	sl, r3
 80015a2:	4304      	orrs	r4, r0
 80015a4:	0763      	lsls	r3, r4, #29
 80015a6:	d000      	beq.n	80015aa <__aeabi_dsub+0x31a>
 80015a8:	e6fe      	b.n	80013a8 <__aeabi_dsub+0x118>
 80015aa:	4652      	mov	r2, sl
 80015ac:	08e3      	lsrs	r3, r4, #3
 80015ae:	0752      	lsls	r2, r2, #29
 80015b0:	4313      	orrs	r3, r2
 80015b2:	4652      	mov	r2, sl
 80015b4:	46b4      	mov	ip, r6
 80015b6:	08d2      	lsrs	r2, r2, #3
 80015b8:	490f      	ldr	r1, [pc, #60]	; (80015f8 <__aeabi_dsub+0x368>)
 80015ba:	458c      	cmp	ip, r1
 80015bc:	d02a      	beq.n	8001614 <__aeabi_dsub+0x384>
 80015be:	0312      	lsls	r2, r2, #12
 80015c0:	0b14      	lsrs	r4, r2, #12
 80015c2:	4662      	mov	r2, ip
 80015c4:	0552      	lsls	r2, r2, #21
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	e70c      	b.n	80013e4 <__aeabi_dsub+0x154>
 80015ca:	003c      	movs	r4, r7
 80015cc:	4304      	orrs	r4, r0
 80015ce:	1e62      	subs	r2, r4, #1
 80015d0:	4194      	sbcs	r4, r2
 80015d2:	18e4      	adds	r4, r4, r3
 80015d4:	429c      	cmp	r4, r3
 80015d6:	4192      	sbcs	r2, r2
 80015d8:	4252      	negs	r2, r2
 80015da:	444a      	add	r2, r9
 80015dc:	4692      	mov	sl, r2
 80015de:	4653      	mov	r3, sl
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	d5df      	bpl.n	80015a4 <__aeabi_dsub+0x314>
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__aeabi_dsub+0x368>)
 80015e6:	3601      	adds	r6, #1
 80015e8:	429e      	cmp	r6, r3
 80015ea:	d000      	beq.n	80015ee <__aeabi_dsub+0x35e>
 80015ec:	e0a0      	b.n	8001730 <__aeabi_dsub+0x4a0>
 80015ee:	0032      	movs	r2, r6
 80015f0:	2400      	movs	r4, #0
 80015f2:	2300      	movs	r3, #0
 80015f4:	e6f6      	b.n	80013e4 <__aeabi_dsub+0x154>
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	000007ff 	.word	0x000007ff
 80015fc:	ff7fffff 	.word	0xff7fffff
 8001600:	fffff801 	.word	0xfffff801
 8001604:	000007fe 	.word	0x000007fe
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	464a      	mov	r2, r9
 800160c:	0752      	lsls	r2, r2, #29
 800160e:	4313      	orrs	r3, r2
 8001610:	464a      	mov	r2, r9
 8001612:	08d2      	lsrs	r2, r2, #3
 8001614:	0019      	movs	r1, r3
 8001616:	4311      	orrs	r1, r2
 8001618:	d100      	bne.n	800161c <__aeabi_dsub+0x38c>
 800161a:	e1b5      	b.n	8001988 <__aeabi_dsub+0x6f8>
 800161c:	2480      	movs	r4, #128	; 0x80
 800161e:	0324      	lsls	r4, r4, #12
 8001620:	4314      	orrs	r4, r2
 8001622:	0324      	lsls	r4, r4, #12
 8001624:	4ad5      	ldr	r2, [pc, #852]	; (800197c <__aeabi_dsub+0x6ec>)
 8001626:	0b24      	lsrs	r4, r4, #12
 8001628:	e6dc      	b.n	80013e4 <__aeabi_dsub+0x154>
 800162a:	0020      	movs	r0, r4
 800162c:	f000 f9fa 	bl	8001a24 <__clzsi2>
 8001630:	0003      	movs	r3, r0
 8001632:	3318      	adds	r3, #24
 8001634:	2b1f      	cmp	r3, #31
 8001636:	dc00      	bgt.n	800163a <__aeabi_dsub+0x3aa>
 8001638:	e695      	b.n	8001366 <__aeabi_dsub+0xd6>
 800163a:	0022      	movs	r2, r4
 800163c:	3808      	subs	r0, #8
 800163e:	4082      	lsls	r2, r0
 8001640:	2400      	movs	r4, #0
 8001642:	429e      	cmp	r6, r3
 8001644:	dc00      	bgt.n	8001648 <__aeabi_dsub+0x3b8>
 8001646:	e69a      	b.n	800137e <__aeabi_dsub+0xee>
 8001648:	1af6      	subs	r6, r6, r3
 800164a:	4bcd      	ldr	r3, [pc, #820]	; (8001980 <__aeabi_dsub+0x6f0>)
 800164c:	401a      	ands	r2, r3
 800164e:	4692      	mov	sl, r2
 8001650:	e6a8      	b.n	80013a4 <__aeabi_dsub+0x114>
 8001652:	003c      	movs	r4, r7
 8001654:	4304      	orrs	r4, r0
 8001656:	1e62      	subs	r2, r4, #1
 8001658:	4194      	sbcs	r4, r2
 800165a:	e66c      	b.n	8001336 <__aeabi_dsub+0xa6>
 800165c:	464a      	mov	r2, r9
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	0752      	lsls	r2, r2, #29
 8001662:	4313      	orrs	r3, r2
 8001664:	464a      	mov	r2, r9
 8001666:	08d2      	lsrs	r2, r2, #3
 8001668:	e7a6      	b.n	80015b8 <__aeabi_dsub+0x328>
 800166a:	4cc6      	ldr	r4, [pc, #792]	; (8001984 <__aeabi_dsub+0x6f4>)
 800166c:	1c72      	adds	r2, r6, #1
 800166e:	4222      	tst	r2, r4
 8001670:	d000      	beq.n	8001674 <__aeabi_dsub+0x3e4>
 8001672:	e0ac      	b.n	80017ce <__aeabi_dsub+0x53e>
 8001674:	464a      	mov	r2, r9
 8001676:	431a      	orrs	r2, r3
 8001678:	2e00      	cmp	r6, #0
 800167a:	d000      	beq.n	800167e <__aeabi_dsub+0x3ee>
 800167c:	e105      	b.n	800188a <__aeabi_dsub+0x5fa>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d100      	bne.n	8001684 <__aeabi_dsub+0x3f4>
 8001682:	e156      	b.n	8001932 <__aeabi_dsub+0x6a2>
 8001684:	003a      	movs	r2, r7
 8001686:	4302      	orrs	r2, r0
 8001688:	d100      	bne.n	800168c <__aeabi_dsub+0x3fc>
 800168a:	e0db      	b.n	8001844 <__aeabi_dsub+0x5b4>
 800168c:	181c      	adds	r4, r3, r0
 800168e:	429c      	cmp	r4, r3
 8001690:	419b      	sbcs	r3, r3
 8001692:	444f      	add	r7, r9
 8001694:	46ba      	mov	sl, r7
 8001696:	425b      	negs	r3, r3
 8001698:	449a      	add	sl, r3
 800169a:	4653      	mov	r3, sl
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	d400      	bmi.n	80016a2 <__aeabi_dsub+0x412>
 80016a0:	e780      	b.n	80015a4 <__aeabi_dsub+0x314>
 80016a2:	4652      	mov	r2, sl
 80016a4:	4bb6      	ldr	r3, [pc, #728]	; (8001980 <__aeabi_dsub+0x6f0>)
 80016a6:	2601      	movs	r6, #1
 80016a8:	401a      	ands	r2, r3
 80016aa:	4692      	mov	sl, r2
 80016ac:	e77a      	b.n	80015a4 <__aeabi_dsub+0x314>
 80016ae:	4cb3      	ldr	r4, [pc, #716]	; (800197c <__aeabi_dsub+0x6ec>)
 80016b0:	42a2      	cmp	r2, r4
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dsub+0x426>
 80016b4:	e0c0      	b.n	8001838 <__aeabi_dsub+0x5a8>
 80016b6:	2480      	movs	r4, #128	; 0x80
 80016b8:	464d      	mov	r5, r9
 80016ba:	0424      	lsls	r4, r4, #16
 80016bc:	4325      	orrs	r5, r4
 80016be:	46a9      	mov	r9, r5
 80016c0:	4664      	mov	r4, ip
 80016c2:	2c38      	cmp	r4, #56	; 0x38
 80016c4:	dc53      	bgt.n	800176e <__aeabi_dsub+0x4de>
 80016c6:	4661      	mov	r1, ip
 80016c8:	2c1f      	cmp	r4, #31
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dsub+0x43e>
 80016cc:	e0cd      	b.n	800186a <__aeabi_dsub+0x5da>
 80016ce:	2520      	movs	r5, #32
 80016d0:	001e      	movs	r6, r3
 80016d2:	1b2d      	subs	r5, r5, r4
 80016d4:	464c      	mov	r4, r9
 80016d6:	40ab      	lsls	r3, r5
 80016d8:	40ac      	lsls	r4, r5
 80016da:	40ce      	lsrs	r6, r1
 80016dc:	1e5d      	subs	r5, r3, #1
 80016de:	41ab      	sbcs	r3, r5
 80016e0:	4334      	orrs	r4, r6
 80016e2:	4323      	orrs	r3, r4
 80016e4:	464c      	mov	r4, r9
 80016e6:	40cc      	lsrs	r4, r1
 80016e8:	1b3f      	subs	r7, r7, r4
 80016ea:	e045      	b.n	8001778 <__aeabi_dsub+0x4e8>
 80016ec:	464a      	mov	r2, r9
 80016ee:	1a1c      	subs	r4, r3, r0
 80016f0:	1bd1      	subs	r1, r2, r7
 80016f2:	42a3      	cmp	r3, r4
 80016f4:	4192      	sbcs	r2, r2
 80016f6:	4252      	negs	r2, r2
 80016f8:	4692      	mov	sl, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	4651      	mov	r1, sl
 80016fe:	1a52      	subs	r2, r2, r1
 8001700:	4692      	mov	sl, r2
 8001702:	0212      	lsls	r2, r2, #8
 8001704:	d500      	bpl.n	8001708 <__aeabi_dsub+0x478>
 8001706:	e083      	b.n	8001810 <__aeabi_dsub+0x580>
 8001708:	4653      	mov	r3, sl
 800170a:	4323      	orrs	r3, r4
 800170c:	d000      	beq.n	8001710 <__aeabi_dsub+0x480>
 800170e:	e621      	b.n	8001354 <__aeabi_dsub+0xc4>
 8001710:	2200      	movs	r2, #0
 8001712:	2500      	movs	r5, #0
 8001714:	e753      	b.n	80015be <__aeabi_dsub+0x32e>
 8001716:	181c      	adds	r4, r3, r0
 8001718:	429c      	cmp	r4, r3
 800171a:	419b      	sbcs	r3, r3
 800171c:	444f      	add	r7, r9
 800171e:	46ba      	mov	sl, r7
 8001720:	425b      	negs	r3, r3
 8001722:	449a      	add	sl, r3
 8001724:	4653      	mov	r3, sl
 8001726:	2601      	movs	r6, #1
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	d400      	bmi.n	800172e <__aeabi_dsub+0x49e>
 800172c:	e73a      	b.n	80015a4 <__aeabi_dsub+0x314>
 800172e:	2602      	movs	r6, #2
 8001730:	4652      	mov	r2, sl
 8001732:	4b93      	ldr	r3, [pc, #588]	; (8001980 <__aeabi_dsub+0x6f0>)
 8001734:	2101      	movs	r1, #1
 8001736:	401a      	ands	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	4021      	ands	r1, r4
 800173c:	0862      	lsrs	r2, r4, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	07dc      	lsls	r4, r3, #31
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	469a      	mov	sl, r3
 8001746:	4314      	orrs	r4, r2
 8001748:	e62c      	b.n	80013a4 <__aeabi_dsub+0x114>
 800174a:	0039      	movs	r1, r7
 800174c:	3a20      	subs	r2, #32
 800174e:	40d1      	lsrs	r1, r2
 8001750:	4662      	mov	r2, ip
 8001752:	2a20      	cmp	r2, #32
 8001754:	d006      	beq.n	8001764 <__aeabi_dsub+0x4d4>
 8001756:	4664      	mov	r4, ip
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	1b12      	subs	r2, r2, r4
 800175c:	003c      	movs	r4, r7
 800175e:	4094      	lsls	r4, r2
 8001760:	4304      	orrs	r4, r0
 8001762:	9401      	str	r4, [sp, #4]
 8001764:	9c01      	ldr	r4, [sp, #4]
 8001766:	1e62      	subs	r2, r4, #1
 8001768:	4194      	sbcs	r4, r2
 800176a:	430c      	orrs	r4, r1
 800176c:	e5e3      	b.n	8001336 <__aeabi_dsub+0xa6>
 800176e:	4649      	mov	r1, r9
 8001770:	4319      	orrs	r1, r3
 8001772:	000b      	movs	r3, r1
 8001774:	1e5c      	subs	r4, r3, #1
 8001776:	41a3      	sbcs	r3, r4
 8001778:	1ac4      	subs	r4, r0, r3
 800177a:	42a0      	cmp	r0, r4
 800177c:	419b      	sbcs	r3, r3
 800177e:	425b      	negs	r3, r3
 8001780:	1afb      	subs	r3, r7, r3
 8001782:	469a      	mov	sl, r3
 8001784:	465d      	mov	r5, fp
 8001786:	0016      	movs	r6, r2
 8001788:	e5dc      	b.n	8001344 <__aeabi_dsub+0xb4>
 800178a:	4649      	mov	r1, r9
 800178c:	4319      	orrs	r1, r3
 800178e:	d100      	bne.n	8001792 <__aeabi_dsub+0x502>
 8001790:	e0ae      	b.n	80018f0 <__aeabi_dsub+0x660>
 8001792:	4661      	mov	r1, ip
 8001794:	4664      	mov	r4, ip
 8001796:	3901      	subs	r1, #1
 8001798:	2c01      	cmp	r4, #1
 800179a:	d100      	bne.n	800179e <__aeabi_dsub+0x50e>
 800179c:	e0e0      	b.n	8001960 <__aeabi_dsub+0x6d0>
 800179e:	4c77      	ldr	r4, [pc, #476]	; (800197c <__aeabi_dsub+0x6ec>)
 80017a0:	45a4      	cmp	ip, r4
 80017a2:	d056      	beq.n	8001852 <__aeabi_dsub+0x5c2>
 80017a4:	468c      	mov	ip, r1
 80017a6:	e69a      	b.n	80014de <__aeabi_dsub+0x24e>
 80017a8:	4661      	mov	r1, ip
 80017aa:	2220      	movs	r2, #32
 80017ac:	003c      	movs	r4, r7
 80017ae:	1a52      	subs	r2, r2, r1
 80017b0:	4094      	lsls	r4, r2
 80017b2:	0001      	movs	r1, r0
 80017b4:	4090      	lsls	r0, r2
 80017b6:	46a0      	mov	r8, r4
 80017b8:	4664      	mov	r4, ip
 80017ba:	1e42      	subs	r2, r0, #1
 80017bc:	4190      	sbcs	r0, r2
 80017be:	4662      	mov	r2, ip
 80017c0:	40e1      	lsrs	r1, r4
 80017c2:	4644      	mov	r4, r8
 80017c4:	40d7      	lsrs	r7, r2
 80017c6:	430c      	orrs	r4, r1
 80017c8:	4304      	orrs	r4, r0
 80017ca:	44b9      	add	r9, r7
 80017cc:	e701      	b.n	80015d2 <__aeabi_dsub+0x342>
 80017ce:	496b      	ldr	r1, [pc, #428]	; (800197c <__aeabi_dsub+0x6ec>)
 80017d0:	428a      	cmp	r2, r1
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dsub+0x546>
 80017d4:	e70c      	b.n	80015f0 <__aeabi_dsub+0x360>
 80017d6:	1818      	adds	r0, r3, r0
 80017d8:	4298      	cmp	r0, r3
 80017da:	419b      	sbcs	r3, r3
 80017dc:	444f      	add	r7, r9
 80017de:	425b      	negs	r3, r3
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	07dc      	lsls	r4, r3, #31
 80017e4:	0840      	lsrs	r0, r0, #1
 80017e6:	085b      	lsrs	r3, r3, #1
 80017e8:	469a      	mov	sl, r3
 80017ea:	0016      	movs	r6, r2
 80017ec:	4304      	orrs	r4, r0
 80017ee:	e6d9      	b.n	80015a4 <__aeabi_dsub+0x314>
 80017f0:	2a00      	cmp	r2, #0
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dsub+0x566>
 80017f4:	e081      	b.n	80018fa <__aeabi_dsub+0x66a>
 80017f6:	003b      	movs	r3, r7
 80017f8:	4303      	orrs	r3, r0
 80017fa:	d11d      	bne.n	8001838 <__aeabi_dsub+0x5a8>
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	2500      	movs	r5, #0
 8001800:	0312      	lsls	r2, r2, #12
 8001802:	e70b      	b.n	800161c <__aeabi_dsub+0x38c>
 8001804:	08c0      	lsrs	r0, r0, #3
 8001806:	077b      	lsls	r3, r7, #29
 8001808:	465d      	mov	r5, fp
 800180a:	4303      	orrs	r3, r0
 800180c:	08fa      	lsrs	r2, r7, #3
 800180e:	e6d3      	b.n	80015b8 <__aeabi_dsub+0x328>
 8001810:	1ac4      	subs	r4, r0, r3
 8001812:	42a0      	cmp	r0, r4
 8001814:	4180      	sbcs	r0, r0
 8001816:	464b      	mov	r3, r9
 8001818:	4240      	negs	r0, r0
 800181a:	1aff      	subs	r7, r7, r3
 800181c:	1a3b      	subs	r3, r7, r0
 800181e:	469a      	mov	sl, r3
 8001820:	465d      	mov	r5, fp
 8001822:	e597      	b.n	8001354 <__aeabi_dsub+0xc4>
 8001824:	1a1c      	subs	r4, r3, r0
 8001826:	464a      	mov	r2, r9
 8001828:	42a3      	cmp	r3, r4
 800182a:	419b      	sbcs	r3, r3
 800182c:	1bd7      	subs	r7, r2, r7
 800182e:	425b      	negs	r3, r3
 8001830:	1afb      	subs	r3, r7, r3
 8001832:	469a      	mov	sl, r3
 8001834:	2601      	movs	r6, #1
 8001836:	e585      	b.n	8001344 <__aeabi_dsub+0xb4>
 8001838:	08c0      	lsrs	r0, r0, #3
 800183a:	077b      	lsls	r3, r7, #29
 800183c:	465d      	mov	r5, fp
 800183e:	4303      	orrs	r3, r0
 8001840:	08fa      	lsrs	r2, r7, #3
 8001842:	e6e7      	b.n	8001614 <__aeabi_dsub+0x384>
 8001844:	464a      	mov	r2, r9
 8001846:	08db      	lsrs	r3, r3, #3
 8001848:	0752      	lsls	r2, r2, #29
 800184a:	4313      	orrs	r3, r2
 800184c:	464a      	mov	r2, r9
 800184e:	08d2      	lsrs	r2, r2, #3
 8001850:	e6b5      	b.n	80015be <__aeabi_dsub+0x32e>
 8001852:	08c0      	lsrs	r0, r0, #3
 8001854:	077b      	lsls	r3, r7, #29
 8001856:	4303      	orrs	r3, r0
 8001858:	08fa      	lsrs	r2, r7, #3
 800185a:	e6db      	b.n	8001614 <__aeabi_dsub+0x384>
 800185c:	4649      	mov	r1, r9
 800185e:	4319      	orrs	r1, r3
 8001860:	000b      	movs	r3, r1
 8001862:	1e59      	subs	r1, r3, #1
 8001864:	418b      	sbcs	r3, r1
 8001866:	001c      	movs	r4, r3
 8001868:	e653      	b.n	8001512 <__aeabi_dsub+0x282>
 800186a:	464d      	mov	r5, r9
 800186c:	3c20      	subs	r4, #32
 800186e:	40e5      	lsrs	r5, r4
 8001870:	2920      	cmp	r1, #32
 8001872:	d005      	beq.n	8001880 <__aeabi_dsub+0x5f0>
 8001874:	2440      	movs	r4, #64	; 0x40
 8001876:	1a64      	subs	r4, r4, r1
 8001878:	4649      	mov	r1, r9
 800187a:	40a1      	lsls	r1, r4
 800187c:	430b      	orrs	r3, r1
 800187e:	4698      	mov	r8, r3
 8001880:	4643      	mov	r3, r8
 8001882:	1e5c      	subs	r4, r3, #1
 8001884:	41a3      	sbcs	r3, r4
 8001886:	432b      	orrs	r3, r5
 8001888:	e776      	b.n	8001778 <__aeabi_dsub+0x4e8>
 800188a:	2a00      	cmp	r2, #0
 800188c:	d0e1      	beq.n	8001852 <__aeabi_dsub+0x5c2>
 800188e:	003a      	movs	r2, r7
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	4302      	orrs	r2, r0
 8001894:	d100      	bne.n	8001898 <__aeabi_dsub+0x608>
 8001896:	e6b8      	b.n	800160a <__aeabi_dsub+0x37a>
 8001898:	464a      	mov	r2, r9
 800189a:	0752      	lsls	r2, r2, #29
 800189c:	2480      	movs	r4, #128	; 0x80
 800189e:	4313      	orrs	r3, r2
 80018a0:	464a      	mov	r2, r9
 80018a2:	0324      	lsls	r4, r4, #12
 80018a4:	08d2      	lsrs	r2, r2, #3
 80018a6:	4222      	tst	r2, r4
 80018a8:	d007      	beq.n	80018ba <__aeabi_dsub+0x62a>
 80018aa:	08fe      	lsrs	r6, r7, #3
 80018ac:	4226      	tst	r6, r4
 80018ae:	d104      	bne.n	80018ba <__aeabi_dsub+0x62a>
 80018b0:	465d      	mov	r5, fp
 80018b2:	0032      	movs	r2, r6
 80018b4:	08c3      	lsrs	r3, r0, #3
 80018b6:	077f      	lsls	r7, r7, #29
 80018b8:	433b      	orrs	r3, r7
 80018ba:	0f59      	lsrs	r1, r3, #29
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	0749      	lsls	r1, r1, #29
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	430b      	orrs	r3, r1
 80018c4:	e6a6      	b.n	8001614 <__aeabi_dsub+0x384>
 80018c6:	1ac4      	subs	r4, r0, r3
 80018c8:	42a0      	cmp	r0, r4
 80018ca:	4180      	sbcs	r0, r0
 80018cc:	464b      	mov	r3, r9
 80018ce:	4240      	negs	r0, r0
 80018d0:	1aff      	subs	r7, r7, r3
 80018d2:	1a3b      	subs	r3, r7, r0
 80018d4:	469a      	mov	sl, r3
 80018d6:	465d      	mov	r5, fp
 80018d8:	2601      	movs	r6, #1
 80018da:	e533      	b.n	8001344 <__aeabi_dsub+0xb4>
 80018dc:	003b      	movs	r3, r7
 80018de:	4303      	orrs	r3, r0
 80018e0:	d100      	bne.n	80018e4 <__aeabi_dsub+0x654>
 80018e2:	e715      	b.n	8001710 <__aeabi_dsub+0x480>
 80018e4:	08c0      	lsrs	r0, r0, #3
 80018e6:	077b      	lsls	r3, r7, #29
 80018e8:	465d      	mov	r5, fp
 80018ea:	4303      	orrs	r3, r0
 80018ec:	08fa      	lsrs	r2, r7, #3
 80018ee:	e666      	b.n	80015be <__aeabi_dsub+0x32e>
 80018f0:	08c0      	lsrs	r0, r0, #3
 80018f2:	077b      	lsls	r3, r7, #29
 80018f4:	4303      	orrs	r3, r0
 80018f6:	08fa      	lsrs	r2, r7, #3
 80018f8:	e65e      	b.n	80015b8 <__aeabi_dsub+0x328>
 80018fa:	003a      	movs	r2, r7
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	4302      	orrs	r2, r0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x674>
 8001902:	e682      	b.n	800160a <__aeabi_dsub+0x37a>
 8001904:	464a      	mov	r2, r9
 8001906:	0752      	lsls	r2, r2, #29
 8001908:	2480      	movs	r4, #128	; 0x80
 800190a:	4313      	orrs	r3, r2
 800190c:	464a      	mov	r2, r9
 800190e:	0324      	lsls	r4, r4, #12
 8001910:	08d2      	lsrs	r2, r2, #3
 8001912:	4222      	tst	r2, r4
 8001914:	d007      	beq.n	8001926 <__aeabi_dsub+0x696>
 8001916:	08fe      	lsrs	r6, r7, #3
 8001918:	4226      	tst	r6, r4
 800191a:	d104      	bne.n	8001926 <__aeabi_dsub+0x696>
 800191c:	465d      	mov	r5, fp
 800191e:	0032      	movs	r2, r6
 8001920:	08c3      	lsrs	r3, r0, #3
 8001922:	077f      	lsls	r7, r7, #29
 8001924:	433b      	orrs	r3, r7
 8001926:	0f59      	lsrs	r1, r3, #29
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	0749      	lsls	r1, r1, #29
 800192e:	430b      	orrs	r3, r1
 8001930:	e670      	b.n	8001614 <__aeabi_dsub+0x384>
 8001932:	08c0      	lsrs	r0, r0, #3
 8001934:	077b      	lsls	r3, r7, #29
 8001936:	4303      	orrs	r3, r0
 8001938:	08fa      	lsrs	r2, r7, #3
 800193a:	e640      	b.n	80015be <__aeabi_dsub+0x32e>
 800193c:	464c      	mov	r4, r9
 800193e:	3920      	subs	r1, #32
 8001940:	40cc      	lsrs	r4, r1
 8001942:	4661      	mov	r1, ip
 8001944:	2920      	cmp	r1, #32
 8001946:	d006      	beq.n	8001956 <__aeabi_dsub+0x6c6>
 8001948:	4666      	mov	r6, ip
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	1b89      	subs	r1, r1, r6
 800194e:	464e      	mov	r6, r9
 8001950:	408e      	lsls	r6, r1
 8001952:	4333      	orrs	r3, r6
 8001954:	4698      	mov	r8, r3
 8001956:	4643      	mov	r3, r8
 8001958:	1e59      	subs	r1, r3, #1
 800195a:	418b      	sbcs	r3, r1
 800195c:	431c      	orrs	r4, r3
 800195e:	e5d8      	b.n	8001512 <__aeabi_dsub+0x282>
 8001960:	181c      	adds	r4, r3, r0
 8001962:	4284      	cmp	r4, r0
 8001964:	4180      	sbcs	r0, r0
 8001966:	444f      	add	r7, r9
 8001968:	46ba      	mov	sl, r7
 800196a:	4240      	negs	r0, r0
 800196c:	4482      	add	sl, r0
 800196e:	e6d9      	b.n	8001724 <__aeabi_dsub+0x494>
 8001970:	4653      	mov	r3, sl
 8001972:	4323      	orrs	r3, r4
 8001974:	d100      	bne.n	8001978 <__aeabi_dsub+0x6e8>
 8001976:	e6cb      	b.n	8001710 <__aeabi_dsub+0x480>
 8001978:	e614      	b.n	80015a4 <__aeabi_dsub+0x314>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	000007ff 	.word	0x000007ff
 8001980:	ff7fffff 	.word	0xff7fffff
 8001984:	000007fe 	.word	0x000007fe
 8001988:	2300      	movs	r3, #0
 800198a:	4a01      	ldr	r2, [pc, #4]	; (8001990 <__aeabi_dsub+0x700>)
 800198c:	001c      	movs	r4, r3
 800198e:	e529      	b.n	80013e4 <__aeabi_dsub+0x154>
 8001990:	000007ff 	.word	0x000007ff

08001994 <__aeabi_f2d>:
 8001994:	b570      	push	{r4, r5, r6, lr}
 8001996:	0242      	lsls	r2, r0, #9
 8001998:	0043      	lsls	r3, r0, #1
 800199a:	0fc4      	lsrs	r4, r0, #31
 800199c:	20fe      	movs	r0, #254	; 0xfe
 800199e:	0e1b      	lsrs	r3, r3, #24
 80019a0:	1c59      	adds	r1, r3, #1
 80019a2:	0a55      	lsrs	r5, r2, #9
 80019a4:	4208      	tst	r0, r1
 80019a6:	d00c      	beq.n	80019c2 <__aeabi_f2d+0x2e>
 80019a8:	21e0      	movs	r1, #224	; 0xe0
 80019aa:	0089      	lsls	r1, r1, #2
 80019ac:	468c      	mov	ip, r1
 80019ae:	076d      	lsls	r5, r5, #29
 80019b0:	0b12      	lsrs	r2, r2, #12
 80019b2:	4463      	add	r3, ip
 80019b4:	051b      	lsls	r3, r3, #20
 80019b6:	4313      	orrs	r3, r2
 80019b8:	07e4      	lsls	r4, r4, #31
 80019ba:	4323      	orrs	r3, r4
 80019bc:	0028      	movs	r0, r5
 80019be:	0019      	movs	r1, r3
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d114      	bne.n	80019f0 <__aeabi_f2d+0x5c>
 80019c6:	2d00      	cmp	r5, #0
 80019c8:	d01b      	beq.n	8001a02 <__aeabi_f2d+0x6e>
 80019ca:	0028      	movs	r0, r5
 80019cc:	f000 f82a 	bl	8001a24 <__clzsi2>
 80019d0:	280a      	cmp	r0, #10
 80019d2:	dc1c      	bgt.n	8001a0e <__aeabi_f2d+0x7a>
 80019d4:	230b      	movs	r3, #11
 80019d6:	002a      	movs	r2, r5
 80019d8:	1a1b      	subs	r3, r3, r0
 80019da:	40da      	lsrs	r2, r3
 80019dc:	0003      	movs	r3, r0
 80019de:	3315      	adds	r3, #21
 80019e0:	409d      	lsls	r5, r3
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <__aeabi_f2d+0x88>)
 80019e4:	0312      	lsls	r2, r2, #12
 80019e6:	1a1b      	subs	r3, r3, r0
 80019e8:	055b      	lsls	r3, r3, #21
 80019ea:	0b12      	lsrs	r2, r2, #12
 80019ec:	0d5b      	lsrs	r3, r3, #21
 80019ee:	e7e1      	b.n	80019b4 <__aeabi_f2d+0x20>
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	d009      	beq.n	8001a08 <__aeabi_f2d+0x74>
 80019f4:	0b13      	lsrs	r3, r2, #12
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	0312      	lsls	r2, r2, #12
 80019fa:	431a      	orrs	r2, r3
 80019fc:	076d      	lsls	r5, r5, #29
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <__aeabi_f2d+0x8c>)
 8001a00:	e7d8      	b.n	80019b4 <__aeabi_f2d+0x20>
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	e7d5      	b.n	80019b4 <__aeabi_f2d+0x20>
 8001a08:	2200      	movs	r2, #0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <__aeabi_f2d+0x8c>)
 8001a0c:	e7d2      	b.n	80019b4 <__aeabi_f2d+0x20>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	002a      	movs	r2, r5
 8001a12:	3b0b      	subs	r3, #11
 8001a14:	409a      	lsls	r2, r3
 8001a16:	2500      	movs	r5, #0
 8001a18:	e7e3      	b.n	80019e2 <__aeabi_f2d+0x4e>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	00000389 	.word	0x00000389
 8001a20:	000007ff 	.word	0x000007ff

08001a24 <__clzsi2>:
 8001a24:	211c      	movs	r1, #28
 8001a26:	2301      	movs	r3, #1
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	4298      	cmp	r0, r3
 8001a2c:	d301      	bcc.n	8001a32 <__clzsi2+0xe>
 8001a2e:	0c00      	lsrs	r0, r0, #16
 8001a30:	3910      	subs	r1, #16
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	4298      	cmp	r0, r3
 8001a36:	d301      	bcc.n	8001a3c <__clzsi2+0x18>
 8001a38:	0a00      	lsrs	r0, r0, #8
 8001a3a:	3908      	subs	r1, #8
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	d301      	bcc.n	8001a46 <__clzsi2+0x22>
 8001a42:	0900      	lsrs	r0, r0, #4
 8001a44:	3904      	subs	r1, #4
 8001a46:	a202      	add	r2, pc, #8	; (adr r2, 8001a50 <__clzsi2+0x2c>)
 8001a48:	5c10      	ldrb	r0, [r2, r0]
 8001a4a:	1840      	adds	r0, r0, r1
 8001a4c:	4770      	bx	lr
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	02020304 	.word	0x02020304
 8001a54:	01010101 	.word	0x01010101
	...

08001a60 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a64:	f3bf 8f4f 	dsb	sy
}
 8001a68:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_SystemReset+0x1c>)
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SystemReset+0x20>)
 8001a6e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a70:	f3bf 8f4f 	dsb	sy
}
 8001a74:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	e7fd      	b.n	8001a76 <__NVIC_SystemReset+0x16>
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	05fa0004 	.word	0x05fa0004

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8a:	f000 fbc7 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8e:	f000 f863 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a92:	f000 f98b 	bl	8001dac <MX_GPIO_Init>
  MX_DMA_Init();
 8001a96:	f000 f96b 	bl	8001d70 <MX_DMA_Init>
  MX_ADC_Init();
 8001a9a:	f000 f8a3 	bl	8001be4 <MX_ADC_Init>
  MX_CAN_Init();
 8001a9e:	f000 f931 	bl	8001d04 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <main+0xb4>)
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f001 f92f 	bl	8002d08 <HAL_CAN_Start>
	HAL_CAN_WakeUp(&hcan);
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <main+0xb4>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f001 f971 	bl	8002d94 <HAL_CAN_WakeUp>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_TogglePin(GPIOA, LED_LD2_Pin);
 8001ab2:	2390      	movs	r3, #144	; 0x90
 8001ab4:	05db      	lsls	r3, r3, #23
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f001 fdda 	bl	8003672 <HAL_GPIO_TogglePin>

		/* Initialise flags on loop */
		ADC_interrupt_flag = 0;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <main+0xb8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
		timeout = 1;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <main+0xbc>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

		/* Take ADC values using the DMA */
		HAL_ADC_Start_DMA(&hadc, (uint16_t *)ADC_read_value_raw, (uint16_t)5);
 8001aca:	491e      	ldr	r1, [pc, #120]	; (8001b44 <main+0xc0>)
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <main+0xc4>)
 8001ace:	2205      	movs	r2, #5
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 fd6b 	bl	80025ac <HAL_ADC_Start_DMA>
		for (int i = 0; i < ((timeout_time / 10) - 1); i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	e00f      	b.n	8001afc <main+0x78>
			if (ADC_interrupt_flag == 1) {
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <main+0xb8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d105      	bne.n	8001af0 <main+0x6c>

				timeout = 0;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <main+0xbc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

				//Check current reading
				current_measure();
 8001aea:	f000 f9c3 	bl	8001e74 <current_measure>
				break;
 8001aee:	e010      	b.n	8001b12 <main+0x8e>
			}
			HAL_Delay(50);
 8001af0:	2032      	movs	r0, #50	; 0x32
 8001af2:	f000 fbf7 	bl	80022e4 <HAL_Delay>
		for (int i = 0; i < ((timeout_time / 10) - 1); i++) {
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3301      	adds	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <main+0xc8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	210a      	movs	r1, #10
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7fe fb88 	bl	8000218 <__divsi3>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbe4      	blt.n	8001adc <main+0x58>
	//	can_lv_bms_data_a_send_status();
	//	can_lv_bms_status_a_store();
	//	can_lv_bms_status_a_send_status();

		//If we haven't received values from ADC trough DMA -> timeout error
		if (timeout) {
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <main+0xbc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <main+0x9c>
			error = ADC_timeout;
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <main+0xcc>)
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	701a      	strb	r2, [r3, #0]
		}

		//Check if we have an error, if yes go to error handler
		if (error) {
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <main+0xcc>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0c4      	beq.n	8001ab2 <main+0x2e>
			Error_Handler();
 8001b28:	f000 fa26 	bl	8001f78 <Error_Handler>

			HAL_Delay(period);
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <main+0xd0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 fbd7 	bl	80022e4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, LED_LD2_Pin);
 8001b36:	e7bc      	b.n	8001ab2 <main+0x2e>
 8001b38:	200000b8 	.word	0x200000b8
 8001b3c:	200000f0 	.word	0x200000f0
 8001b40:	200000f4 	.word	0x200000f4
 8001b44:	200000e4 	.word	0x200000e4
 8001b48:	20000034 	.word	0x20000034
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	200000e0 	.word	0x200000e0
 8001b54:	20000000 	.word	0x20000000

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b093      	sub	sp, #76	; 0x4c
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	2414      	movs	r4, #20
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	0018      	movs	r0, r3
 8001b64:	2334      	movs	r3, #52	; 0x34
 8001b66:	001a      	movs	r2, r3
 8001b68:	2100      	movs	r1, #0
 8001b6a:	f002 fa6f 	bl	800404c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	0018      	movs	r0, r3
 8001b72:	2310      	movs	r3, #16
 8001b74:	001a      	movs	r2, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	f002 fa68 	bl	800404c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001b7c:	0021      	movs	r1, r4
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2212      	movs	r2, #18
 8001b82:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2201      	movs	r2, #1
 8001b88:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2210      	movs	r2, #16
 8001b94:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2210      	movs	r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f001 fd7f 	bl	80036a8 <HAL_RCC_OscConfig>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001bae:	f000 f9e3 	bl	8001f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2100      	movs	r1, #0
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f002 f8f0 	bl	8003db4 <HAL_RCC_ClockConfig>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001bd8:	f000 f9ce 	bl	8001f78 <Error_Handler>
  }
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b013      	add	sp, #76	; 0x4c
 8001be2:	bd90      	pop	{r4, r7, pc}

08001be4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	0018      	movs	r0, r3
 8001bee:	230c      	movs	r3, #12
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f002 fa2a 	bl	800404c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <MX_ADC_Init+0x118>)
 8001bfa:	4a41      	ldr	r2, [pc, #260]	; (8001d00 <MX_ADC_Init+0x11c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001c10:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c18:	2204      	movs	r2, #4
 8001c1a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001c1c:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c36:	22c2      	movs	r2, #194	; 0xc2
 8001c38:	32ff      	adds	r2, #255	; 0xff
 8001c3a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c44:	2224      	movs	r2, #36	; 0x24
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 fb6a 	bl	800232c <HAL_ADC_Init>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001c5c:	f000 f98c 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2280      	movs	r2, #128	; 0x80
 8001c6a:	0152      	lsls	r2, r2, #5
 8001c6c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	0552      	lsls	r2, r2, #21
 8001c74:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c76:	1d3a      	adds	r2, r7, #4
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 fd2f 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d001      	beq.n	8001c8a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001c86:	f000 f977 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c90:	1d3a      	adds	r2, r7, #4
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_ADC_Init+0x118>)
 8001c94:	0011      	movs	r1, r2
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 fd22 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001c9c:	1e03      	subs	r3, r0, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001ca0:	f000 f96a 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001caa:	1d3a      	adds	r2, r7, #4
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <MX_ADC_Init+0x118>)
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f000 fd15 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8001cba:	f000 f95d 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2206      	movs	r2, #6
 8001cc2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cc4:	1d3a      	adds	r2, r7, #4
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <MX_ADC_Init+0x118>)
 8001cc8:	0011      	movs	r1, r2
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 fd08 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001cd0:	1e03      	subs	r3, r0, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001cd4:	f000 f950 	bl	8001f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2207      	movs	r2, #7
 8001cdc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001cde:	1d3a      	adds	r2, r7, #4
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_ADC_Init+0x118>)
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fcfb 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001cea:	1e03      	subs	r3, r0, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8001cee:	f000 f943 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000034 	.word	0x20000034
 8001d00:	40012400 	.word	0x40012400

08001d04 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d0a:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <MX_CAN_Init+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d22:	22a0      	movs	r2, #160	; 0xa0
 8001d24:	02d2      	lsls	r2, r2, #11
 8001d26:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <MX_CAN_Init+0x64>)
 8001d54:	0018      	movs	r0, r3
 8001d56:	f000 fed9 	bl	8002b0c <HAL_CAN_Init>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001d5e:	f000 f90b 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200000b8 	.word	0x200000b8
 8001d6c:	40006400 	.word	0x40006400

08001d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_DMA_Init+0x38>)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_DMA_Init+0x38>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_DMA_Init+0x38>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	2009      	movs	r0, #9
 8001d94:	f001 f8f0 	bl	8002f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8001d98:	2009      	movs	r0, #9
 8001d9a:	f001 f902 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40021000 	.word	0x40021000

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b089      	sub	sp, #36	; 0x24
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	240c      	movs	r4, #12
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	0018      	movs	r0, r3
 8001db8:	2314      	movs	r3, #20
 8001dba:	001a      	movs	r2, r3
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f002 f945 	bl	800404c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <MX_GPIO_Init+0xbc>)
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	4b28      	ldr	r3, [pc, #160]	; (8001e68 <MX_GPIO_Init+0xbc>)
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	0289      	lsls	r1, r1, #10
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <MX_GPIO_Init+0xbc>)
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_GPIO_Init+0xbc>)
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_GPIO_Init+0xbc>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	02c9      	lsls	r1, r1, #11
 8001de8:	430a      	orrs	r2, r1
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_GPIO_Init+0xbc>)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	02db      	lsls	r3, r3, #11
 8001df4:	4013      	ands	r3, r2
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LD2_GPIO_Port, LED_LD2_Pin, GPIO_PIN_RESET);
 8001dfa:	2390      	movs	r3, #144	; 0x90
 8001dfc:	05db      	lsls	r3, r3, #23
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2120      	movs	r1, #32
 8001e02:	0018      	movs	r0, r3
 8001e04:	f001 fc18 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001e08:	4918      	ldr	r1, [pc, #96]	; (8001e6c <MX_GPIO_Init+0xc0>)
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f001 fc12 	bl	8003638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_LD2_Pin */
  GPIO_InitStruct.Pin = LED_LD2_Pin;
 8001e14:	193b      	adds	r3, r7, r4
 8001e16:	2220      	movs	r2, #32
 8001e18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_LD2_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	193a      	adds	r2, r7, r4
 8001e2e:	2390      	movs	r3, #144	; 0x90
 8001e30:	05db      	lsls	r3, r3, #23
 8001e32:	0011      	movs	r1, r2
 8001e34:	0018      	movs	r0, r3
 8001e36:	f001 fa87 	bl	8003348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e3a:	0021      	movs	r1, r4
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <MX_GPIO_Init+0xc0>)
 8001e40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2201      	movs	r2, #1
 8001e46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <MX_GPIO_Init+0xc4>)
 8001e58:	0019      	movs	r1, r3
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	f001 fa74 	bl	8003348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b009      	add	sp, #36	; 0x24
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	00002070 	.word	0x00002070
 8001e70:	48000400 	.word	0x48000400

08001e74 <current_measure>:

/* USER CODE BEGIN 4 */
void current_measure(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
	for (int i=0;i < 5; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	e05d      	b.n	8001f3c <current_measure+0xc8>
	{
		// Calculate the voltage on the ADC input
		currMeas_V[i] = (ADC_reference_voltage * ADC_read_value_raw[i]) / 4096.0; // Range: [0, 3.3V]
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <current_measure+0xd8>)
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	5ad3      	ldrh	r3, [r2, r3]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f7fe fbfe 	bl	800068c <__aeabi_i2f>
 8001e90:	1c02      	adds	r2, r0, #0
 8001e92:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <current_measure+0xdc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	1c19      	adds	r1, r3, #0
 8001e98:	1c10      	adds	r0, r2, #0
 8001e9a:	f7fe faa9 	bl	80003f0 <__aeabi_fmul>
 8001e9e:	1c03      	adds	r3, r0, #0
 8001ea0:	1c18      	adds	r0, r3, #0
 8001ea2:	f7ff fd77 	bl	8001994 <__aeabi_f2d>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <current_measure+0xe0>)
 8001eaa:	f7fe fc41 	bl	8000730 <__aeabi_ddiv>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	000b      	movs	r3, r1
 8001eb2:	4829      	ldr	r0, [pc, #164]	; (8001f58 <current_measure+0xe4>)
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	00c9      	lsls	r1, r1, #3
 8001eb8:	1841      	adds	r1, r0, r1
 8001eba:	600a      	str	r2, [r1, #0]
 8001ebc:	604b      	str	r3, [r1, #4]
		// Calculate the sensor output
		senseMeas_V[i] = currMeas_V[i] * (27 + 10) / 27.0;
 8001ebe:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <current_measure+0xe4>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	18d3      	adds	r3, r2, r3
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <current_measure+0xe8>)
 8001ece:	f7fe ff1d 	bl	8000d0c <__aeabi_dmul>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	000b      	movs	r3, r1
 8001ed6:	0010      	movs	r0, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <current_measure+0xec>)
 8001ede:	f7fe fc27 	bl	8000730 <__aeabi_ddiv>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	000b      	movs	r3, r1
 8001ee6:	481f      	ldr	r0, [pc, #124]	; (8001f64 <current_measure+0xf0>)
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	00c9      	lsls	r1, r1, #3
 8001eec:	1841      	adds	r1, r0, r1
 8001eee:	600a      	str	r2, [r1, #0]
 8001ef0:	604b      	str	r3, [r1, #4]
		// Calculate the current through the sensor
		current_I[i] = 800 * (senseMeas_V[i] - 9 / 4.0) / 9.0;
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <current_measure+0xf0>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	18d3      	adds	r3, r2, r3
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <current_measure+0xf4>)
 8001f02:	f7ff f9c5 	bl	8001290 <__aeabi_dsub>
 8001f06:	0002      	movs	r2, r0
 8001f08:	000b      	movs	r3, r1
 8001f0a:	0010      	movs	r0, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <current_measure+0xf8>)
 8001f12:	f7fe fefb 	bl	8000d0c <__aeabi_dmul>
 8001f16:	0002      	movs	r2, r0
 8001f18:	000b      	movs	r3, r1
 8001f1a:	0010      	movs	r0, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <current_measure+0xfc>)
 8001f22:	f7fe fc05 	bl	8000730 <__aeabi_ddiv>
 8001f26:	0002      	movs	r2, r0
 8001f28:	000b      	movs	r3, r1
 8001f2a:	4812      	ldr	r0, [pc, #72]	; (8001f74 <current_measure+0x100>)
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	00c9      	lsls	r1, r1, #3
 8001f30:	1841      	adds	r1, r0, r1
 8001f32:	600a      	str	r2, [r1, #0]
 8001f34:	604b      	str	r3, [r1, #4]
	for (int i=0;i < 5; i++)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	dd9e      	ble.n	8001e80 <current_measure+0xc>
	}
}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200000e4 	.word	0x200000e4
 8001f50:	20000008 	.word	0x20000008
 8001f54:	40b00000 	.word	0x40b00000
 8001f58:	20000120 	.word	0x20000120
 8001f5c:	40428000 	.word	0x40428000
 8001f60:	403b0000 	.word	0x403b0000
 8001f64:	20000148 	.word	0x20000148
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40890000 	.word	0x40890000
 8001f70:	40220000 	.word	0x40220000
 8001f74:	200000f8 	.word	0x200000f8

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	// Send error information on CAN
	//can_lv_bms_data_a_store();
//	can_lv_bms_data_a_send_status();
//	can_lv_bms_status_a_store();
//	can_lv_bms_status_a_send_status();
	HAL_Delay(100);
 8001f7c:	2064      	movs	r0, #100	; 0x64
 8001f7e:	f000 f9b1 	bl	80022e4 <HAL_Delay>
	NVIC_SystemReset();
 8001f82:	f7ff fd6d 	bl	8001a60 <__NVIC_SystemReset>
	...

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_MspInit+0x44>)
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_MspInit+0x44>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_MspInit+0x44>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_MspInit+0x44>)
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <HAL_MspInit+0x44>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	0549      	lsls	r1, r1, #21
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_MspInit+0x44>)
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	055b      	lsls	r3, r3, #21
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b002      	add	sp, #8
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	2414      	movs	r4, #20
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	0018      	movs	r0, r3
 8001fde:	2314      	movs	r3, #20
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f002 f832 	bl	800404c <memset>
  if(hadc->Instance==ADC1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <HAL_ADC_MspInit+0xf4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d164      	bne.n	80020bc <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_ADC_MspInit+0xf8>)
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_ADC_MspInit+0xf8>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0089      	lsls	r1, r1, #2
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	619a      	str	r2, [r3, #24]
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_ADC_MspInit+0xf8>)
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_ADC_MspInit+0xf8>)
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_ADC_MspInit+0xf8>)
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	0289      	lsls	r1, r1, #10
 8002018:	430a      	orrs	r2, r1
 800201a:	615a      	str	r2, [r3, #20]
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_ADC_MspInit+0xf8>)
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = currentMeasure_v_Pin|thermistor_1_Pin|thermistor_2_Pin|GPIO_PIN_6
 800202a:	193b      	adds	r3, r7, r4
 800202c:	22cb      	movs	r2, #203	; 0xcb
 800202e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002030:	193b      	adds	r3, r7, r4
 8002032:	2203      	movs	r2, #3
 8002034:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	193b      	adds	r3, r7, r4
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	193a      	adds	r2, r7, r4
 800203e:	2390      	movs	r3, #144	; 0x90
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	0011      	movs	r1, r2
 8002044:	0018      	movs	r0, r3
 8002046:	f001 f97f 	bl	8003348 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_ADC_MspInit+0x100>)
 800204e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 800205e:	2280      	movs	r2, #128	; 0x80
 8002060:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	00d2      	lsls	r2, r2, #3
 8002070:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0192      	lsls	r2, r2, #6
 800207e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 8002082:	0018      	movs	r0, r3
 8002084:	f000 ffaa 	bl	8002fdc <HAL_DMA_Init>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d001      	beq.n	8002090 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800208c:	f7ff ff74 	bl	8001f78 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_ADC_MspInit+0x104>)
 8002092:	23a8      	movs	r3, #168	; 0xa8
 8002094:	58d3      	ldr	r3, [r2, r3]
 8002096:	490f      	ldr	r1, [pc, #60]	; (80020d4 <HAL_ADC_MspInit+0x104>)
 8002098:	220f      	movs	r2, #15
 800209a:	4393      	bics	r3, r2
 800209c:	22a8      	movs	r2, #168	; 0xa8
 800209e:	508b      	str	r3, [r1, r2]
 80020a0:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_ADC_MspInit+0x104>)
 80020a2:	23a8      	movs	r3, #168	; 0xa8
 80020a4:	58d3      	ldr	r3, [r2, r3]
 80020a6:	490b      	ldr	r1, [pc, #44]	; (80020d4 <HAL_ADC_MspInit+0x104>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	4313      	orrs	r3, r2
 80020ac:	22a8      	movs	r2, #168	; 0xa8
 80020ae:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_ADC_MspInit+0xfc>)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b00b      	add	sp, #44	; 0x2c
 80020c2:	bd90      	pop	{r4, r7, pc}
 80020c4:	40012400 	.word	0x40012400
 80020c8:	40021000 	.word	0x40021000
 80020cc:	20000074 	.word	0x20000074
 80020d0:	40020008 	.word	0x40020008
 80020d4:	40020000 	.word	0x40020000

080020d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b08b      	sub	sp, #44	; 0x2c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	2414      	movs	r4, #20
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	0018      	movs	r0, r3
 80020e6:	2314      	movs	r3, #20
 80020e8:	001a      	movs	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f001 ffae 	bl	800404c <memset>
  if(hcan->Instance==CAN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_CAN_MspInit+0x94>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d133      	bne.n	8002162 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_CAN_MspInit+0x98>)
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_CAN_MspInit+0x98>)
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	0489      	lsls	r1, r1, #18
 8002104:	430a      	orrs	r2, r1
 8002106:	61da      	str	r2, [r3, #28]
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_CAN_MspInit+0x98>)
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	049b      	lsls	r3, r3, #18
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_CAN_MspInit+0x98>)
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_CAN_MspInit+0x98>)
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0289      	lsls	r1, r1, #10
 8002120:	430a      	orrs	r2, r1
 8002122:	615a      	str	r2, [r3, #20]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_CAN_MspInit+0x98>)
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	029b      	lsls	r3, r3, #10
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002132:	193b      	adds	r3, r7, r4
 8002134:	22c0      	movs	r2, #192	; 0xc0
 8002136:	0152      	lsls	r2, r2, #5
 8002138:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	0021      	movs	r1, r4
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2202      	movs	r2, #2
 8002140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2203      	movs	r2, #3
 800214c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800214e:	187b      	adds	r3, r7, r1
 8002150:	2204      	movs	r2, #4
 8002152:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	187a      	adds	r2, r7, r1
 8002156:	2390      	movs	r3, #144	; 0x90
 8002158:	05db      	lsls	r3, r3, #23
 800215a:	0011      	movs	r1, r2
 800215c:	0018      	movs	r0, r3
 800215e:	f001 f8f3 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	46bd      	mov	sp, r7
 8002166:	b00b      	add	sp, #44	; 0x2c
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	40006400 	.word	0x40006400
 8002170:	40021000 	.word	0x40021000

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002198:	f000 f888 	bl	80022ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <DMA1_Ch1_IRQHandler+0x14>)
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 ffc4 	bl	8003138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	20000074 	.word	0x20000074

080021bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80021c0:	46c0      	nop			; (mov r8, r8)
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021cc:	f7ff fff6 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	; (8002204 <LoopForever+0x6>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <LoopForever+0xe>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <LoopForever+0x16>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021f6:	f001 ff31 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fa:	f7ff fc43 	bl	8001a84 <main>

080021fe <LoopForever>:

LoopForever:
    b LoopForever
 80021fe:	e7fe      	b.n	80021fe <LoopForever>
  ldr   r0, =_estack
 8002200:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800220c:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 8002210:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002214:	20000174 	.word	0x20000174

08002218 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_COMP_IRQHandler>
	...

0800221c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_Init+0x24>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_Init+0x24>)
 8002226:	2110      	movs	r1, #16
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f809 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002232:	f7ff fea9 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_InitTick+0x5c>)
 800224e:	681c      	ldr	r4, [r3, #0]
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <HAL_InitTick+0x60>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	0019      	movs	r1, r3
 8002256:	23fa      	movs	r3, #250	; 0xfa
 8002258:	0098      	lsls	r0, r3, #2
 800225a:	f7fd ff53 	bl	8000104 <__udivsi3>
 800225e:	0003      	movs	r3, r0
 8002260:	0019      	movs	r1, r3
 8002262:	0020      	movs	r0, r4
 8002264:	f7fd ff4e 	bl	8000104 <__udivsi3>
 8002268:	0003      	movs	r3, r0
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fea9 	bl	8002fc2 <HAL_SYSTICK_Config>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d001      	beq.n	8002278 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e00f      	b.n	8002298 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d80b      	bhi.n	8002296 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	2301      	movs	r3, #1
 8002282:	425b      	negs	r3, r3
 8002284:	2200      	movs	r2, #0
 8002286:	0018      	movs	r0, r3
 8002288:	f000 fe76 	bl	8002f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_InitTick+0x64>)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b003      	add	sp, #12
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	20000014 	.word	0x20000014
 80022a8:	20000010 	.word	0x20000010

080022ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_IncTick+0x1c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	001a      	movs	r2, r3
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x20>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	18d2      	adds	r2, r2, r3
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_IncTick+0x20>)
 80022be:	601a      	str	r2, [r3, #0]
}
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	20000014 	.word	0x20000014
 80022cc:	20000170 	.word	0x20000170

080022d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <HAL_GetTick+0x10>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	20000170 	.word	0x20000170

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_GetTick>
 80022f0:	0003      	movs	r3, r0
 80022f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	001a      	movs	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	189b      	adds	r3, r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	f7ff ffe0 	bl	80022d0 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	20000014 	.word	0x20000014

0800232c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e125      	b.n	8002596 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2234      	movs	r2, #52	; 0x34
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0018      	movs	r0, r3
 8002364:	f7ff fe34 	bl	8001fd0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	2210      	movs	r2, #16
 800236e:	4013      	ands	r3, r2
 8002370:	d000      	beq.n	8002374 <HAL_ADC_Init+0x48>
 8002372:	e103      	b.n	800257c <HAL_ADC_Init+0x250>
 8002374:	230f      	movs	r3, #15
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d000      	beq.n	8002380 <HAL_ADC_Init+0x54>
 800237e:	e0fd      	b.n	800257c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2204      	movs	r2, #4
 8002388:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800238a:	d000      	beq.n	800238e <HAL_ADC_Init+0x62>
 800238c:	e0f6      	b.n	800257c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	4a83      	ldr	r2, [pc, #524]	; (80025a0 <HAL_ADC_Init+0x274>)
 8002394:	4013      	ands	r3, r2
 8002396:	2202      	movs	r2, #2
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2203      	movs	r2, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d112      	bne.n	80023d2 <HAL_ADC_Init+0xa6>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d009      	beq.n	80023ce <HAL_ADC_Init+0xa2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	401a      	ands	r2, r3
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Init+0xa6>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_Init+0xa8>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d116      	bne.n	8002406 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2218      	movs	r2, #24
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	0899      	lsrs	r1, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4964      	ldr	r1, [pc, #400]	; (80025a4 <HAL_ADC_Init+0x278>)
 8002412:	400a      	ands	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7e1b      	ldrb	r3, [r3, #24]
 800241a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e5b      	ldrb	r3, [r3, #25]
 8002420:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002422:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7e9b      	ldrb	r3, [r3, #26]
 8002428:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800242a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	2b01      	cmp	r3, #1
 8002432:	d002      	beq.n	800243a <HAL_ADC_Init+0x10e>
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	015b      	lsls	r3, r3, #5
 8002438:	e000      	b.n	800243c <HAL_ADC_Init+0x110>
 800243a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800243c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002442:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d101      	bne.n	8002450 <HAL_ADC_Init+0x124>
 800244c:	2304      	movs	r3, #4
 800244e:	e000      	b.n	8002452 <HAL_ADC_Init+0x126>
 8002450:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002452:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2124      	movs	r1, #36	; 0x24
 8002458:	5c5b      	ldrb	r3, [r3, r1]
 800245a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800245c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4313      	orrs	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7edb      	ldrb	r3, [r3, #27]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d115      	bne.n	8002498 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e9b      	ldrb	r3, [r3, #26]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	0252      	lsls	r2, r2, #9
 800247a:	4313      	orrs	r3, r2
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	e00b      	b.n	8002498 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	2220      	movs	r2, #32
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	2201      	movs	r2, #1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	23c2      	movs	r3, #194	; 0xc2
 800249e:	33ff      	adds	r3, #255	; 0xff
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d007      	beq.n	80024b4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68d9      	ldr	r1, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	055b      	lsls	r3, r3, #21
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d01b      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d017      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d013      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d00f      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d00b      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d007      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d003      	beq.n	8002508 <HAL_ADC_Init+0x1dc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	2b07      	cmp	r3, #7
 8002506:	d112      	bne.n	800252e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2107      	movs	r1, #7
 8002514:	438a      	bics	r2, r1
 8002516:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6959      	ldr	r1, [r3, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	2207      	movs	r2, #7
 8002524:	401a      	ands	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a1c      	ldr	r2, [pc, #112]	; (80025a8 <HAL_ADC_Init+0x27c>)
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10b      	bne.n	8002556 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	2203      	movs	r2, #3
 800254a:	4393      	bics	r3, r2
 800254c:	2201      	movs	r2, #1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002554:	e01c      	b.n	8002590 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	2212      	movs	r2, #18
 800255c:	4393      	bics	r3, r2
 800255e:	2210      	movs	r2, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	2201      	movs	r2, #1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002572:	230f      	movs	r3, #15
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800257a:	e009      	b.n	8002590 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	2210      	movs	r2, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002590:	230f      	movs	r3, #15
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	fffffefd 	.word	0xfffffefd
 80025a4:	fffe0219 	.word	0xfffe0219
 80025a8:	833fffe7 	.word	0x833fffe7

080025ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2317      	movs	r3, #23
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	d15e      	bne.n	800268a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2234      	movs	r2, #52	; 0x34
 80025d0:	5c9b      	ldrb	r3, [r3, r2]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Start_DMA+0x2e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e05e      	b.n	8002698 <HAL_ADC_Start_DMA+0xec>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2234      	movs	r2, #52	; 0x34
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	7e5b      	ldrb	r3, [r3, #25]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80025ea:	2317      	movs	r3, #23
 80025ec:	18fc      	adds	r4, r7, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f983 	bl	80028fc <ADC_Enable>
 80025f6:	0003      	movs	r3, r0
 80025f8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025fa:	2317      	movs	r3, #23
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d146      	bne.n	8002692 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <HAL_ADC_Start_DMA+0xf4>)
 800260a:	4013      	ands	r3, r2
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0052      	lsls	r2, r2, #1
 8002610:	431a      	orrs	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2234      	movs	r2, #52	; 0x34
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_ADC_Start_DMA+0xf8>)
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_ADC_Start_DMA+0xfc>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_ADC_Start_DMA+0x100>)
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	221c      	movs	r2, #28
 8002642:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2110      	movs	r1, #16
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3340      	adds	r3, #64	; 0x40
 800266e:	0019      	movs	r1, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f000 fcfa 	bl	800306c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2104      	movs	r1, #4
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	e003      	b.n	8002692 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800268a:	2317      	movs	r3, #23
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002692:	2317      	movs	r3, #23
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	781b      	ldrb	r3, [r3, #0]
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b007      	add	sp, #28
 800269e:	bd90      	pop	{r4, r7, pc}
 80026a0:	fffff0fe 	.word	0xfffff0fe
 80026a4:	08002a05 	.word	0x08002a05
 80026a8:	08002ab9 	.word	0x08002ab9
 80026ac:	08002ad7 	.word	0x08002ad7

080026b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	055b      	lsls	r3, r3, #21
 80026fe:	429a      	cmp	r2, r3
 8002700:	d011      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x46>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d00d      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x46>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	2b02      	cmp	r3, #2
 8002710:	d009      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x46>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	2b03      	cmp	r3, #3
 8002718:	d005      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x46>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	2b04      	cmp	r3, #4
 8002720:	d001      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x46>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2234      	movs	r2, #52	; 0x34
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x54>
 8002730:	2302      	movs	r3, #2
 8002732:	e0d0      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1f6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2234      	movs	r2, #52	; 0x34
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2204      	movs	r2, #4
 8002744:	4013      	ands	r3, r2
 8002746:	d000      	beq.n	800274a <HAL_ADC_ConfigChannel+0x6a>
 8002748:	e0b4      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4a64      	ldr	r2, [pc, #400]	; (80028e0 <HAL_ADC_ConfigChannel+0x200>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x76>
 8002754:	e082      	b.n	800285c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	055b      	lsls	r3, r3, #21
 8002774:	429a      	cmp	r2, r3
 8002776:	d037      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d033      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2b02      	cmp	r3, #2
 8002786:	d02f      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	2b03      	cmp	r3, #3
 800278e:	d02b      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	2b04      	cmp	r3, #4
 8002796:	d027      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b05      	cmp	r3, #5
 800279e:	d023      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d01f      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	2b07      	cmp	r3, #7
 80027ae:	d01b      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2107      	movs	r1, #7
 80027bc:	400b      	ands	r3, r1
 80027be:	429a      	cmp	r2, r3
 80027c0:	d012      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2107      	movs	r1, #7
 80027ce:	438a      	bics	r2, r1
 80027d0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6959      	ldr	r1, [r3, #20]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2207      	movs	r2, #7
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d007      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x120>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b11      	cmp	r3, #17
 80027f6:	d003      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x120>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b12      	cmp	r3, #18
 80027fe:	d163      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002800:	4b38      	ldr	r3, [pc, #224]	; (80028e4 <HAL_ADC_ConfigChannel+0x204>)
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b10      	cmp	r3, #16
 800280a:	d009      	beq.n	8002820 <HAL_ADC_ConfigChannel+0x140>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b11      	cmp	r3, #17
 8002812:	d102      	bne.n	800281a <HAL_ADC_ConfigChannel+0x13a>
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	03db      	lsls	r3, r3, #15
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x144>
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	045b      	lsls	r3, r3, #17
 800281e:	e001      	b.n	8002824 <HAL_ADC_ConfigChannel+0x144>
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_ADC_ConfigChannel+0x204>)
 8002826:	430b      	orrs	r3, r1
 8002828:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b10      	cmp	r3, #16
 8002830:	d14a      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_ADC_ConfigChannel+0x208>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	492d      	ldr	r1, [pc, #180]	; (80028ec <HAL_ADC_ConfigChannel+0x20c>)
 8002838:	0018      	movs	r0, r3
 800283a:	f7fd fc63 	bl	8000104 <__udivsi3>
 800283e:	0003      	movs	r3, r0
 8002840:	001a      	movs	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	189b      	adds	r3, r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800284c:	e002      	b.n	8002854 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_ConfigChannel+0x16e>
 800285a:	e035      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2101      	movs	r1, #1
 8002868:	4099      	lsls	r1, r3
 800286a:	000b      	movs	r3, r1
 800286c:	43d9      	mvns	r1, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b10      	cmp	r3, #16
 800287c:	d007      	beq.n	800288e <HAL_ADC_ConfigChannel+0x1ae>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b11      	cmp	r3, #17
 8002884:	d003      	beq.n	800288e <HAL_ADC_ConfigChannel+0x1ae>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b12      	cmp	r3, #18
 800288c:	d11c      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_ADC_ConfigChannel+0x204>)
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d007      	beq.n	80028aa <HAL_ADC_ConfigChannel+0x1ca>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b11      	cmp	r3, #17
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x1c6>
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_ADC_ConfigChannel+0x210>)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1cc>
 80028a6:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <HAL_ADC_ConfigChannel+0x214>)
 80028a8:	e000      	b.n	80028ac <HAL_ADC_ConfigChannel+0x1cc>
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_ADC_ConfigChannel+0x218>)
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <HAL_ADC_ConfigChannel+0x204>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e009      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	2220      	movs	r2, #32
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80028c0:	230f      	movs	r3, #15
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2234      	movs	r2, #52	; 0x34
 80028cc:	2100      	movs	r1, #0
 80028ce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80028d0:	230f      	movs	r3, #15
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	00001001 	.word	0x00001001
 80028e4:	40012708 	.word	0x40012708
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	000f4240 	.word	0x000f4240
 80028f0:	ffbfffff 	.word	0xffbfffff
 80028f4:	feffffff 	.word	0xfeffffff
 80028f8:	ff7fffff 	.word	0xff7fffff

080028fc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2203      	movs	r2, #3
 8002914:	4013      	ands	r3, r2
 8002916:	2b01      	cmp	r3, #1
 8002918:	d112      	bne.n	8002940 <ADC_Enable+0x44>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	2b01      	cmp	r3, #1
 8002926:	d009      	beq.n	800293c <ADC_Enable+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	401a      	ands	r2, r3
 8002934:	2380      	movs	r3, #128	; 0x80
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	429a      	cmp	r2, r3
 800293a:	d101      	bne.n	8002940 <ADC_Enable+0x44>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <ADC_Enable+0x46>
 8002940:	2300      	movs	r3, #0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d152      	bne.n	80029ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <ADC_Enable+0xfc>)
 800294e:	4013      	ands	r3, r2
 8002950:	d00d      	beq.n	800296e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	2210      	movs	r2, #16
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	2201      	movs	r2, #1
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e03f      	b.n	80029ee <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <ADC_Enable+0x100>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	491f      	ldr	r1, [pc, #124]	; (8002a00 <ADC_Enable+0x104>)
 8002984:	0018      	movs	r0, r3
 8002986:	f7fd fbbd 	bl	8000104 <__udivsi3>
 800298a:	0003      	movs	r3, r0
 800298c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800298e:	e002      	b.n	8002996 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	3b01      	subs	r3, #1
 8002994:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800299c:	f7ff fc98 	bl	80022d0 <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029a4:	e01b      	b.n	80029de <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029a6:	f7ff fc93 	bl	80022d0 <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d914      	bls.n	80029de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d00d      	beq.n	80029de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	2210      	movs	r2, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	2201      	movs	r2, #1
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e007      	b.n	80029ee <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2201      	movs	r2, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d1dc      	bne.n	80029a6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b004      	add	sp, #16
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	80000017 	.word	0x80000017
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	000f4240 	.word	0x000f4240

08002a04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	2250      	movs	r2, #80	; 0x50
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d140      	bne.n	8002a9e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	23c0      	movs	r3, #192	; 0xc0
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4013      	ands	r3, r2
 8002a36:	d12d      	bne.n	8002a94 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d129      	bne.n	8002a94 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2208      	movs	r2, #8
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d122      	bne.n	8002a94 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2204      	movs	r2, #4
 8002a56:	4013      	ands	r3, r2
 8002a58:	d110      	bne.n	8002a7c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	210c      	movs	r1, #12
 8002a66:	438a      	bics	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <ADC_DMAConvCplt+0xb0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	2201      	movs	r2, #1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
 8002a7a:	e00b      	b.n	8002a94 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	2220      	movs	r2, #32
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7ff fe0a 	bl	80026b0 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002a9c:	e005      	b.n	8002aaa <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	4798      	blx	r3
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	fffffefe 	.word	0xfffffefe

08002ab8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff fdf9 	bl	80026c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	2240      	movs	r2, #64	; 0x40
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	2204      	movs	r2, #4
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fde6 	bl	80026d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b004      	add	sp, #16
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0f0      	b.n	8002d00 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	5c9b      	ldrb	r3, [r3, r2]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fad3 	bl	80020d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b42:	f7ff fbc5 	bl	80022d0 <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b4a:	e013      	b.n	8002b74 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b4c:	f7ff fbc0 	bl	80022d0 <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	d90c      	bls.n	8002b74 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	0292      	lsls	r2, r2, #10
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0c5      	b.n	8002d00 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d0e5      	beq.n	8002b4c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b90:	f7ff fb9e 	bl	80022d0 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b98:	e013      	b.n	8002bc2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b9a:	f7ff fb99 	bl	80022d0 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b0a      	cmp	r3, #10
 8002ba6:	d90c      	bls.n	8002bc2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	0292      	lsls	r2, r2, #10
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	2105      	movs	r1, #5
 8002bbc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e09e      	b.n	8002d00 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d1e5      	bne.n	8002b9a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7e1b      	ldrb	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d108      	bne.n	8002be8 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e007      	b.n	8002bf8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e5b      	ldrb	r3, [r3, #25]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e007      	b.n	8002c22 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	438a      	bics	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7e9b      	ldrb	r3, [r3, #26]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2120      	movs	r1, #32
 8002c36:	430a      	orrs	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2120      	movs	r1, #32
 8002c48:	438a      	bics	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7edb      	ldrb	r3, [r3, #27]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2110      	movs	r1, #16
 8002c60:	438a      	bics	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e007      	b.n	8002c76 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2110      	movs	r1, #16
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7f1b      	ldrb	r3, [r3, #28]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2108      	movs	r1, #8
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7f5b      	ldrb	r3, [r3, #29]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	438a      	bics	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	0011      	movs	r1, r2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	1e5a      	subs	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d12f      	bne.n	8002d7c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	2102      	movs	r1, #2
 8002d22:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2101      	movs	r1, #1
 8002d30:	438a      	bics	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d34:	f7ff facc 	bl	80022d0 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d3c:	e013      	b.n	8002d66 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d3e:	f7ff fac7 	bl	80022d0 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b0a      	cmp	r3, #10
 8002d4a:	d90c      	bls.n	8002d66 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	0292      	lsls	r2, r2, #10
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	2105      	movs	r1, #5
 8002d60:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e012      	b.n	8002d8c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d1e5      	bne.n	8002d3e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e007      	b.n	8002d8c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	0312      	lsls	r2, r2, #12
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
  }
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_CAN_WakeUp+0x88>)
 8002da2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002da4:	2013      	movs	r0, #19
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	2120      	movs	r1, #32
 8002dac:	5c52      	ldrb	r2, [r2, r1]
 8002dae:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002db0:	0002      	movs	r2, r0
 8002db2:	18bb      	adds	r3, r7, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d003      	beq.n	8002dc2 <HAL_CAN_WakeUp+0x2e>
 8002dba:	18bb      	adds	r3, r7, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d11f      	bne.n	8002e02 <HAL_CAN_WakeUp+0x6e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2102      	movs	r1, #2
 8002dce:	438a      	bics	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d208      	bcs.n	8002df2 <HAL_CAN_WakeUp+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	0292      	lsls	r2, r2, #10
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <HAL_CAN_WakeUp+0x7e>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d1e9      	bne.n	8002dd2 <HAL_CAN_WakeUp+0x3e>

    /* Return function status */
    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e007      	b.n	8002e12 <HAL_CAN_WakeUp+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	02d2      	lsls	r2, r2, #11
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
  }
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b006      	add	sp, #24
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	000f4240 	.word	0x000f4240

08002e20 <__NVIC_EnableIRQ>:
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	0002      	movs	r2, r0
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	1dfb      	adds	r3, r7, #7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b7f      	cmp	r3, #127	; 0x7f
 8002e32:	d809      	bhi.n	8002e48 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	001a      	movs	r2, r3
 8002e3a:	231f      	movs	r3, #31
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_EnableIRQ+0x30>)
 8002e40:	2101      	movs	r1, #1
 8002e42:	4091      	lsls	r1, r2
 8002e44:	000a      	movs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b7f      	cmp	r3, #127	; 0x7f
 8002e68:	d828      	bhi.n	8002ebc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <__NVIC_SetPriority+0xd4>)
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	33c0      	adds	r3, #192	; 0xc0
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	589b      	ldr	r3, [r3, r2]
 8002e7a:	1dfa      	adds	r2, r7, #7
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	2203      	movs	r2, #3
 8002e82:	400a      	ands	r2, r1
 8002e84:	00d2      	lsls	r2, r2, #3
 8002e86:	21ff      	movs	r1, #255	; 0xff
 8002e88:	4091      	lsls	r1, r2
 8002e8a:	000a      	movs	r2, r1
 8002e8c:	43d2      	mvns	r2, r2
 8002e8e:	401a      	ands	r2, r3
 8002e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	401a      	ands	r2, r3
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	4003      	ands	r3, r0
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ea8:	481f      	ldr	r0, [pc, #124]	; (8002f28 <__NVIC_SetPriority+0xd4>)
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	33c0      	adds	r3, #192	; 0xc0
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	501a      	str	r2, [r3, r0]
}
 8002eba:	e031      	b.n	8002f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <__NVIC_SetPriority+0xd8>)
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	3b08      	subs	r3, #8
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3306      	adds	r3, #6
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1dfa      	adds	r2, r7, #7
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	0011      	movs	r1, r2
 8002edc:	2203      	movs	r2, #3
 8002ede:	400a      	ands	r2, r1
 8002ee0:	00d2      	lsls	r2, r2, #3
 8002ee2:	21ff      	movs	r1, #255	; 0xff
 8002ee4:	4091      	lsls	r1, r2
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	43d2      	mvns	r2, r2
 8002eea:	401a      	ands	r2, r3
 8002eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	22ff      	movs	r2, #255	; 0xff
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	2303      	movs	r3, #3
 8002efe:	4003      	ands	r3, r0
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f04:	4809      	ldr	r0, [pc, #36]	; (8002f2c <__NVIC_SetPriority+0xd8>)
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	001c      	movs	r4, r3
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	4023      	ands	r3, r4
 8002f10:	3b08      	subs	r3, #8
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	430a      	orrs	r2, r1
 8002f16:	3306      	adds	r3, #6
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	18c3      	adds	r3, r0, r3
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b003      	add	sp, #12
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1e5a      	subs	r2, r3, #1
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	045b      	lsls	r3, r3, #17
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d301      	bcc.n	8002f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f44:	2301      	movs	r3, #1
 8002f46:	e010      	b.n	8002f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <SysTick_Config+0x44>)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f50:	2301      	movs	r3, #1
 8002f52:	425b      	negs	r3, r3
 8002f54:	2103      	movs	r1, #3
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7ff ff7c 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <SysTick_Config+0x44>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <SysTick_Config+0x44>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	210f      	movs	r1, #15
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	1c02      	adds	r2, r0, #0
 8002f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	0002      	movs	r2, r0
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	b25b      	sxtb	r3, r3
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff ff33 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff ffaf 	bl	8002f30 <SysTick_Config>
 8002fd2:	0003      	movs	r3, r0
}
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e036      	b.n	8003060 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2221      	movs	r2, #33	; 0x21
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_DMA_Init+0x8c>)
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003012:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f946 	bl	80032d4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	2100      	movs	r1, #0
 800305c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bd80      	pop	{r7, pc}
 8003068:	ffffc00f 	.word	0xffffc00f

0800306c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2317      	movs	r3, #23
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_DMA_Start_IT+0x24>
 800308c:	2302      	movs	r3, #2
 800308e:	e04f      	b.n	8003130 <HAL_DMA_Start_IT+0xc4>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2221      	movs	r2, #33	; 0x21
 800309c:	5c9b      	ldrb	r3, [r3, r2]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d13a      	bne.n	800311a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2221      	movs	r2, #33	; 0x21
 80030a8:	2102      	movs	r1, #2
 80030aa:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	438a      	bics	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f8d7 	bl	800327c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	210e      	movs	r1, #14
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00f      	b.n	8003108 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	210a      	movs	r1, #10
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2104      	movs	r1, #4
 8003104:	438a      	bics	r2, r1
 8003106:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2101      	movs	r1, #1
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e007      	b.n	800312a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003122:	2317      	movs	r3, #23
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2202      	movs	r2, #2
 8003128:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800312a:	2317      	movs	r3, #23
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b006      	add	sp, #24
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2204      	movs	r2, #4
 8003156:	409a      	lsls	r2, r3
 8003158:	0013      	movs	r3, r2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	d024      	beq.n	80031aa <HAL_DMA_IRQHandler+0x72>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2204      	movs	r2, #4
 8003164:	4013      	ands	r3, r2
 8003166:	d020      	beq.n	80031aa <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2220      	movs	r2, #32
 8003170:	4013      	ands	r3, r2
 8003172:	d107      	bne.n	8003184 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2104      	movs	r1, #4
 8003180:	438a      	bics	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2104      	movs	r1, #4
 800318e:	4091      	lsls	r1, r2
 8003190:	000a      	movs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d100      	bne.n	800319e <HAL_DMA_IRQHandler+0x66>
 800319c:	e06a      	b.n	8003274 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	0010      	movs	r0, r2
 80031a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031a8:	e064      	b.n	8003274 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2202      	movs	r2, #2
 80031b0:	409a      	lsls	r2, r3
 80031b2:	0013      	movs	r3, r2
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	d02b      	beq.n	8003212 <HAL_DMA_IRQHandler+0xda>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d027      	beq.n	8003212 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2220      	movs	r2, #32
 80031ca:	4013      	ands	r3, r2
 80031cc:	d10b      	bne.n	80031e6 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	210a      	movs	r1, #10
 80031da:	438a      	bics	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2221      	movs	r2, #33	; 0x21
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	2102      	movs	r1, #2
 80031f0:	4091      	lsls	r1, r2
 80031f2:	000a      	movs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d036      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	0010      	movs	r0, r2
 800320e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003210:	e030      	b.n	8003274 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2208      	movs	r2, #8
 8003218:	409a      	lsls	r2, r3
 800321a:	0013      	movs	r3, r2
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4013      	ands	r3, r2
 8003220:	d028      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13c>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2208      	movs	r2, #8
 8003226:	4013      	ands	r3, r2
 8003228:	d024      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	210e      	movs	r1, #14
 8003236:	438a      	bics	r2, r1
 8003238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	2101      	movs	r1, #1
 8003244:	4091      	lsls	r1, r2
 8003246:	000a      	movs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2221      	movs	r2, #33	; 0x21
 8003254:	2101      	movs	r1, #1
 8003256:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	0010      	movs	r0, r2
 8003270:	4798      	blx	r3
    }
  }
}
 8003272:	e7ff      	b.n	8003274 <HAL_DMA_IRQHandler+0x13c>
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}

0800327c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	2101      	movs	r1, #1
 8003294:	4091      	lsls	r1, r2
 8003296:	000a      	movs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d108      	bne.n	80032bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ba:	e007      	b.n	80032cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	001a      	movs	r2, r3
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <DMA_CalcBaseAndBitshift+0x60>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d810      	bhi.n	800330a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <DMA_CalcBaseAndBitshift+0x64>)
 80032ee:	4694      	mov	ip, r2
 80032f0:	4463      	add	r3, ip
 80032f2:	2114      	movs	r1, #20
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fc ff05 	bl	8000104 <__udivsi3>
 80032fa:	0003      	movs	r3, r0
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0d      	ldr	r2, [pc, #52]	; (800333c <DMA_CalcBaseAndBitshift+0x68>)
 8003306:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003308:	e00f      	b.n	800332a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <DMA_CalcBaseAndBitshift+0x6c>)
 8003310:	4694      	mov	ip, r2
 8003312:	4463      	add	r3, ip
 8003314:	2114      	movs	r1, #20
 8003316:	0018      	movs	r0, r3
 8003318:	f7fc fef4 	bl	8000104 <__udivsi3>
 800331c:	0003      	movs	r3, r0
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <DMA_CalcBaseAndBitshift+0x70>)
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40020407 	.word	0x40020407
 8003338:	bffdfff8 	.word	0xbffdfff8
 800333c:	40020000 	.word	0x40020000
 8003340:	bffdfbf8 	.word	0xbffdfbf8
 8003344:	40020400 	.word	0x40020400

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003356:	e155      	b.n	8003604 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4091      	lsls	r1, r2
 8003362:	000a      	movs	r2, r1
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d100      	bne.n	8003370 <HAL_GPIO_Init+0x28>
 800336e:	e146      	b.n	80035fe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	4013      	ands	r3, r2
 8003378:	2b01      	cmp	r3, #1
 800337a:	d005      	beq.n	8003388 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2203      	movs	r2, #3
 8003382:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003384:	2b02      	cmp	r3, #2
 8003386:	d130      	bne.n	80033ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	409a      	lsls	r2, r3
 8003396:	0013      	movs	r3, r2
 8003398:	43da      	mvns	r2, r3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	409a      	lsls	r2, r3
 80033aa:	0013      	movs	r3, r2
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033be:	2201      	movs	r2, #1
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	409a      	lsls	r2, r3
 80033c4:	0013      	movs	r3, r2
 80033c6:	43da      	mvns	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	2201      	movs	r2, #1
 80033d6:	401a      	ands	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2203      	movs	r2, #3
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d017      	beq.n	8003426 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	409a      	lsls	r2, r3
 8003404:	0013      	movs	r3, r2
 8003406:	43da      	mvns	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	409a      	lsls	r2, r3
 8003418:	0013      	movs	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	4013      	ands	r3, r2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d123      	bne.n	800347a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	0092      	lsls	r2, r2, #2
 800343c:	58d3      	ldr	r3, [r2, r3]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2207      	movs	r2, #7
 8003444:	4013      	ands	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	409a      	lsls	r2, r3
 800344c:	0013      	movs	r3, r2
 800344e:	43da      	mvns	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2107      	movs	r1, #7
 800345e:	400b      	ands	r3, r1
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	409a      	lsls	r2, r3
 8003464:	0013      	movs	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	6939      	ldr	r1, [r7, #16]
 8003478:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	409a      	lsls	r2, r3
 8003488:	0013      	movs	r3, r2
 800348a:	43da      	mvns	r2, r3
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2203      	movs	r2, #3
 8003498:	401a      	ands	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	409a      	lsls	r2, r3
 80034a0:	0013      	movs	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	23c0      	movs	r3, #192	; 0xc0
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	4013      	ands	r3, r2
 80034b8:	d100      	bne.n	80034bc <HAL_GPIO_Init+0x174>
 80034ba:	e0a0      	b.n	80035fe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034bc:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_GPIO_Init+0x2d4>)
 80034be:	699a      	ldr	r2, [r3, #24]
 80034c0:	4b56      	ldr	r3, [pc, #344]	; (800361c <HAL_GPIO_Init+0x2d4>)
 80034c2:	2101      	movs	r1, #1
 80034c4:	430a      	orrs	r2, r1
 80034c6:	619a      	str	r2, [r3, #24]
 80034c8:	4b54      	ldr	r3, [pc, #336]	; (800361c <HAL_GPIO_Init+0x2d4>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2201      	movs	r2, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034d4:	4a52      	ldr	r2, [pc, #328]	; (8003620 <HAL_GPIO_Init+0x2d8>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	589b      	ldr	r3, [r3, r2]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2203      	movs	r2, #3
 80034e6:	4013      	ands	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	409a      	lsls	r2, r3
 80034ee:	0013      	movs	r3, r2
 80034f0:	43da      	mvns	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	2390      	movs	r3, #144	; 0x90
 80034fc:	05db      	lsls	r3, r3, #23
 80034fe:	429a      	cmp	r2, r3
 8003500:	d019      	beq.n	8003536 <HAL_GPIO_Init+0x1ee>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a47      	ldr	r2, [pc, #284]	; (8003624 <HAL_GPIO_Init+0x2dc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x1ea>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <HAL_GPIO_Init+0x2e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00d      	beq.n	800352e <HAL_GPIO_Init+0x1e6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a45      	ldr	r2, [pc, #276]	; (800362c <HAL_GPIO_Init+0x2e4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <HAL_GPIO_Init+0x1e2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a44      	ldr	r2, [pc, #272]	; (8003630 <HAL_GPIO_Init+0x2e8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_GPIO_Init+0x1de>
 8003522:	2304      	movs	r3, #4
 8003524:	e008      	b.n	8003538 <HAL_GPIO_Init+0x1f0>
 8003526:	2305      	movs	r3, #5
 8003528:	e006      	b.n	8003538 <HAL_GPIO_Init+0x1f0>
 800352a:	2303      	movs	r3, #3
 800352c:	e004      	b.n	8003538 <HAL_GPIO_Init+0x1f0>
 800352e:	2302      	movs	r3, #2
 8003530:	e002      	b.n	8003538 <HAL_GPIO_Init+0x1f0>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_GPIO_Init+0x1f0>
 8003536:	2300      	movs	r3, #0
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	2103      	movs	r1, #3
 800353c:	400a      	ands	r2, r1
 800353e:	0092      	lsls	r2, r2, #2
 8003540:	4093      	lsls	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003548:	4935      	ldr	r1, [pc, #212]	; (8003620 <HAL_GPIO_Init+0x2d8>)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	3302      	adds	r3, #2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003556:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	43da      	mvns	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	035b      	lsls	r3, r3, #13
 800356e:	4013      	ands	r3, r2
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003580:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43da      	mvns	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	039b      	lsls	r3, r3, #14
 8003598:	4013      	ands	r3, r2
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80035a4:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	029b      	lsls	r3, r3, #10
 80035c2:	4013      	ands	r3, r2
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43da      	mvns	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	025b      	lsls	r3, r3, #9
 80035ec:	4013      	ands	r3, r2
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3301      	adds	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	40da      	lsrs	r2, r3
 800360c:	1e13      	subs	r3, r2, #0
 800360e:	d000      	beq.n	8003612 <HAL_GPIO_Init+0x2ca>
 8003610:	e6a2      	b.n	8003358 <HAL_GPIO_Init+0x10>
  } 
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b006      	add	sp, #24
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	40010000 	.word	0x40010000
 8003624:	48000400 	.word	0x48000400
 8003628:	48000800 	.word	0x48000800
 800362c:	48000c00 	.word	0x48000c00
 8003630:	48001000 	.word	0x48001000
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	0008      	movs	r0, r1
 8003642:	0011      	movs	r1, r2
 8003644:	1cbb      	adds	r3, r7, #2
 8003646:	1c02      	adds	r2, r0, #0
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	1c7b      	adds	r3, r7, #1
 800364c:	1c0a      	adds	r2, r1, #0
 800364e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003650:	1c7b      	adds	r3, r7, #1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003658:	1cbb      	adds	r3, r7, #2
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003660:	e003      	b.n	800366a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003662:	1cbb      	adds	r3, r7, #2
 8003664:	881a      	ldrh	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	000a      	movs	r2, r1
 800367c:	1cbb      	adds	r3, r7, #2
 800367e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003686:	1cbb      	adds	r3, r7, #2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	041a      	lsls	r2, r3, #16
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	1cb9      	adds	r1, r7, #2
 8003696:	8809      	ldrh	r1, [r1, #0]
 8003698:	400b      	ands	r3, r1
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b004      	add	sp, #16
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f000 fb76 	bl	8003da8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	d100      	bne.n	80036c8 <HAL_RCC_OscConfig+0x20>
 80036c6:	e08e      	b.n	80037e6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036c8:	4bc5      	ldr	r3, [pc, #788]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	220c      	movs	r2, #12
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d00e      	beq.n	80036f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d4:	4bc2      	ldr	r3, [pc, #776]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	220c      	movs	r2, #12
 80036da:	4013      	ands	r3, r2
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d117      	bne.n	8003710 <HAL_RCC_OscConfig+0x68>
 80036e0:	4bbf      	ldr	r3, [pc, #764]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	23c0      	movs	r3, #192	; 0xc0
 80036e6:	025b      	lsls	r3, r3, #9
 80036e8:	401a      	ands	r2, r3
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	025b      	lsls	r3, r3, #9
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10e      	bne.n	8003710 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f2:	4bbb      	ldr	r3, [pc, #748]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	4013      	ands	r3, r2
 80036fc:	d100      	bne.n	8003700 <HAL_RCC_OscConfig+0x58>
 80036fe:	e071      	b.n	80037e4 <HAL_RCC_OscConfig+0x13c>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d000      	beq.n	800370a <HAL_RCC_OscConfig+0x62>
 8003708:	e06c      	b.n	80037e4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f000 fb4c 	bl	8003da8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x80>
 8003718:	4bb1      	ldr	r3, [pc, #708]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4bb0      	ldr	r3, [pc, #704]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	0249      	lsls	r1, r1, #9
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e02f      	b.n	8003788 <HAL_RCC_OscConfig+0xe0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10c      	bne.n	800374a <HAL_RCC_OscConfig+0xa2>
 8003730:	4bab      	ldr	r3, [pc, #684]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4baa      	ldr	r3, [pc, #680]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003736:	49ab      	ldr	r1, [pc, #684]	; (80039e4 <HAL_RCC_OscConfig+0x33c>)
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	4ba8      	ldr	r3, [pc, #672]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4ba7      	ldr	r3, [pc, #668]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003742:	49a9      	ldr	r1, [pc, #676]	; (80039e8 <HAL_RCC_OscConfig+0x340>)
 8003744:	400a      	ands	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e01e      	b.n	8003788 <HAL_RCC_OscConfig+0xe0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d10e      	bne.n	8003770 <HAL_RCC_OscConfig+0xc8>
 8003752:	4ba3      	ldr	r3, [pc, #652]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4ba2      	ldr	r3, [pc, #648]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	02c9      	lsls	r1, r1, #11
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	4b9f      	ldr	r3, [pc, #636]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b9e      	ldr	r3, [pc, #632]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003766:	2180      	movs	r1, #128	; 0x80
 8003768:	0249      	lsls	r1, r1, #9
 800376a:	430a      	orrs	r2, r1
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xe0>
 8003770:	4b9b      	ldr	r3, [pc, #620]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b9a      	ldr	r3, [pc, #616]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003776:	499b      	ldr	r1, [pc, #620]	; (80039e4 <HAL_RCC_OscConfig+0x33c>)
 8003778:	400a      	ands	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	4b98      	ldr	r3, [pc, #608]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b97      	ldr	r3, [pc, #604]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003782:	4999      	ldr	r1, [pc, #612]	; (80039e8 <HAL_RCC_OscConfig+0x340>)
 8003784:	400a      	ands	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d014      	beq.n	80037ba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe fd9e 	bl	80022d0 <HAL_GetTick>
 8003794:	0003      	movs	r3, r0
 8003796:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379a:	f7fe fd99 	bl	80022d0 <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b64      	cmp	r3, #100	; 0x64
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e2fd      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ac:	4b8c      	ldr	r3, [pc, #560]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	029b      	lsls	r3, r3, #10
 80037b4:	4013      	ands	r3, r2
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0xf2>
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe fd89 	bl	80022d0 <HAL_GetTick>
 80037be:	0003      	movs	r3, r0
 80037c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fe fd84 	bl	80022d0 <HAL_GetTick>
 80037c8:	0002      	movs	r2, r0
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e2e8      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b82      	ldr	r3, [pc, #520]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	029b      	lsls	r3, r3, #10
 80037de:	4013      	ands	r3, r2
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x11c>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2202      	movs	r2, #2
 80037ec:	4013      	ands	r3, r2
 80037ee:	d100      	bne.n	80037f2 <HAL_RCC_OscConfig+0x14a>
 80037f0:	e06c      	b.n	80038cc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037f2:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	220c      	movs	r2, #12
 80037f8:	4013      	ands	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037fc:	4b78      	ldr	r3, [pc, #480]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	220c      	movs	r2, #12
 8003802:	4013      	ands	r3, r2
 8003804:	2b08      	cmp	r3, #8
 8003806:	d11f      	bne.n	8003848 <HAL_RCC_OscConfig+0x1a0>
 8003808:	4b75      	ldr	r3, [pc, #468]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	23c0      	movs	r3, #192	; 0xc0
 800380e:	025b      	lsls	r3, r3, #9
 8003810:	401a      	ands	r2, r3
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	429a      	cmp	r2, r3
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b71      	ldr	r3, [pc, #452]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x188>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d001      	beq.n	8003830 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e2bb      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b6b      	ldr	r3, [pc, #428]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	22f8      	movs	r2, #248	; 0xf8
 8003836:	4393      	bics	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00da      	lsls	r2, r3, #3
 8003840:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003842:	430a      	orrs	r2, r1
 8003844:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e041      	b.n	80038cc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d024      	beq.n	800389a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b62      	ldr	r3, [pc, #392]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003856:	2101      	movs	r1, #1
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385c:	f7fe fd38 	bl	80022d0 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7fe fd33 	bl	80022d0 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e297      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d0f1      	beq.n	8003866 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	4b57      	ldr	r3, [pc, #348]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	22f8      	movs	r2, #248	; 0xf8
 8003888:	4393      	bics	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00da      	lsls	r2, r3, #3
 8003892:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e018      	b.n	80038cc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80038a0:	2101      	movs	r1, #1
 80038a2:	438a      	bics	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe fd13 	bl	80022d0 <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fe fd0e 	bl	80022d0 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e272      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d1f1      	bne.n	80038b0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	4013      	ands	r3, r2
 80038d4:	d036      	beq.n	8003944 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d019      	beq.n	8003912 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038de:	4b40      	ldr	r3, [pc, #256]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80038e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	430a      	orrs	r2, r1
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe fcf1 	bl	80022d0 <HAL_GetTick>
 80038ee:	0003      	movs	r3, r0
 80038f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fcec 	bl	80022d0 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e250      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2202      	movs	r2, #2
 800390c:	4013      	ands	r3, r2
 800390e:	d0f1      	beq.n	80038f4 <HAL_RCC_OscConfig+0x24c>
 8003910:	e018      	b.n	8003944 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003912:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003916:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003918:	2101      	movs	r1, #1
 800391a:	438a      	bics	r2, r1
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fcd7 	bl	80022d0 <HAL_GetTick>
 8003922:	0003      	movs	r3, r0
 8003924:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe fcd2 	bl	80022d0 <HAL_GetTick>
 800392c:	0002      	movs	r2, r0
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e236      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d1f1      	bne.n	8003928 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2204      	movs	r2, #4
 800394a:	4013      	ands	r3, r2
 800394c:	d100      	bne.n	8003950 <HAL_RCC_OscConfig+0x2a8>
 800394e:	e0b5      	b.n	8003abc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003950:	201f      	movs	r0, #31
 8003952:	183b      	adds	r3, r7, r0
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003958:	4b21      	ldr	r3, [pc, #132]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	055b      	lsls	r3, r3, #21
 8003960:	4013      	ands	r3, r2
 8003962:	d110      	bne.n	8003986 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	0549      	lsls	r1, r1, #21
 800396e:	430a      	orrs	r2, r1
 8003970:	61da      	str	r2, [r3, #28]
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 8003974:	69da      	ldr	r2, [r3, #28]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	055b      	lsls	r3, r3, #21
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003980:	183b      	adds	r3, r7, r0
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_OscConfig+0x344>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_RCC_OscConfig+0x344>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <HAL_RCC_OscConfig+0x344>)
 8003998:	2180      	movs	r1, #128	; 0x80
 800399a:	0049      	lsls	r1, r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fe fc96 	bl	80022d0 <HAL_GetTick>
 80039a4:	0003      	movs	r3, r0
 80039a6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fe fc91 	bl	80022d0 <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	; 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e1f5      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x344>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10f      	bne.n	80039f0 <HAL_RCC_OscConfig+0x348>
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <HAL_RCC_OscConfig+0x338>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	430a      	orrs	r2, r1
 80039da:	621a      	str	r2, [r3, #32]
 80039dc:	e036      	b.n	8003a4c <HAL_RCC_OscConfig+0x3a4>
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	40021000 	.word	0x40021000
 80039e4:	fffeffff 	.word	0xfffeffff
 80039e8:	fffbffff 	.word	0xfffbffff
 80039ec:	40007000 	.word	0x40007000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10c      	bne.n	8003a12 <HAL_RCC_OscConfig+0x36a>
 80039f8:	4bca      	ldr	r3, [pc, #808]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	4bc9      	ldr	r3, [pc, #804]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 80039fe:	2101      	movs	r1, #1
 8003a00:	438a      	bics	r2, r1
 8003a02:	621a      	str	r2, [r3, #32]
 8003a04:	4bc7      	ldr	r3, [pc, #796]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	4bc6      	ldr	r3, [pc, #792]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	438a      	bics	r2, r1
 8003a0e:	621a      	str	r2, [r3, #32]
 8003a10:	e01c      	b.n	8003a4c <HAL_RCC_OscConfig+0x3a4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x38c>
 8003a1a:	4bc2      	ldr	r3, [pc, #776]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	4bc1      	ldr	r3, [pc, #772]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a20:	2104      	movs	r1, #4
 8003a22:	430a      	orrs	r2, r1
 8003a24:	621a      	str	r2, [r3, #32]
 8003a26:	4bbf      	ldr	r3, [pc, #764]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	4bbe      	ldr	r3, [pc, #760]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	621a      	str	r2, [r3, #32]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x3a4>
 8003a34:	4bbb      	ldr	r3, [pc, #748]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	4bba      	ldr	r3, [pc, #744]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	621a      	str	r2, [r3, #32]
 8003a40:	4bb8      	ldr	r3, [pc, #736]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	4bb7      	ldr	r3, [pc, #732]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a46:	2104      	movs	r1, #4
 8003a48:	438a      	bics	r2, r1
 8003a4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d014      	beq.n	8003a7e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fe fc3c 	bl	80022d0 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5c:	e009      	b.n	8003a72 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fe fc37 	bl	80022d0 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	4aaf      	ldr	r2, [pc, #700]	; (8003d28 <HAL_RCC_OscConfig+0x680>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e19a      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	4bac      	ldr	r3, [pc, #688]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x3b6>
 8003a7c:	e013      	b.n	8003aa6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fc27 	bl	80022d0 <HAL_GetTick>
 8003a82:	0003      	movs	r3, r0
 8003a84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a86:	e009      	b.n	8003a9c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fe fc22 	bl	80022d0 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	4aa5      	ldr	r2, [pc, #660]	; (8003d28 <HAL_RCC_OscConfig+0x680>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e185      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	4ba1      	ldr	r3, [pc, #644]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aa6:	231f      	movs	r3, #31
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b9c      	ldr	r3, [pc, #624]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	4b9b      	ldr	r3, [pc, #620]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ab6:	499d      	ldr	r1, [pc, #628]	; (8003d2c <HAL_RCC_OscConfig+0x684>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d063      	beq.n	8003b8e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d12a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ace:	4b95      	ldr	r3, [pc, #596]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ad2:	4b94      	ldr	r3, [pc, #592]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ada:	4b92      	ldr	r3, [pc, #584]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ade:	4b91      	ldr	r3, [pc, #580]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fbf3 	bl	80022d0 <HAL_GetTick>
 8003aea:	0003      	movs	r3, r0
 8003aec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003af0:	f7fe fbee 	bl	80022d0 <HAL_GetTick>
 8003af4:	0002      	movs	r2, r0
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e152      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b02:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	2202      	movs	r2, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d0f1      	beq.n	8003af0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b0c:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	22f8      	movs	r2, #248	; 0xf8
 8003b12:	4393      	bics	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	00da      	lsls	r2, r3, #3
 8003b1c:	4b81      	ldr	r3, [pc, #516]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	635a      	str	r2, [r3, #52]	; 0x34
 8003b22:	e034      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	3305      	adds	r3, #5
 8003b2a:	d111      	bne.n	8003b50 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b2c:	4b7d      	ldr	r3, [pc, #500]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b30:	4b7c      	ldr	r3, [pc, #496]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b32:	2104      	movs	r1, #4
 8003b34:	438a      	bics	r2, r1
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b38:	4b7a      	ldr	r3, [pc, #488]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	22f8      	movs	r2, #248	; 0xf8
 8003b3e:	4393      	bics	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	00da      	lsls	r2, r3, #3
 8003b48:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4e:	e01e      	b.n	8003b8e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b50:	4b74      	ldr	r3, [pc, #464]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b54:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b56:	2104      	movs	r1, #4
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b5c:	4b71      	ldr	r3, [pc, #452]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b60:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b62:	2101      	movs	r1, #1
 8003b64:	438a      	bics	r2, r1
 8003b66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b68:	f7fe fbb2 	bl	80022d0 <HAL_GetTick>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b72:	f7fe fbad 	bl	80022d0 <HAL_GetTick>
 8003b76:	0002      	movs	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e111      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b84:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	2202      	movs	r2, #2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d1f1      	bne.n	8003b72 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2220      	movs	r2, #32
 8003b94:	4013      	ands	r3, r2
 8003b96:	d05c      	beq.n	8003c52 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003b98:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003ba4:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	220c      	movs	r2, #12
 8003baa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d114      	bne.n	8003bda <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003bb0:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	23c0      	movs	r3, #192	; 0xc0
 8003bb6:	025b      	lsls	r3, r3, #9
 8003bb8:	401a      	ands	r2, r3
 8003bba:	23c0      	movs	r3, #192	; 0xc0
 8003bbc:	025b      	lsls	r3, r3, #9
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d10b      	bne.n	8003bda <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003bc2:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d040      	beq.n	8003c50 <HAL_RCC_OscConfig+0x5a8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d03c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0e6      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003be2:	4b50      	ldr	r3, [pc, #320]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be6:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	0249      	lsls	r1, r1, #9
 8003bec:	430a      	orrs	r2, r1
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fb6e 	bl	80022d0 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfa:	f7fe fb69 	bl	80022d0 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0cd      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c0c:	4b45      	ldr	r3, [pc, #276]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	4013      	ands	r3, r2
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x552>
 8003c18:	e01b      	b.n	8003c52 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c20:	4943      	ldr	r1, [pc, #268]	; (8003d30 <HAL_RCC_OscConfig+0x688>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe fb53 	bl	80022d0 <HAL_GetTick>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c30:	f7fe fb4e 	bl	80022d0 <HAL_GetTick>
 8003c34:	0002      	movs	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e0b2      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x588>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003c50:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d100      	bne.n	8003c5c <HAL_RCC_OscConfig+0x5b4>
 8003c5a:	e0a4      	b.n	8003da6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	220c      	movs	r2, #12
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d100      	bne.n	8003c6a <HAL_RCC_OscConfig+0x5c2>
 8003c68:	e078      	b.n	8003d5c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d14c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c78:	492e      	ldr	r1, [pc, #184]	; (8003d34 <HAL_RCC_OscConfig+0x68c>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fb27 	bl	80022d0 <HAL_GetTick>
 8003c82:	0003      	movs	r3, r0
 8003c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fb22 	bl	80022d0 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e086      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	049b      	lsls	r3, r3, #18
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	220f      	movs	r2, #15
 8003cac:	4393      	bics	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a1e      	ldr	r2, [pc, #120]	; (8003d38 <HAL_RCC_OscConfig+0x690>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	0449      	lsls	r1, r1, #17
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fe faf5 	bl	80022d0 <HAL_GetTick>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe faf0 	bl	80022d0 <HAL_GetTick>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e054      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	049b      	lsls	r3, r3, #18
 8003d06:	4013      	ands	r3, r2
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x644>
 8003d0a:	e04c      	b.n	8003da6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCC_OscConfig+0x67c>)
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <HAL_RCC_OscConfig+0x68c>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fe fada 	bl	80022d0 <HAL_GetTick>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x6a6>
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40021000 	.word	0x40021000
 8003d28:	00001388 	.word	0x00001388
 8003d2c:	efffffff 	.word	0xefffffff
 8003d30:	fffeffff 	.word	0xfffeffff
 8003d34:	feffffff 	.word	0xfeffffff
 8003d38:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fe fac8 	bl	80022d0 <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e02c      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4e:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_RCC_OscConfig+0x708>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	049b      	lsls	r3, r3, #18
 8003d56:	4013      	ands	r3, r2
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x694>
 8003d5a:	e024      	b.n	8003da6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e01f      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <HAL_RCC_OscConfig+0x708>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_RCC_OscConfig+0x708>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	23c0      	movs	r3, #192	; 0xc0
 8003d78:	025b      	lsls	r3, r3, #9
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d10e      	bne.n	8003da2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	220f      	movs	r2, #15
 8003d88:	401a      	ands	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	23f0      	movs	r3, #240	; 0xf0
 8003d96:	039b      	lsls	r3, r3, #14
 8003d98:	401a      	ands	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b008      	add	sp, #32
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0bf      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4013      	ands	r3, r2
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d911      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4393      	bics	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2201      	movs	r2, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0a6      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	d015      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d006      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e0e:	4b51      	ldr	r3, [pc, #324]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e14:	21e0      	movs	r1, #224	; 0xe0
 8003e16:	00c9      	lsls	r1, r1, #3
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e1c:	4b4d      	ldr	r3, [pc, #308]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	22f0      	movs	r2, #240	; 0xf0
 8003e22:	4393      	bics	r3, r2
 8003e24:	0019      	movs	r1, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	d04c      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b44      	ldr	r3, [pc, #272]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d120      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e07a      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	049b      	lsls	r3, r3, #18
 8003e62:	4013      	ands	r3, r2
 8003e64:	d114      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06e      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003e72:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	029b      	lsls	r3, r3, #10
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e062      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e05b      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e90:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2203      	movs	r2, #3
 8003e96:	4393      	bics	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fe fa14 	bl	80022d0 <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eac:	e009      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eae:	f7fe fa0f 	bl	80022d0 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <HAL_RCC_ClockConfig+0x1a4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e042      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	220c      	movs	r2, #12
 8003ec8:	401a      	ands	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1ec      	bne.n	8003eae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d211      	bcs.n	8003f06 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4393      	bics	r3, r2
 8003eea:	0019      	movs	r1, r3
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef4:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <HAL_RCC_ClockConfig+0x19c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e020      	b.n	8003f48 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_RCC_ClockConfig+0x1a8>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f24:	f000 f820 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f28:	0001      	movs	r1, r0
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1a0>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	220f      	movs	r2, #15
 8003f32:	4013      	ands	r3, r2
 8003f34:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <HAL_RCC_ClockConfig+0x1ac>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	000a      	movs	r2, r1
 8003f3a:	40da      	lsrs	r2, r3
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1b0>)
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003f40:	2003      	movs	r0, #3
 8003f42:	f7fe f97f 	bl	8002244 <HAL_InitTick>
  
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b004      	add	sp, #16
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40021000 	.word	0x40021000
 8003f58:	00001388 	.word	0x00001388
 8003f5c:	fffff8ff 	.word	0xfffff8ff
 8003f60:	080040fc 	.word	0x080040fc
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f82:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	220c      	movs	r2, #12
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d046      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0xb8>
 8003f92:	d848      	bhi.n	8004026 <HAL_RCC_GetSysClockFreq+0xbe>
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d002      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x36>
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x3c>
 8003f9c:	e043      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f9e:	4b27      	ldr	r3, [pc, #156]	; (800403c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003fa0:	613b      	str	r3, [r7, #16]
      break;
 8003fa2:	e043      	b.n	800402c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	0c9b      	lsrs	r3, r3, #18
 8003fa8:	220f      	movs	r2, #15
 8003faa:	4013      	ands	r3, r2
 8003fac:	4a24      	ldr	r2, [pc, #144]	; (8004040 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003fae:	5cd3      	ldrb	r3, [r2, r3]
 8003fb0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	4013      	ands	r3, r2
 8003fba:	4a22      	ldr	r2, [pc, #136]	; (8004044 <HAL_RCC_GetSysClockFreq+0xdc>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	23c0      	movs	r3, #192	; 0xc0
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	025b      	lsls	r3, r3, #9
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d109      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	481a      	ldr	r0, [pc, #104]	; (800403c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003fd4:	f7fc f896 	bl	8000104 <__udivsi3>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	001a      	movs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4353      	muls	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e01a      	b.n	800401a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	23c0      	movs	r3, #192	; 0xc0
 8003fe8:	025b      	lsls	r3, r3, #9
 8003fea:	401a      	ands	r2, r3
 8003fec:	23c0      	movs	r3, #192	; 0xc0
 8003fee:	025b      	lsls	r3, r3, #9
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d109      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	4814      	ldr	r0, [pc, #80]	; (8004048 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003ff8:	f7fc f884 	bl	8000104 <__udivsi3>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	001a      	movs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4353      	muls	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e008      	b.n	800401a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	480c      	ldr	r0, [pc, #48]	; (800403c <HAL_RCC_GetSysClockFreq+0xd4>)
 800400c:	f7fc f87a 	bl	8000104 <__udivsi3>
 8004010:	0003      	movs	r3, r0
 8004012:	001a      	movs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4353      	muls	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	613b      	str	r3, [r7, #16]
      break;
 800401e:	e005      	b.n	800402c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004022:	613b      	str	r3, [r7, #16]
      break;
 8004024:	e002      	b.n	800402c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004028:	613b      	str	r3, [r7, #16]
      break;
 800402a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800402c:	693b      	ldr	r3, [r7, #16]
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b006      	add	sp, #24
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	40021000 	.word	0x40021000
 800403c:	007a1200 	.word	0x007a1200
 8004040:	0800410c 	.word	0x0800410c
 8004044:	0800411c 	.word	0x0800411c
 8004048:	02dc6c00 	.word	0x02dc6c00

0800404c <memset>:
 800404c:	0003      	movs	r3, r0
 800404e:	1882      	adds	r2, r0, r2
 8004050:	4293      	cmp	r3, r2
 8004052:	d100      	bne.n	8004056 <memset+0xa>
 8004054:	4770      	bx	lr
 8004056:	7019      	strb	r1, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	e7f9      	b.n	8004050 <memset+0x4>

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	2600      	movs	r6, #0
 8004060:	4c0c      	ldr	r4, [pc, #48]	; (8004094 <__libc_init_array+0x38>)
 8004062:	4d0d      	ldr	r5, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004064:	1b64      	subs	r4, r4, r5
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	2600      	movs	r6, #0
 800406e:	f000 f819 	bl	80040a4 <_init>
 8004072:	4c0a      	ldr	r4, [pc, #40]	; (800409c <__libc_init_array+0x40>)
 8004074:	4d0a      	ldr	r5, [pc, #40]	; (80040a0 <__libc_init_array+0x44>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	00b3      	lsls	r3, r6, #2
 8004082:	58eb      	ldr	r3, [r5, r3]
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	00b3      	lsls	r3, r6, #2
 800408c:	58eb      	ldr	r3, [r5, r3]
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	0800412c 	.word	0x0800412c
 8004098:	0800412c 	.word	0x0800412c
 800409c:	08004130 	.word	0x08004130
 80040a0:	0800412c 	.word	0x0800412c

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
