
SW_beckyHV_DeV18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008330  08008330  00018330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008440  08008440  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08008440  08008440  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008440  08008440  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008448  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000088  080084d0  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080084d0  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027a3a  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ac  00000000  00000000  00047b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004f70  00000000  00000000  00049de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003c94  00000000  00000000  0004ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dba9  00000000  00000000  000529e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000226e8  00000000  00000000  0007058d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c930e  00000000  00000000  00092c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000145e0  00000000  00000000  0015bf84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00170564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008314 	.word	0x08008314

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08008314 	.word	0x08008314

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f8e7 	bl	80015e8 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f837 	bl	8001498 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f8d9 	bl	80015e8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8cf 	bl	80015e8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f85f 	bl	800151c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f855 	bl	800151c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_d2uiz>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	2200      	movs	r2, #0
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <__aeabi_d2uiz+0x38>)
 8000486:	0004      	movs	r4, r0
 8000488:	000d      	movs	r5, r1
 800048a:	f7ff ffef 	bl	800046c <__aeabi_dcmpge>
 800048e:	2800      	cmp	r0, #0
 8000490:	d104      	bne.n	800049c <__aeabi_d2uiz+0x1c>
 8000492:	0020      	movs	r0, r4
 8000494:	0029      	movs	r1, r5
 8000496:	f001 ff6d 	bl	8002374 <__aeabi_d2iz>
 800049a:	bd70      	pop	{r4, r5, r6, pc}
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <__aeabi_d2uiz+0x38>)
 800049e:	2200      	movs	r2, #0
 80004a0:	0020      	movs	r0, r4
 80004a2:	0029      	movs	r1, r5
 80004a4:	f001 fbc6 	bl	8001c34 <__aeabi_dsub>
 80004a8:	f001 ff64 	bl	8002374 <__aeabi_d2iz>
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	061b      	lsls	r3, r3, #24
 80004b0:	469c      	mov	ip, r3
 80004b2:	4460      	add	r0, ip
 80004b4:	e7f1      	b.n	800049a <__aeabi_d2uiz+0x1a>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	41e00000 	.word	0x41e00000

080004bc <__aeabi_fmul>:
 80004bc:	0243      	lsls	r3, r0, #9
 80004be:	0a5b      	lsrs	r3, r3, #9
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	464f      	mov	r7, r9
 80004c4:	4646      	mov	r6, r8
 80004c6:	4699      	mov	r9, r3
 80004c8:	46d6      	mov	lr, sl
 80004ca:	0fc3      	lsrs	r3, r0, #31
 80004cc:	0045      	lsls	r5, r0, #1
 80004ce:	4698      	mov	r8, r3
 80004d0:	b5c0      	push	{r6, r7, lr}
 80004d2:	464b      	mov	r3, r9
 80004d4:	1c0f      	adds	r7, r1, #0
 80004d6:	0e2d      	lsrs	r5, r5, #24
 80004d8:	d100      	bne.n	80004dc <__aeabi_fmul+0x20>
 80004da:	e0cb      	b.n	8000674 <__aeabi_fmul+0x1b8>
 80004dc:	2dff      	cmp	r5, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fmul+0x26>
 80004e0:	e0cf      	b.n	8000682 <__aeabi_fmul+0x1c6>
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	00db      	lsls	r3, r3, #3
 80004e6:	04d2      	lsls	r2, r2, #19
 80004e8:	431a      	orrs	r2, r3
 80004ea:	2300      	movs	r3, #0
 80004ec:	4691      	mov	r9, r2
 80004ee:	2600      	movs	r6, #0
 80004f0:	469a      	mov	sl, r3
 80004f2:	3d7f      	subs	r5, #127	; 0x7f
 80004f4:	027c      	lsls	r4, r7, #9
 80004f6:	007b      	lsls	r3, r7, #1
 80004f8:	0a64      	lsrs	r4, r4, #9
 80004fa:	0e1b      	lsrs	r3, r3, #24
 80004fc:	0fff      	lsrs	r7, r7, #31
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_fmul+0x48>
 8000502:	e0a9      	b.n	8000658 <__aeabi_fmul+0x19c>
 8000504:	2bff      	cmp	r3, #255	; 0xff
 8000506:	d011      	beq.n	800052c <__aeabi_fmul+0x70>
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	00e4      	lsls	r4, r4, #3
 800050c:	04d2      	lsls	r2, r2, #19
 800050e:	4314      	orrs	r4, r2
 8000510:	4642      	mov	r2, r8
 8000512:	3b7f      	subs	r3, #127	; 0x7f
 8000514:	195b      	adds	r3, r3, r5
 8000516:	407a      	eors	r2, r7
 8000518:	2000      	movs	r0, #0
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	1c5d      	adds	r5, r3, #1
 800051e:	2e0a      	cmp	r6, #10
 8000520:	dd13      	ble.n	800054a <__aeabi_fmul+0x8e>
 8000522:	003a      	movs	r2, r7
 8000524:	2e0b      	cmp	r6, #11
 8000526:	d047      	beq.n	80005b8 <__aeabi_fmul+0xfc>
 8000528:	4647      	mov	r7, r8
 800052a:	e03f      	b.n	80005ac <__aeabi_fmul+0xf0>
 800052c:	002b      	movs	r3, r5
 800052e:	33ff      	adds	r3, #255	; 0xff
 8000530:	2c00      	cmp	r4, #0
 8000532:	d11e      	bne.n	8000572 <__aeabi_fmul+0xb6>
 8000534:	2202      	movs	r2, #2
 8000536:	4316      	orrs	r6, r2
 8000538:	4642      	mov	r2, r8
 800053a:	3501      	adds	r5, #1
 800053c:	407a      	eors	r2, r7
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	35ff      	adds	r5, #255	; 0xff
 8000542:	2e0a      	cmp	r6, #10
 8000544:	dd00      	ble.n	8000548 <__aeabi_fmul+0x8c>
 8000546:	e0e4      	b.n	8000712 <__aeabi_fmul+0x256>
 8000548:	2002      	movs	r0, #2
 800054a:	2e02      	cmp	r6, #2
 800054c:	dc1c      	bgt.n	8000588 <__aeabi_fmul+0xcc>
 800054e:	3e01      	subs	r6, #1
 8000550:	2e01      	cmp	r6, #1
 8000552:	d842      	bhi.n	80005da <__aeabi_fmul+0x11e>
 8000554:	2802      	cmp	r0, #2
 8000556:	d03d      	beq.n	80005d4 <__aeabi_fmul+0x118>
 8000558:	2801      	cmp	r0, #1
 800055a:	d166      	bne.n	800062a <__aeabi_fmul+0x16e>
 800055c:	2000      	movs	r0, #0
 800055e:	2100      	movs	r1, #0
 8000560:	05c0      	lsls	r0, r0, #23
 8000562:	4308      	orrs	r0, r1
 8000564:	07d2      	lsls	r2, r2, #31
 8000566:	4310      	orrs	r0, r2
 8000568:	bce0      	pop	{r5, r6, r7}
 800056a:	46ba      	mov	sl, r7
 800056c:	46b1      	mov	r9, r6
 800056e:	46a8      	mov	r8, r5
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2203      	movs	r2, #3
 8000574:	4316      	orrs	r6, r2
 8000576:	4642      	mov	r2, r8
 8000578:	3501      	adds	r5, #1
 800057a:	407a      	eors	r2, r7
 800057c:	b2d2      	uxtb	r2, r2
 800057e:	35ff      	adds	r5, #255	; 0xff
 8000580:	2e0a      	cmp	r6, #10
 8000582:	dd00      	ble.n	8000586 <__aeabi_fmul+0xca>
 8000584:	e0e4      	b.n	8000750 <__aeabi_fmul+0x294>
 8000586:	2003      	movs	r0, #3
 8000588:	2101      	movs	r1, #1
 800058a:	40b1      	lsls	r1, r6
 800058c:	26a6      	movs	r6, #166	; 0xa6
 800058e:	00f6      	lsls	r6, r6, #3
 8000590:	4231      	tst	r1, r6
 8000592:	d10a      	bne.n	80005aa <__aeabi_fmul+0xee>
 8000594:	2690      	movs	r6, #144	; 0x90
 8000596:	00b6      	lsls	r6, r6, #2
 8000598:	4231      	tst	r1, r6
 800059a:	d116      	bne.n	80005ca <__aeabi_fmul+0x10e>
 800059c:	3eb9      	subs	r6, #185	; 0xb9
 800059e:	3eff      	subs	r6, #255	; 0xff
 80005a0:	420e      	tst	r6, r1
 80005a2:	d01a      	beq.n	80005da <__aeabi_fmul+0x11e>
 80005a4:	46a1      	mov	r9, r4
 80005a6:	4682      	mov	sl, r0
 80005a8:	e000      	b.n	80005ac <__aeabi_fmul+0xf0>
 80005aa:	0017      	movs	r7, r2
 80005ac:	4653      	mov	r3, sl
 80005ae:	003a      	movs	r2, r7
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d00f      	beq.n	80005d4 <__aeabi_fmul+0x118>
 80005b4:	464c      	mov	r4, r9
 80005b6:	4650      	mov	r0, sl
 80005b8:	2803      	cmp	r0, #3
 80005ba:	d1cd      	bne.n	8000558 <__aeabi_fmul+0x9c>
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	03c9      	lsls	r1, r1, #15
 80005c0:	4321      	orrs	r1, r4
 80005c2:	0249      	lsls	r1, r1, #9
 80005c4:	20ff      	movs	r0, #255	; 0xff
 80005c6:	0a49      	lsrs	r1, r1, #9
 80005c8:	e7ca      	b.n	8000560 <__aeabi_fmul+0xa4>
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	2200      	movs	r2, #0
 80005ce:	20ff      	movs	r0, #255	; 0xff
 80005d0:	03c9      	lsls	r1, r1, #15
 80005d2:	e7c5      	b.n	8000560 <__aeabi_fmul+0xa4>
 80005d4:	20ff      	movs	r0, #255	; 0xff
 80005d6:	2100      	movs	r1, #0
 80005d8:	e7c2      	b.n	8000560 <__aeabi_fmul+0xa4>
 80005da:	0c20      	lsrs	r0, r4, #16
 80005dc:	4649      	mov	r1, r9
 80005de:	0424      	lsls	r4, r4, #16
 80005e0:	0c24      	lsrs	r4, r4, #16
 80005e2:	0027      	movs	r7, r4
 80005e4:	0c0e      	lsrs	r6, r1, #16
 80005e6:	0409      	lsls	r1, r1, #16
 80005e8:	0c09      	lsrs	r1, r1, #16
 80005ea:	4374      	muls	r4, r6
 80005ec:	434f      	muls	r7, r1
 80005ee:	4346      	muls	r6, r0
 80005f0:	4348      	muls	r0, r1
 80005f2:	0c39      	lsrs	r1, r7, #16
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	1809      	adds	r1, r1, r0
 80005f8:	428c      	cmp	r4, r1
 80005fa:	d903      	bls.n	8000604 <__aeabi_fmul+0x148>
 80005fc:	2080      	movs	r0, #128	; 0x80
 80005fe:	0240      	lsls	r0, r0, #9
 8000600:	4684      	mov	ip, r0
 8000602:	4466      	add	r6, ip
 8000604:	043f      	lsls	r7, r7, #16
 8000606:	0408      	lsls	r0, r1, #16
 8000608:	0c3f      	lsrs	r7, r7, #16
 800060a:	19c0      	adds	r0, r0, r7
 800060c:	0184      	lsls	r4, r0, #6
 800060e:	1e67      	subs	r7, r4, #1
 8000610:	41bc      	sbcs	r4, r7
 8000612:	0c09      	lsrs	r1, r1, #16
 8000614:	0e80      	lsrs	r0, r0, #26
 8000616:	1989      	adds	r1, r1, r6
 8000618:	4304      	orrs	r4, r0
 800061a:	0189      	lsls	r1, r1, #6
 800061c:	430c      	orrs	r4, r1
 800061e:	0109      	lsls	r1, r1, #4
 8000620:	d571      	bpl.n	8000706 <__aeabi_fmul+0x24a>
 8000622:	2301      	movs	r3, #1
 8000624:	0861      	lsrs	r1, r4, #1
 8000626:	401c      	ands	r4, r3
 8000628:	430c      	orrs	r4, r1
 800062a:	002b      	movs	r3, r5
 800062c:	337f      	adds	r3, #127	; 0x7f
 800062e:	2b00      	cmp	r3, #0
 8000630:	dd51      	ble.n	80006d6 <__aeabi_fmul+0x21a>
 8000632:	0761      	lsls	r1, r4, #29
 8000634:	d004      	beq.n	8000640 <__aeabi_fmul+0x184>
 8000636:	210f      	movs	r1, #15
 8000638:	4021      	ands	r1, r4
 800063a:	2904      	cmp	r1, #4
 800063c:	d000      	beq.n	8000640 <__aeabi_fmul+0x184>
 800063e:	3404      	adds	r4, #4
 8000640:	0121      	lsls	r1, r4, #4
 8000642:	d503      	bpl.n	800064c <__aeabi_fmul+0x190>
 8000644:	4b43      	ldr	r3, [pc, #268]	; (8000754 <__aeabi_fmul+0x298>)
 8000646:	401c      	ands	r4, r3
 8000648:	002b      	movs	r3, r5
 800064a:	3380      	adds	r3, #128	; 0x80
 800064c:	2bfe      	cmp	r3, #254	; 0xfe
 800064e:	dcc1      	bgt.n	80005d4 <__aeabi_fmul+0x118>
 8000650:	01a1      	lsls	r1, r4, #6
 8000652:	0a49      	lsrs	r1, r1, #9
 8000654:	b2d8      	uxtb	r0, r3
 8000656:	e783      	b.n	8000560 <__aeabi_fmul+0xa4>
 8000658:	2c00      	cmp	r4, #0
 800065a:	d12c      	bne.n	80006b6 <__aeabi_fmul+0x1fa>
 800065c:	2301      	movs	r3, #1
 800065e:	4642      	mov	r2, r8
 8000660:	431e      	orrs	r6, r3
 8000662:	002b      	movs	r3, r5
 8000664:	407a      	eors	r2, r7
 8000666:	2001      	movs	r0, #1
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	1c5d      	adds	r5, r3, #1
 800066c:	2e0a      	cmp	r6, #10
 800066e:	dd00      	ble.n	8000672 <__aeabi_fmul+0x1b6>
 8000670:	e757      	b.n	8000522 <__aeabi_fmul+0x66>
 8000672:	e76a      	b.n	800054a <__aeabi_fmul+0x8e>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d110      	bne.n	800069a <__aeabi_fmul+0x1de>
 8000678:	2301      	movs	r3, #1
 800067a:	2604      	movs	r6, #4
 800067c:	2500      	movs	r5, #0
 800067e:	469a      	mov	sl, r3
 8000680:	e738      	b.n	80004f4 <__aeabi_fmul+0x38>
 8000682:	2b00      	cmp	r3, #0
 8000684:	d104      	bne.n	8000690 <__aeabi_fmul+0x1d4>
 8000686:	2302      	movs	r3, #2
 8000688:	2608      	movs	r6, #8
 800068a:	25ff      	movs	r5, #255	; 0xff
 800068c:	469a      	mov	sl, r3
 800068e:	e731      	b.n	80004f4 <__aeabi_fmul+0x38>
 8000690:	2303      	movs	r3, #3
 8000692:	260c      	movs	r6, #12
 8000694:	25ff      	movs	r5, #255	; 0xff
 8000696:	469a      	mov	sl, r3
 8000698:	e72c      	b.n	80004f4 <__aeabi_fmul+0x38>
 800069a:	4648      	mov	r0, r9
 800069c:	f001 ff3e 	bl	800251c <__clzsi2>
 80006a0:	464a      	mov	r2, r9
 80006a2:	1f43      	subs	r3, r0, #5
 80006a4:	2576      	movs	r5, #118	; 0x76
 80006a6:	409a      	lsls	r2, r3
 80006a8:	2300      	movs	r3, #0
 80006aa:	426d      	negs	r5, r5
 80006ac:	4691      	mov	r9, r2
 80006ae:	2600      	movs	r6, #0
 80006b0:	469a      	mov	sl, r3
 80006b2:	1a2d      	subs	r5, r5, r0
 80006b4:	e71e      	b.n	80004f4 <__aeabi_fmul+0x38>
 80006b6:	0020      	movs	r0, r4
 80006b8:	f001 ff30 	bl	800251c <__clzsi2>
 80006bc:	4642      	mov	r2, r8
 80006be:	1f43      	subs	r3, r0, #5
 80006c0:	409c      	lsls	r4, r3
 80006c2:	1a2b      	subs	r3, r5, r0
 80006c4:	3b76      	subs	r3, #118	; 0x76
 80006c6:	407a      	eors	r2, r7
 80006c8:	2000      	movs	r0, #0
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	1c5d      	adds	r5, r3, #1
 80006ce:	2e0a      	cmp	r6, #10
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_fmul+0x218>
 80006d2:	e726      	b.n	8000522 <__aeabi_fmul+0x66>
 80006d4:	e739      	b.n	800054a <__aeabi_fmul+0x8e>
 80006d6:	2101      	movs	r1, #1
 80006d8:	1acb      	subs	r3, r1, r3
 80006da:	2b1b      	cmp	r3, #27
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_fmul+0x224>
 80006de:	e73d      	b.n	800055c <__aeabi_fmul+0xa0>
 80006e0:	359e      	adds	r5, #158	; 0x9e
 80006e2:	0021      	movs	r1, r4
 80006e4:	40ac      	lsls	r4, r5
 80006e6:	40d9      	lsrs	r1, r3
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	4321      	orrs	r1, r4
 80006ee:	074b      	lsls	r3, r1, #29
 80006f0:	d004      	beq.n	80006fc <__aeabi_fmul+0x240>
 80006f2:	230f      	movs	r3, #15
 80006f4:	400b      	ands	r3, r1
 80006f6:	2b04      	cmp	r3, #4
 80006f8:	d000      	beq.n	80006fc <__aeabi_fmul+0x240>
 80006fa:	3104      	adds	r1, #4
 80006fc:	014b      	lsls	r3, r1, #5
 80006fe:	d504      	bpl.n	800070a <__aeabi_fmul+0x24e>
 8000700:	2001      	movs	r0, #1
 8000702:	2100      	movs	r1, #0
 8000704:	e72c      	b.n	8000560 <__aeabi_fmul+0xa4>
 8000706:	001d      	movs	r5, r3
 8000708:	e78f      	b.n	800062a <__aeabi_fmul+0x16e>
 800070a:	0189      	lsls	r1, r1, #6
 800070c:	2000      	movs	r0, #0
 800070e:	0a49      	lsrs	r1, r1, #9
 8000710:	e726      	b.n	8000560 <__aeabi_fmul+0xa4>
 8000712:	2302      	movs	r3, #2
 8000714:	2e0f      	cmp	r6, #15
 8000716:	d10c      	bne.n	8000732 <__aeabi_fmul+0x276>
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	464b      	mov	r3, r9
 800071c:	03c9      	lsls	r1, r1, #15
 800071e:	420b      	tst	r3, r1
 8000720:	d00d      	beq.n	800073e <__aeabi_fmul+0x282>
 8000722:	420c      	tst	r4, r1
 8000724:	d10b      	bne.n	800073e <__aeabi_fmul+0x282>
 8000726:	4321      	orrs	r1, r4
 8000728:	0249      	lsls	r1, r1, #9
 800072a:	003a      	movs	r2, r7
 800072c:	20ff      	movs	r0, #255	; 0xff
 800072e:	0a49      	lsrs	r1, r1, #9
 8000730:	e716      	b.n	8000560 <__aeabi_fmul+0xa4>
 8000732:	2e0b      	cmp	r6, #11
 8000734:	d000      	beq.n	8000738 <__aeabi_fmul+0x27c>
 8000736:	e6f7      	b.n	8000528 <__aeabi_fmul+0x6c>
 8000738:	46a1      	mov	r9, r4
 800073a:	469a      	mov	sl, r3
 800073c:	e736      	b.n	80005ac <__aeabi_fmul+0xf0>
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	464b      	mov	r3, r9
 8000742:	03c9      	lsls	r1, r1, #15
 8000744:	4319      	orrs	r1, r3
 8000746:	0249      	lsls	r1, r1, #9
 8000748:	4642      	mov	r2, r8
 800074a:	20ff      	movs	r0, #255	; 0xff
 800074c:	0a49      	lsrs	r1, r1, #9
 800074e:	e707      	b.n	8000560 <__aeabi_fmul+0xa4>
 8000750:	2303      	movs	r3, #3
 8000752:	e7df      	b.n	8000714 <__aeabi_fmul+0x258>
 8000754:	f7ffffff 	.word	0xf7ffffff

08000758 <__aeabi_i2f>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	2800      	cmp	r0, #0
 800075c:	d013      	beq.n	8000786 <__aeabi_i2f+0x2e>
 800075e:	17c3      	asrs	r3, r0, #31
 8000760:	18c5      	adds	r5, r0, r3
 8000762:	405d      	eors	r5, r3
 8000764:	0fc4      	lsrs	r4, r0, #31
 8000766:	0028      	movs	r0, r5
 8000768:	f001 fed8 	bl	800251c <__clzsi2>
 800076c:	239e      	movs	r3, #158	; 0x9e
 800076e:	0001      	movs	r1, r0
 8000770:	1a1b      	subs	r3, r3, r0
 8000772:	2b96      	cmp	r3, #150	; 0x96
 8000774:	dc0f      	bgt.n	8000796 <__aeabi_i2f+0x3e>
 8000776:	2808      	cmp	r0, #8
 8000778:	d031      	beq.n	80007de <__aeabi_i2f+0x86>
 800077a:	3908      	subs	r1, #8
 800077c:	408d      	lsls	r5, r1
 800077e:	026d      	lsls	r5, r5, #9
 8000780:	0a6d      	lsrs	r5, r5, #9
 8000782:	b2d8      	uxtb	r0, r3
 8000784:	e002      	b.n	800078c <__aeabi_i2f+0x34>
 8000786:	2400      	movs	r4, #0
 8000788:	2000      	movs	r0, #0
 800078a:	2500      	movs	r5, #0
 800078c:	05c0      	lsls	r0, r0, #23
 800078e:	4328      	orrs	r0, r5
 8000790:	07e4      	lsls	r4, r4, #31
 8000792:	4320      	orrs	r0, r4
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	2b99      	cmp	r3, #153	; 0x99
 8000798:	dd0c      	ble.n	80007b4 <__aeabi_i2f+0x5c>
 800079a:	2205      	movs	r2, #5
 800079c:	1a12      	subs	r2, r2, r0
 800079e:	0028      	movs	r0, r5
 80007a0:	40d0      	lsrs	r0, r2
 80007a2:	0002      	movs	r2, r0
 80007a4:	0008      	movs	r0, r1
 80007a6:	301b      	adds	r0, #27
 80007a8:	4085      	lsls	r5, r0
 80007aa:	0028      	movs	r0, r5
 80007ac:	1e45      	subs	r5, r0, #1
 80007ae:	41a8      	sbcs	r0, r5
 80007b0:	4302      	orrs	r2, r0
 80007b2:	0015      	movs	r5, r2
 80007b4:	2905      	cmp	r1, #5
 80007b6:	dc16      	bgt.n	80007e6 <__aeabi_i2f+0x8e>
 80007b8:	002a      	movs	r2, r5
 80007ba:	480f      	ldr	r0, [pc, #60]	; (80007f8 <__aeabi_i2f+0xa0>)
 80007bc:	4002      	ands	r2, r0
 80007be:	076e      	lsls	r6, r5, #29
 80007c0:	d009      	beq.n	80007d6 <__aeabi_i2f+0x7e>
 80007c2:	260f      	movs	r6, #15
 80007c4:	4035      	ands	r5, r6
 80007c6:	2d04      	cmp	r5, #4
 80007c8:	d005      	beq.n	80007d6 <__aeabi_i2f+0x7e>
 80007ca:	3204      	adds	r2, #4
 80007cc:	0155      	lsls	r5, r2, #5
 80007ce:	d502      	bpl.n	80007d6 <__aeabi_i2f+0x7e>
 80007d0:	239f      	movs	r3, #159	; 0x9f
 80007d2:	4002      	ands	r2, r0
 80007d4:	1a5b      	subs	r3, r3, r1
 80007d6:	0192      	lsls	r2, r2, #6
 80007d8:	0a55      	lsrs	r5, r2, #9
 80007da:	b2d8      	uxtb	r0, r3
 80007dc:	e7d6      	b.n	800078c <__aeabi_i2f+0x34>
 80007de:	026d      	lsls	r5, r5, #9
 80007e0:	2096      	movs	r0, #150	; 0x96
 80007e2:	0a6d      	lsrs	r5, r5, #9
 80007e4:	e7d2      	b.n	800078c <__aeabi_i2f+0x34>
 80007e6:	1f4a      	subs	r2, r1, #5
 80007e8:	4095      	lsls	r5, r2
 80007ea:	002a      	movs	r2, r5
 80007ec:	4802      	ldr	r0, [pc, #8]	; (80007f8 <__aeabi_i2f+0xa0>)
 80007ee:	4002      	ands	r2, r0
 80007f0:	076e      	lsls	r6, r5, #29
 80007f2:	d0f0      	beq.n	80007d6 <__aeabi_i2f+0x7e>
 80007f4:	e7e5      	b.n	80007c2 <__aeabi_i2f+0x6a>
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	fbffffff 	.word	0xfbffffff

080007fc <__aeabi_dadd>:
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007fe:	464f      	mov	r7, r9
 8000800:	4646      	mov	r6, r8
 8000802:	46d6      	mov	lr, sl
 8000804:	0004      	movs	r4, r0
 8000806:	b5c0      	push	{r6, r7, lr}
 8000808:	001f      	movs	r7, r3
 800080a:	030b      	lsls	r3, r1, #12
 800080c:	0010      	movs	r0, r2
 800080e:	004e      	lsls	r6, r1, #1
 8000810:	0a5b      	lsrs	r3, r3, #9
 8000812:	0fcd      	lsrs	r5, r1, #31
 8000814:	0f61      	lsrs	r1, r4, #29
 8000816:	007a      	lsls	r2, r7, #1
 8000818:	4319      	orrs	r1, r3
 800081a:	00e3      	lsls	r3, r4, #3
 800081c:	033c      	lsls	r4, r7, #12
 800081e:	0fff      	lsrs	r7, r7, #31
 8000820:	46bc      	mov	ip, r7
 8000822:	0a64      	lsrs	r4, r4, #9
 8000824:	0f47      	lsrs	r7, r0, #29
 8000826:	4327      	orrs	r7, r4
 8000828:	0d76      	lsrs	r6, r6, #21
 800082a:	0d52      	lsrs	r2, r2, #21
 800082c:	00c0      	lsls	r0, r0, #3
 800082e:	46b9      	mov	r9, r7
 8000830:	4680      	mov	r8, r0
 8000832:	1ab7      	subs	r7, r6, r2
 8000834:	4565      	cmp	r5, ip
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x3e>
 8000838:	e09b      	b.n	8000972 <__aeabi_dadd+0x176>
 800083a:	2f00      	cmp	r7, #0
 800083c:	dc00      	bgt.n	8000840 <__aeabi_dadd+0x44>
 800083e:	e084      	b.n	800094a <__aeabi_dadd+0x14e>
 8000840:	2a00      	cmp	r2, #0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x4a>
 8000844:	e0be      	b.n	80009c4 <__aeabi_dadd+0x1c8>
 8000846:	4ac8      	ldr	r2, [pc, #800]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000848:	4296      	cmp	r6, r2
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x52>
 800084c:	e124      	b.n	8000a98 <__aeabi_dadd+0x29c>
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	464c      	mov	r4, r9
 8000852:	0412      	lsls	r2, r2, #16
 8000854:	4314      	orrs	r4, r2
 8000856:	46a1      	mov	r9, r4
 8000858:	2f38      	cmp	r7, #56	; 0x38
 800085a:	dd00      	ble.n	800085e <__aeabi_dadd+0x62>
 800085c:	e167      	b.n	8000b2e <__aeabi_dadd+0x332>
 800085e:	2f1f      	cmp	r7, #31
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x68>
 8000862:	e1d6      	b.n	8000c12 <__aeabi_dadd+0x416>
 8000864:	2220      	movs	r2, #32
 8000866:	464c      	mov	r4, r9
 8000868:	1bd2      	subs	r2, r2, r7
 800086a:	4094      	lsls	r4, r2
 800086c:	46a2      	mov	sl, r4
 800086e:	4644      	mov	r4, r8
 8000870:	40fc      	lsrs	r4, r7
 8000872:	0020      	movs	r0, r4
 8000874:	4654      	mov	r4, sl
 8000876:	4304      	orrs	r4, r0
 8000878:	4640      	mov	r0, r8
 800087a:	4090      	lsls	r0, r2
 800087c:	1e42      	subs	r2, r0, #1
 800087e:	4190      	sbcs	r0, r2
 8000880:	464a      	mov	r2, r9
 8000882:	40fa      	lsrs	r2, r7
 8000884:	4304      	orrs	r4, r0
 8000886:	1a89      	subs	r1, r1, r2
 8000888:	1b1c      	subs	r4, r3, r4
 800088a:	42a3      	cmp	r3, r4
 800088c:	4192      	sbcs	r2, r2
 800088e:	4252      	negs	r2, r2
 8000890:	1a8b      	subs	r3, r1, r2
 8000892:	469a      	mov	sl, r3
 8000894:	4653      	mov	r3, sl
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	d400      	bmi.n	800089c <__aeabi_dadd+0xa0>
 800089a:	e0d4      	b.n	8000a46 <__aeabi_dadd+0x24a>
 800089c:	4653      	mov	r3, sl
 800089e:	025a      	lsls	r2, r3, #9
 80008a0:	0a53      	lsrs	r3, r2, #9
 80008a2:	469a      	mov	sl, r3
 80008a4:	4653      	mov	r3, sl
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0xb0>
 80008aa:	e104      	b.n	8000ab6 <__aeabi_dadd+0x2ba>
 80008ac:	4650      	mov	r0, sl
 80008ae:	f001 fe35 	bl	800251c <__clzsi2>
 80008b2:	0003      	movs	r3, r0
 80008b4:	3b08      	subs	r3, #8
 80008b6:	2220      	movs	r2, #32
 80008b8:	0020      	movs	r0, r4
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	4651      	mov	r1, sl
 80008be:	40d0      	lsrs	r0, r2
 80008c0:	4099      	lsls	r1, r3
 80008c2:	0002      	movs	r2, r0
 80008c4:	409c      	lsls	r4, r3
 80008c6:	430a      	orrs	r2, r1
 80008c8:	42b3      	cmp	r3, r6
 80008ca:	da00      	bge.n	80008ce <__aeabi_dadd+0xd2>
 80008cc:	e102      	b.n	8000ad4 <__aeabi_dadd+0x2d8>
 80008ce:	1b9b      	subs	r3, r3, r6
 80008d0:	1c59      	adds	r1, r3, #1
 80008d2:	291f      	cmp	r1, #31
 80008d4:	dd00      	ble.n	80008d8 <__aeabi_dadd+0xdc>
 80008d6:	e0a7      	b.n	8000a28 <__aeabi_dadd+0x22c>
 80008d8:	2320      	movs	r3, #32
 80008da:	0010      	movs	r0, r2
 80008dc:	0026      	movs	r6, r4
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	409c      	lsls	r4, r3
 80008e2:	4098      	lsls	r0, r3
 80008e4:	40ce      	lsrs	r6, r1
 80008e6:	40ca      	lsrs	r2, r1
 80008e8:	1e63      	subs	r3, r4, #1
 80008ea:	419c      	sbcs	r4, r3
 80008ec:	4330      	orrs	r0, r6
 80008ee:	4692      	mov	sl, r2
 80008f0:	2600      	movs	r6, #0
 80008f2:	4304      	orrs	r4, r0
 80008f4:	0763      	lsls	r3, r4, #29
 80008f6:	d009      	beq.n	800090c <__aeabi_dadd+0x110>
 80008f8:	230f      	movs	r3, #15
 80008fa:	4023      	ands	r3, r4
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d005      	beq.n	800090c <__aeabi_dadd+0x110>
 8000900:	1d23      	adds	r3, r4, #4
 8000902:	42a3      	cmp	r3, r4
 8000904:	41a4      	sbcs	r4, r4
 8000906:	4264      	negs	r4, r4
 8000908:	44a2      	add	sl, r4
 800090a:	001c      	movs	r4, r3
 800090c:	4653      	mov	r3, sl
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	d400      	bmi.n	8000914 <__aeabi_dadd+0x118>
 8000912:	e09b      	b.n	8000a4c <__aeabi_dadd+0x250>
 8000914:	4b94      	ldr	r3, [pc, #592]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000916:	3601      	adds	r6, #1
 8000918:	429e      	cmp	r6, r3
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x122>
 800091c:	e0b8      	b.n	8000a90 <__aeabi_dadd+0x294>
 800091e:	4653      	mov	r3, sl
 8000920:	4992      	ldr	r1, [pc, #584]	; (8000b6c <__aeabi_dadd+0x370>)
 8000922:	08e4      	lsrs	r4, r4, #3
 8000924:	400b      	ands	r3, r1
 8000926:	0019      	movs	r1, r3
 8000928:	075b      	lsls	r3, r3, #29
 800092a:	4323      	orrs	r3, r4
 800092c:	0572      	lsls	r2, r6, #21
 800092e:	024c      	lsls	r4, r1, #9
 8000930:	0b24      	lsrs	r4, r4, #12
 8000932:	0d52      	lsrs	r2, r2, #21
 8000934:	0512      	lsls	r2, r2, #20
 8000936:	07ed      	lsls	r5, r5, #31
 8000938:	4322      	orrs	r2, r4
 800093a:	432a      	orrs	r2, r5
 800093c:	0018      	movs	r0, r3
 800093e:	0011      	movs	r1, r2
 8000940:	bce0      	pop	{r5, r6, r7}
 8000942:	46ba      	mov	sl, r7
 8000944:	46b1      	mov	r9, r6
 8000946:	46a8      	mov	r8, r5
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	2f00      	cmp	r7, #0
 800094c:	d048      	beq.n	80009e0 <__aeabi_dadd+0x1e4>
 800094e:	1b97      	subs	r7, r2, r6
 8000950:	2e00      	cmp	r6, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_dadd+0x15a>
 8000954:	e10e      	b.n	8000b74 <__aeabi_dadd+0x378>
 8000956:	000c      	movs	r4, r1
 8000958:	431c      	orrs	r4, r3
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x162>
 800095c:	e1b7      	b.n	8000cce <__aeabi_dadd+0x4d2>
 800095e:	1e7c      	subs	r4, r7, #1
 8000960:	2f01      	cmp	r7, #1
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x16a>
 8000964:	e226      	b.n	8000db4 <__aeabi_dadd+0x5b8>
 8000966:	4d80      	ldr	r5, [pc, #512]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000968:	42af      	cmp	r7, r5
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x172>
 800096c:	e1d5      	b.n	8000d1a <__aeabi_dadd+0x51e>
 800096e:	0027      	movs	r7, r4
 8000970:	e107      	b.n	8000b82 <__aeabi_dadd+0x386>
 8000972:	2f00      	cmp	r7, #0
 8000974:	dc00      	bgt.n	8000978 <__aeabi_dadd+0x17c>
 8000976:	e0b2      	b.n	8000ade <__aeabi_dadd+0x2e2>
 8000978:	2a00      	cmp	r2, #0
 800097a:	d047      	beq.n	8000a0c <__aeabi_dadd+0x210>
 800097c:	4a7a      	ldr	r2, [pc, #488]	; (8000b68 <__aeabi_dadd+0x36c>)
 800097e:	4296      	cmp	r6, r2
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x188>
 8000982:	e089      	b.n	8000a98 <__aeabi_dadd+0x29c>
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	464c      	mov	r4, r9
 8000988:	0412      	lsls	r2, r2, #16
 800098a:	4314      	orrs	r4, r2
 800098c:	46a1      	mov	r9, r4
 800098e:	2f38      	cmp	r7, #56	; 0x38
 8000990:	dc6b      	bgt.n	8000a6a <__aeabi_dadd+0x26e>
 8000992:	2f1f      	cmp	r7, #31
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dadd+0x19c>
 8000996:	e16e      	b.n	8000c76 <__aeabi_dadd+0x47a>
 8000998:	003a      	movs	r2, r7
 800099a:	4648      	mov	r0, r9
 800099c:	3a20      	subs	r2, #32
 800099e:	40d0      	lsrs	r0, r2
 80009a0:	4684      	mov	ip, r0
 80009a2:	2f20      	cmp	r7, #32
 80009a4:	d007      	beq.n	80009b6 <__aeabi_dadd+0x1ba>
 80009a6:	2240      	movs	r2, #64	; 0x40
 80009a8:	4648      	mov	r0, r9
 80009aa:	1bd2      	subs	r2, r2, r7
 80009ac:	4090      	lsls	r0, r2
 80009ae:	0002      	movs	r2, r0
 80009b0:	4640      	mov	r0, r8
 80009b2:	4310      	orrs	r0, r2
 80009b4:	4680      	mov	r8, r0
 80009b6:	4640      	mov	r0, r8
 80009b8:	1e42      	subs	r2, r0, #1
 80009ba:	4190      	sbcs	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	0004      	movs	r4, r0
 80009c0:	4314      	orrs	r4, r2
 80009c2:	e057      	b.n	8000a74 <__aeabi_dadd+0x278>
 80009c4:	464a      	mov	r2, r9
 80009c6:	4302      	orrs	r2, r0
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x1d0>
 80009ca:	e103      	b.n	8000bd4 <__aeabi_dadd+0x3d8>
 80009cc:	1e7a      	subs	r2, r7, #1
 80009ce:	2f01      	cmp	r7, #1
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x1d8>
 80009d2:	e193      	b.n	8000cfc <__aeabi_dadd+0x500>
 80009d4:	4c64      	ldr	r4, [pc, #400]	; (8000b68 <__aeabi_dadd+0x36c>)
 80009d6:	42a7      	cmp	r7, r4
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x1e0>
 80009da:	e18a      	b.n	8000cf2 <__aeabi_dadd+0x4f6>
 80009dc:	0017      	movs	r7, r2
 80009de:	e73b      	b.n	8000858 <__aeabi_dadd+0x5c>
 80009e0:	4c63      	ldr	r4, [pc, #396]	; (8000b70 <__aeabi_dadd+0x374>)
 80009e2:	1c72      	adds	r2, r6, #1
 80009e4:	4222      	tst	r2, r4
 80009e6:	d000      	beq.n	80009ea <__aeabi_dadd+0x1ee>
 80009e8:	e0e0      	b.n	8000bac <__aeabi_dadd+0x3b0>
 80009ea:	000a      	movs	r2, r1
 80009ec:	431a      	orrs	r2, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d000      	beq.n	80009f4 <__aeabi_dadd+0x1f8>
 80009f2:	e174      	b.n	8000cde <__aeabi_dadd+0x4e2>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x1fe>
 80009f8:	e1d0      	b.n	8000d9c <__aeabi_dadd+0x5a0>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4302      	orrs	r2, r0
 80009fe:	d000      	beq.n	8000a02 <__aeabi_dadd+0x206>
 8000a00:	e1e3      	b.n	8000dca <__aeabi_dadd+0x5ce>
 8000a02:	074a      	lsls	r2, r1, #29
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	08c9      	lsrs	r1, r1, #3
 8000a0a:	e029      	b.n	8000a60 <__aeabi_dadd+0x264>
 8000a0c:	464a      	mov	r2, r9
 8000a0e:	4302      	orrs	r2, r0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dadd+0x218>
 8000a12:	e17d      	b.n	8000d10 <__aeabi_dadd+0x514>
 8000a14:	1e7a      	subs	r2, r7, #1
 8000a16:	2f01      	cmp	r7, #1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x220>
 8000a1a:	e0e0      	b.n	8000bde <__aeabi_dadd+0x3e2>
 8000a1c:	4c52      	ldr	r4, [pc, #328]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000a1e:	42a7      	cmp	r7, r4
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x228>
 8000a22:	e166      	b.n	8000cf2 <__aeabi_dadd+0x4f6>
 8000a24:	0017      	movs	r7, r2
 8000a26:	e7b2      	b.n	800098e <__aeabi_dadd+0x192>
 8000a28:	0010      	movs	r0, r2
 8000a2a:	3b1f      	subs	r3, #31
 8000a2c:	40d8      	lsrs	r0, r3
 8000a2e:	2920      	cmp	r1, #32
 8000a30:	d003      	beq.n	8000a3a <__aeabi_dadd+0x23e>
 8000a32:	2340      	movs	r3, #64	; 0x40
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	409a      	lsls	r2, r3
 8000a38:	4314      	orrs	r4, r2
 8000a3a:	1e63      	subs	r3, r4, #1
 8000a3c:	419c      	sbcs	r4, r3
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2600      	movs	r6, #0
 8000a42:	469a      	mov	sl, r3
 8000a44:	4304      	orrs	r4, r0
 8000a46:	0763      	lsls	r3, r4, #29
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x250>
 8000a4a:	e755      	b.n	80008f8 <__aeabi_dadd+0xfc>
 8000a4c:	4652      	mov	r2, sl
 8000a4e:	08e3      	lsrs	r3, r4, #3
 8000a50:	0752      	lsls	r2, r2, #29
 8000a52:	4313      	orrs	r3, r2
 8000a54:	4652      	mov	r2, sl
 8000a56:	0037      	movs	r7, r6
 8000a58:	08d1      	lsrs	r1, r2, #3
 8000a5a:	4a43      	ldr	r2, [pc, #268]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000a5c:	4297      	cmp	r7, r2
 8000a5e:	d01f      	beq.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000a60:	0309      	lsls	r1, r1, #12
 8000a62:	057a      	lsls	r2, r7, #21
 8000a64:	0b0c      	lsrs	r4, r1, #12
 8000a66:	0d52      	lsrs	r2, r2, #21
 8000a68:	e764      	b.n	8000934 <__aeabi_dadd+0x138>
 8000a6a:	4642      	mov	r2, r8
 8000a6c:	464c      	mov	r4, r9
 8000a6e:	4314      	orrs	r4, r2
 8000a70:	1e62      	subs	r2, r4, #1
 8000a72:	4194      	sbcs	r4, r2
 8000a74:	18e4      	adds	r4, r4, r3
 8000a76:	429c      	cmp	r4, r3
 8000a78:	4192      	sbcs	r2, r2
 8000a7a:	4252      	negs	r2, r2
 8000a7c:	4692      	mov	sl, r2
 8000a7e:	448a      	add	sl, r1
 8000a80:	4653      	mov	r3, sl
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	d5df      	bpl.n	8000a46 <__aeabi_dadd+0x24a>
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000a88:	3601      	adds	r6, #1
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	d000      	beq.n	8000a90 <__aeabi_dadd+0x294>
 8000a8e:	e0b3      	b.n	8000bf8 <__aeabi_dadd+0x3fc>
 8000a90:	0032      	movs	r2, r6
 8000a92:	2400      	movs	r4, #0
 8000a94:	2300      	movs	r3, #0
 8000a96:	e74d      	b.n	8000934 <__aeabi_dadd+0x138>
 8000a98:	074a      	lsls	r2, r1, #29
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x2ac>
 8000aa6:	e200      	b.n	8000eaa <__aeabi_dadd+0x6ae>
 8000aa8:	2480      	movs	r4, #128	; 0x80
 8000aaa:	0324      	lsls	r4, r4, #12
 8000aac:	430c      	orrs	r4, r1
 8000aae:	0324      	lsls	r4, r4, #12
 8000ab0:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000ab2:	0b24      	lsrs	r4, r4, #12
 8000ab4:	e73e      	b.n	8000934 <__aeabi_dadd+0x138>
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f001 fd30 	bl	800251c <__clzsi2>
 8000abc:	0003      	movs	r3, r0
 8000abe:	3318      	adds	r3, #24
 8000ac0:	2b1f      	cmp	r3, #31
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_dadd+0x2ca>
 8000ac4:	e6f7      	b.n	80008b6 <__aeabi_dadd+0xba>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	3808      	subs	r0, #8
 8000aca:	4082      	lsls	r2, r0
 8000acc:	2400      	movs	r4, #0
 8000ace:	42b3      	cmp	r3, r6
 8000ad0:	db00      	blt.n	8000ad4 <__aeabi_dadd+0x2d8>
 8000ad2:	e6fc      	b.n	80008ce <__aeabi_dadd+0xd2>
 8000ad4:	1af6      	subs	r6, r6, r3
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <__aeabi_dadd+0x370>)
 8000ad8:	401a      	ands	r2, r3
 8000ada:	4692      	mov	sl, r2
 8000adc:	e70a      	b.n	80008f4 <__aeabi_dadd+0xf8>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d02b      	beq.n	8000b3a <__aeabi_dadd+0x33e>
 8000ae2:	1b97      	subs	r7, r2, r6
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x2ee>
 8000ae8:	e0b8      	b.n	8000c5c <__aeabi_dadd+0x460>
 8000aea:	4c1f      	ldr	r4, [pc, #124]	; (8000b68 <__aeabi_dadd+0x36c>)
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dadd+0x2f6>
 8000af0:	e11c      	b.n	8000d2c <__aeabi_dadd+0x530>
 8000af2:	2480      	movs	r4, #128	; 0x80
 8000af4:	0424      	lsls	r4, r4, #16
 8000af6:	4321      	orrs	r1, r4
 8000af8:	2f38      	cmp	r7, #56	; 0x38
 8000afa:	dd00      	ble.n	8000afe <__aeabi_dadd+0x302>
 8000afc:	e11e      	b.n	8000d3c <__aeabi_dadd+0x540>
 8000afe:	2f1f      	cmp	r7, #31
 8000b00:	dd00      	ble.n	8000b04 <__aeabi_dadd+0x308>
 8000b02:	e19e      	b.n	8000e42 <__aeabi_dadd+0x646>
 8000b04:	2620      	movs	r6, #32
 8000b06:	000c      	movs	r4, r1
 8000b08:	1bf6      	subs	r6, r6, r7
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	40b3      	lsls	r3, r6
 8000b0e:	40b4      	lsls	r4, r6
 8000b10:	40f8      	lsrs	r0, r7
 8000b12:	1e5e      	subs	r6, r3, #1
 8000b14:	41b3      	sbcs	r3, r6
 8000b16:	40f9      	lsrs	r1, r7
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	4489      	add	r9, r1
 8000b1e:	4444      	add	r4, r8
 8000b20:	4544      	cmp	r4, r8
 8000b22:	419b      	sbcs	r3, r3
 8000b24:	425b      	negs	r3, r3
 8000b26:	444b      	add	r3, r9
 8000b28:	469a      	mov	sl, r3
 8000b2a:	0016      	movs	r6, r2
 8000b2c:	e7a8      	b.n	8000a80 <__aeabi_dadd+0x284>
 8000b2e:	4642      	mov	r2, r8
 8000b30:	464c      	mov	r4, r9
 8000b32:	4314      	orrs	r4, r2
 8000b34:	1e62      	subs	r2, r4, #1
 8000b36:	4194      	sbcs	r4, r2
 8000b38:	e6a6      	b.n	8000888 <__aeabi_dadd+0x8c>
 8000b3a:	4c0d      	ldr	r4, [pc, #52]	; (8000b70 <__aeabi_dadd+0x374>)
 8000b3c:	1c72      	adds	r2, r6, #1
 8000b3e:	4222      	tst	r2, r4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_dadd+0x348>
 8000b42:	e0a8      	b.n	8000c96 <__aeabi_dadd+0x49a>
 8000b44:	000a      	movs	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x352>
 8000b4c:	e10a      	b.n	8000d64 <__aeabi_dadd+0x568>
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_dadd+0x358>
 8000b52:	e15e      	b.n	8000e12 <__aeabi_dadd+0x616>
 8000b54:	464a      	mov	r2, r9
 8000b56:	4302      	orrs	r2, r0
 8000b58:	d000      	beq.n	8000b5c <__aeabi_dadd+0x360>
 8000b5a:	e161      	b.n	8000e20 <__aeabi_dadd+0x624>
 8000b5c:	074a      	lsls	r2, r1, #29
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	08c9      	lsrs	r1, r1, #3
 8000b64:	e77c      	b.n	8000a60 <__aeabi_dadd+0x264>
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	000007ff 	.word	0x000007ff
 8000b6c:	ff7fffff 	.word	0xff7fffff
 8000b70:	000007fe 	.word	0x000007fe
 8000b74:	4ccf      	ldr	r4, [pc, #828]	; (8000eb4 <__aeabi_dadd+0x6b8>)
 8000b76:	42a2      	cmp	r2, r4
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x380>
 8000b7a:	e0ce      	b.n	8000d1a <__aeabi_dadd+0x51e>
 8000b7c:	2480      	movs	r4, #128	; 0x80
 8000b7e:	0424      	lsls	r4, r4, #16
 8000b80:	4321      	orrs	r1, r4
 8000b82:	2f38      	cmp	r7, #56	; 0x38
 8000b84:	dc5b      	bgt.n	8000c3e <__aeabi_dadd+0x442>
 8000b86:	2f1f      	cmp	r7, #31
 8000b88:	dd00      	ble.n	8000b8c <__aeabi_dadd+0x390>
 8000b8a:	e0dc      	b.n	8000d46 <__aeabi_dadd+0x54a>
 8000b8c:	2520      	movs	r5, #32
 8000b8e:	000c      	movs	r4, r1
 8000b90:	1bed      	subs	r5, r5, r7
 8000b92:	001e      	movs	r6, r3
 8000b94:	40ab      	lsls	r3, r5
 8000b96:	40ac      	lsls	r4, r5
 8000b98:	40fe      	lsrs	r6, r7
 8000b9a:	1e5d      	subs	r5, r3, #1
 8000b9c:	41ab      	sbcs	r3, r5
 8000b9e:	4334      	orrs	r4, r6
 8000ba0:	40f9      	lsrs	r1, r7
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	1a5b      	subs	r3, r3, r1
 8000ba8:	4699      	mov	r9, r3
 8000baa:	e04c      	b.n	8000c46 <__aeabi_dadd+0x44a>
 8000bac:	464a      	mov	r2, r9
 8000bae:	1a1c      	subs	r4, r3, r0
 8000bb0:	1a88      	subs	r0, r1, r2
 8000bb2:	42a3      	cmp	r3, r4
 8000bb4:	4192      	sbcs	r2, r2
 8000bb6:	4252      	negs	r2, r2
 8000bb8:	4692      	mov	sl, r2
 8000bba:	0002      	movs	r2, r0
 8000bbc:	4650      	mov	r0, sl
 8000bbe:	1a12      	subs	r2, r2, r0
 8000bc0:	4692      	mov	sl, r2
 8000bc2:	0212      	lsls	r2, r2, #8
 8000bc4:	d478      	bmi.n	8000cb8 <__aeabi_dadd+0x4bc>
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x3d2>
 8000bcc:	e66a      	b.n	80008a4 <__aeabi_dadd+0xa8>
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	e745      	b.n	8000a60 <__aeabi_dadd+0x264>
 8000bd4:	074a      	lsls	r2, r1, #29
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	08c9      	lsrs	r1, r1, #3
 8000bdc:	e73d      	b.n	8000a5a <__aeabi_dadd+0x25e>
 8000bde:	181c      	adds	r4, r3, r0
 8000be0:	429c      	cmp	r4, r3
 8000be2:	419b      	sbcs	r3, r3
 8000be4:	4449      	add	r1, r9
 8000be6:	468a      	mov	sl, r1
 8000be8:	425b      	negs	r3, r3
 8000bea:	449a      	add	sl, r3
 8000bec:	4653      	mov	r3, sl
 8000bee:	2601      	movs	r6, #1
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	d400      	bmi.n	8000bf6 <__aeabi_dadd+0x3fa>
 8000bf4:	e727      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000bf6:	2602      	movs	r6, #2
 8000bf8:	4652      	mov	r2, sl
 8000bfa:	4baf      	ldr	r3, [pc, #700]	; (8000eb8 <__aeabi_dadd+0x6bc>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	4021      	ands	r1, r4
 8000c04:	0862      	lsrs	r2, r4, #1
 8000c06:	430a      	orrs	r2, r1
 8000c08:	07dc      	lsls	r4, r3, #31
 8000c0a:	085b      	lsrs	r3, r3, #1
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	4314      	orrs	r4, r2
 8000c10:	e670      	b.n	80008f4 <__aeabi_dadd+0xf8>
 8000c12:	003a      	movs	r2, r7
 8000c14:	464c      	mov	r4, r9
 8000c16:	3a20      	subs	r2, #32
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	46a4      	mov	ip, r4
 8000c1c:	2f20      	cmp	r7, #32
 8000c1e:	d007      	beq.n	8000c30 <__aeabi_dadd+0x434>
 8000c20:	2240      	movs	r2, #64	; 0x40
 8000c22:	4648      	mov	r0, r9
 8000c24:	1bd2      	subs	r2, r2, r7
 8000c26:	4090      	lsls	r0, r2
 8000c28:	0002      	movs	r2, r0
 8000c2a:	4640      	mov	r0, r8
 8000c2c:	4310      	orrs	r0, r2
 8000c2e:	4680      	mov	r8, r0
 8000c30:	4640      	mov	r0, r8
 8000c32:	1e42      	subs	r2, r0, #1
 8000c34:	4190      	sbcs	r0, r2
 8000c36:	4662      	mov	r2, ip
 8000c38:	0004      	movs	r4, r0
 8000c3a:	4314      	orrs	r4, r2
 8000c3c:	e624      	b.n	8000888 <__aeabi_dadd+0x8c>
 8000c3e:	4319      	orrs	r1, r3
 8000c40:	000c      	movs	r4, r1
 8000c42:	1e63      	subs	r3, r4, #1
 8000c44:	419c      	sbcs	r4, r3
 8000c46:	4643      	mov	r3, r8
 8000c48:	1b1c      	subs	r4, r3, r4
 8000c4a:	45a0      	cmp	r8, r4
 8000c4c:	419b      	sbcs	r3, r3
 8000c4e:	4649      	mov	r1, r9
 8000c50:	425b      	negs	r3, r3
 8000c52:	1acb      	subs	r3, r1, r3
 8000c54:	469a      	mov	sl, r3
 8000c56:	4665      	mov	r5, ip
 8000c58:	0016      	movs	r6, r2
 8000c5a:	e61b      	b.n	8000894 <__aeabi_dadd+0x98>
 8000c5c:	000c      	movs	r4, r1
 8000c5e:	431c      	orrs	r4, r3
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dadd+0x468>
 8000c62:	e0c7      	b.n	8000df4 <__aeabi_dadd+0x5f8>
 8000c64:	1e7c      	subs	r4, r7, #1
 8000c66:	2f01      	cmp	r7, #1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x470>
 8000c6a:	e0f9      	b.n	8000e60 <__aeabi_dadd+0x664>
 8000c6c:	4e91      	ldr	r6, [pc, #580]	; (8000eb4 <__aeabi_dadd+0x6b8>)
 8000c6e:	42b7      	cmp	r7, r6
 8000c70:	d05c      	beq.n	8000d2c <__aeabi_dadd+0x530>
 8000c72:	0027      	movs	r7, r4
 8000c74:	e740      	b.n	8000af8 <__aeabi_dadd+0x2fc>
 8000c76:	2220      	movs	r2, #32
 8000c78:	464c      	mov	r4, r9
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	1bd2      	subs	r2, r2, r7
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	40f8      	lsrs	r0, r7
 8000c82:	4304      	orrs	r4, r0
 8000c84:	4640      	mov	r0, r8
 8000c86:	4090      	lsls	r0, r2
 8000c88:	1e42      	subs	r2, r0, #1
 8000c8a:	4190      	sbcs	r0, r2
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	40fa      	lsrs	r2, r7
 8000c90:	4304      	orrs	r4, r0
 8000c92:	1889      	adds	r1, r1, r2
 8000c94:	e6ee      	b.n	8000a74 <__aeabi_dadd+0x278>
 8000c96:	4c87      	ldr	r4, [pc, #540]	; (8000eb4 <__aeabi_dadd+0x6b8>)
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_dadd+0x4a2>
 8000c9c:	e6f9      	b.n	8000a92 <__aeabi_dadd+0x296>
 8000c9e:	1818      	adds	r0, r3, r0
 8000ca0:	4298      	cmp	r0, r3
 8000ca2:	419b      	sbcs	r3, r3
 8000ca4:	4449      	add	r1, r9
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	18cb      	adds	r3, r1, r3
 8000caa:	07dc      	lsls	r4, r3, #31
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	0016      	movs	r6, r2
 8000cb4:	4304      	orrs	r4, r0
 8000cb6:	e6c6      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000cb8:	4642      	mov	r2, r8
 8000cba:	1ad4      	subs	r4, r2, r3
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	4180      	sbcs	r0, r0
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	1a59      	subs	r1, r3, r1
 8000cc6:	1a0b      	subs	r3, r1, r0
 8000cc8:	469a      	mov	sl, r3
 8000cca:	4665      	mov	r5, ip
 8000ccc:	e5ea      	b.n	80008a4 <__aeabi_dadd+0xa8>
 8000cce:	464b      	mov	r3, r9
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	08c0      	lsrs	r0, r0, #3
 8000cd4:	075b      	lsls	r3, r3, #29
 8000cd6:	4665      	mov	r5, ip
 8000cd8:	4303      	orrs	r3, r0
 8000cda:	08d1      	lsrs	r1, r2, #3
 8000cdc:	e6bd      	b.n	8000a5a <__aeabi_dadd+0x25e>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_dadd+0x4e8>
 8000ce2:	e08e      	b.n	8000e02 <__aeabi_dadd+0x606>
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	d117      	bne.n	8000d1a <__aeabi_dadd+0x51e>
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	2500      	movs	r5, #0
 8000cee:	0309      	lsls	r1, r1, #12
 8000cf0:	e6da      	b.n	8000aa8 <__aeabi_dadd+0x2ac>
 8000cf2:	074a      	lsls	r2, r1, #29
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	08c9      	lsrs	r1, r1, #3
 8000cfa:	e6d1      	b.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000cfc:	1a1c      	subs	r4, r3, r0
 8000cfe:	464a      	mov	r2, r9
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	419b      	sbcs	r3, r3
 8000d04:	1a89      	subs	r1, r1, r2
 8000d06:	425b      	negs	r3, r3
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	469a      	mov	sl, r3
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	e5c1      	b.n	8000894 <__aeabi_dadd+0x98>
 8000d10:	074a      	lsls	r2, r1, #29
 8000d12:	08db      	lsrs	r3, r3, #3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	08c9      	lsrs	r1, r1, #3
 8000d18:	e69f      	b.n	8000a5a <__aeabi_dadd+0x25e>
 8000d1a:	4643      	mov	r3, r8
 8000d1c:	08d8      	lsrs	r0, r3, #3
 8000d1e:	464b      	mov	r3, r9
 8000d20:	464a      	mov	r2, r9
 8000d22:	075b      	lsls	r3, r3, #29
 8000d24:	4665      	mov	r5, ip
 8000d26:	4303      	orrs	r3, r0
 8000d28:	08d1      	lsrs	r1, r2, #3
 8000d2a:	e6b9      	b.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000d2c:	4643      	mov	r3, r8
 8000d2e:	08d8      	lsrs	r0, r3, #3
 8000d30:	464b      	mov	r3, r9
 8000d32:	464a      	mov	r2, r9
 8000d34:	075b      	lsls	r3, r3, #29
 8000d36:	4303      	orrs	r3, r0
 8000d38:	08d1      	lsrs	r1, r2, #3
 8000d3a:	e6b1      	b.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000d3c:	4319      	orrs	r1, r3
 8000d3e:	000c      	movs	r4, r1
 8000d40:	1e63      	subs	r3, r4, #1
 8000d42:	419c      	sbcs	r4, r3
 8000d44:	e6eb      	b.n	8000b1e <__aeabi_dadd+0x322>
 8000d46:	003c      	movs	r4, r7
 8000d48:	000d      	movs	r5, r1
 8000d4a:	3c20      	subs	r4, #32
 8000d4c:	40e5      	lsrs	r5, r4
 8000d4e:	2f20      	cmp	r7, #32
 8000d50:	d003      	beq.n	8000d5a <__aeabi_dadd+0x55e>
 8000d52:	2440      	movs	r4, #64	; 0x40
 8000d54:	1be4      	subs	r4, r4, r7
 8000d56:	40a1      	lsls	r1, r4
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	001c      	movs	r4, r3
 8000d5c:	1e63      	subs	r3, r4, #1
 8000d5e:	419c      	sbcs	r4, r3
 8000d60:	432c      	orrs	r4, r5
 8000d62:	e770      	b.n	8000c46 <__aeabi_dadd+0x44a>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d0e1      	beq.n	8000d2c <__aeabi_dadd+0x530>
 8000d68:	464a      	mov	r2, r9
 8000d6a:	4302      	orrs	r2, r0
 8000d6c:	d0c1      	beq.n	8000cf2 <__aeabi_dadd+0x4f6>
 8000d6e:	074a      	lsls	r2, r1, #29
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	08c9      	lsrs	r1, r1, #3
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	4211      	tst	r1, r2
 8000d7c:	d008      	beq.n	8000d90 <__aeabi_dadd+0x594>
 8000d7e:	4648      	mov	r0, r9
 8000d80:	08c4      	lsrs	r4, r0, #3
 8000d82:	4214      	tst	r4, r2
 8000d84:	d104      	bne.n	8000d90 <__aeabi_dadd+0x594>
 8000d86:	4643      	mov	r3, r8
 8000d88:	0021      	movs	r1, r4
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	0742      	lsls	r2, r0, #29
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	0f5a      	lsrs	r2, r3, #29
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	0752      	lsls	r2, r2, #29
 8000d96:	08db      	lsrs	r3, r3, #3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	e681      	b.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000d9c:	464b      	mov	r3, r9
 8000d9e:	4303      	orrs	r3, r0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x5a8>
 8000da2:	e714      	b.n	8000bce <__aeabi_dadd+0x3d2>
 8000da4:	464b      	mov	r3, r9
 8000da6:	464a      	mov	r2, r9
 8000da8:	08c0      	lsrs	r0, r0, #3
 8000daa:	075b      	lsls	r3, r3, #29
 8000dac:	4665      	mov	r5, ip
 8000dae:	4303      	orrs	r3, r0
 8000db0:	08d1      	lsrs	r1, r2, #3
 8000db2:	e655      	b.n	8000a60 <__aeabi_dadd+0x264>
 8000db4:	1ac4      	subs	r4, r0, r3
 8000db6:	45a0      	cmp	r8, r4
 8000db8:	4180      	sbcs	r0, r0
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4240      	negs	r0, r0
 8000dbe:	1a59      	subs	r1, r3, r1
 8000dc0:	1a0b      	subs	r3, r1, r0
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	4665      	mov	r5, ip
 8000dc6:	2601      	movs	r6, #1
 8000dc8:	e564      	b.n	8000894 <__aeabi_dadd+0x98>
 8000dca:	1a1c      	subs	r4, r3, r0
 8000dcc:	464a      	mov	r2, r9
 8000dce:	42a3      	cmp	r3, r4
 8000dd0:	4180      	sbcs	r0, r0
 8000dd2:	1a8a      	subs	r2, r1, r2
 8000dd4:	4240      	negs	r0, r0
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	4692      	mov	sl, r2
 8000dda:	0212      	lsls	r2, r2, #8
 8000ddc:	d549      	bpl.n	8000e72 <__aeabi_dadd+0x676>
 8000dde:	4642      	mov	r2, r8
 8000de0:	1ad4      	subs	r4, r2, r3
 8000de2:	45a0      	cmp	r8, r4
 8000de4:	4180      	sbcs	r0, r0
 8000de6:	464b      	mov	r3, r9
 8000de8:	4240      	negs	r0, r0
 8000dea:	1a59      	subs	r1, r3, r1
 8000dec:	1a0b      	subs	r3, r1, r0
 8000dee:	469a      	mov	sl, r3
 8000df0:	4665      	mov	r5, ip
 8000df2:	e57f      	b.n	80008f4 <__aeabi_dadd+0xf8>
 8000df4:	464b      	mov	r3, r9
 8000df6:	464a      	mov	r2, r9
 8000df8:	08c0      	lsrs	r0, r0, #3
 8000dfa:	075b      	lsls	r3, r3, #29
 8000dfc:	4303      	orrs	r3, r0
 8000dfe:	08d1      	lsrs	r1, r2, #3
 8000e00:	e62b      	b.n	8000a5a <__aeabi_dadd+0x25e>
 8000e02:	464a      	mov	r2, r9
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	4302      	orrs	r2, r0
 8000e08:	d138      	bne.n	8000e7c <__aeabi_dadd+0x680>
 8000e0a:	074a      	lsls	r2, r1, #29
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	08c9      	lsrs	r1, r1, #3
 8000e10:	e646      	b.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000e12:	464b      	mov	r3, r9
 8000e14:	464a      	mov	r2, r9
 8000e16:	08c0      	lsrs	r0, r0, #3
 8000e18:	075b      	lsls	r3, r3, #29
 8000e1a:	4303      	orrs	r3, r0
 8000e1c:	08d1      	lsrs	r1, r2, #3
 8000e1e:	e61f      	b.n	8000a60 <__aeabi_dadd+0x264>
 8000e20:	181c      	adds	r4, r3, r0
 8000e22:	429c      	cmp	r4, r3
 8000e24:	419b      	sbcs	r3, r3
 8000e26:	4449      	add	r1, r9
 8000e28:	468a      	mov	sl, r1
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	449a      	add	sl, r3
 8000e2e:	4653      	mov	r3, sl
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	d400      	bmi.n	8000e36 <__aeabi_dadd+0x63a>
 8000e34:	e607      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000e36:	4652      	mov	r2, sl
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <__aeabi_dadd+0x6bc>)
 8000e3a:	2601      	movs	r6, #1
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	4692      	mov	sl, r2
 8000e40:	e601      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000e42:	003c      	movs	r4, r7
 8000e44:	000e      	movs	r6, r1
 8000e46:	3c20      	subs	r4, #32
 8000e48:	40e6      	lsrs	r6, r4
 8000e4a:	2f20      	cmp	r7, #32
 8000e4c:	d003      	beq.n	8000e56 <__aeabi_dadd+0x65a>
 8000e4e:	2440      	movs	r4, #64	; 0x40
 8000e50:	1be4      	subs	r4, r4, r7
 8000e52:	40a1      	lsls	r1, r4
 8000e54:	430b      	orrs	r3, r1
 8000e56:	001c      	movs	r4, r3
 8000e58:	1e63      	subs	r3, r4, #1
 8000e5a:	419c      	sbcs	r4, r3
 8000e5c:	4334      	orrs	r4, r6
 8000e5e:	e65e      	b.n	8000b1e <__aeabi_dadd+0x322>
 8000e60:	4443      	add	r3, r8
 8000e62:	4283      	cmp	r3, r0
 8000e64:	4180      	sbcs	r0, r0
 8000e66:	4449      	add	r1, r9
 8000e68:	468a      	mov	sl, r1
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	001c      	movs	r4, r3
 8000e6e:	4482      	add	sl, r0
 8000e70:	e6bc      	b.n	8000bec <__aeabi_dadd+0x3f0>
 8000e72:	4653      	mov	r3, sl
 8000e74:	4323      	orrs	r3, r4
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0x67e>
 8000e78:	e6a9      	b.n	8000bce <__aeabi_dadd+0x3d2>
 8000e7a:	e5e4      	b.n	8000a46 <__aeabi_dadd+0x24a>
 8000e7c:	074a      	lsls	r2, r1, #29
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	08c9      	lsrs	r1, r1, #3
 8000e84:	0312      	lsls	r2, r2, #12
 8000e86:	4211      	tst	r1, r2
 8000e88:	d009      	beq.n	8000e9e <__aeabi_dadd+0x6a2>
 8000e8a:	4648      	mov	r0, r9
 8000e8c:	08c4      	lsrs	r4, r0, #3
 8000e8e:	4214      	tst	r4, r2
 8000e90:	d105      	bne.n	8000e9e <__aeabi_dadd+0x6a2>
 8000e92:	4643      	mov	r3, r8
 8000e94:	4665      	mov	r5, ip
 8000e96:	0021      	movs	r1, r4
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	0742      	lsls	r2, r0, #29
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	0f5a      	lsrs	r2, r3, #29
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	0752      	lsls	r2, r2, #29
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	e5fa      	b.n	8000aa0 <__aeabi_dadd+0x2a4>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4a01      	ldr	r2, [pc, #4]	; (8000eb4 <__aeabi_dadd+0x6b8>)
 8000eae:	001c      	movs	r4, r3
 8000eb0:	e540      	b.n	8000934 <__aeabi_dadd+0x138>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000007ff 	.word	0x000007ff
 8000eb8:	ff7fffff 	.word	0xff7fffff

08000ebc <__aeabi_ddiv>:
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	4657      	mov	r7, sl
 8000ec0:	464e      	mov	r6, r9
 8000ec2:	4645      	mov	r5, r8
 8000ec4:	46de      	mov	lr, fp
 8000ec6:	b5e0      	push	{r5, r6, r7, lr}
 8000ec8:	030c      	lsls	r4, r1, #12
 8000eca:	001f      	movs	r7, r3
 8000ecc:	004b      	lsls	r3, r1, #1
 8000ece:	4681      	mov	r9, r0
 8000ed0:	4692      	mov	sl, r2
 8000ed2:	0005      	movs	r5, r0
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	0b24      	lsrs	r4, r4, #12
 8000ed8:	0d5b      	lsrs	r3, r3, #21
 8000eda:	0fce      	lsrs	r6, r1, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x26>
 8000ee0:	e152      	b.n	8001188 <__aeabi_ddiv+0x2cc>
 8000ee2:	4ad2      	ldr	r2, [pc, #840]	; (800122c <__aeabi_ddiv+0x370>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d100      	bne.n	8000eea <__aeabi_ddiv+0x2e>
 8000ee8:	e16e      	b.n	80011c8 <__aeabi_ddiv+0x30c>
 8000eea:	0f42      	lsrs	r2, r0, #29
 8000eec:	00e4      	lsls	r4, r4, #3
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	0412      	lsls	r2, r2, #16
 8000ef4:	4322      	orrs	r2, r4
 8000ef6:	4690      	mov	r8, r2
 8000ef8:	4acd      	ldr	r2, [pc, #820]	; (8001230 <__aeabi_ddiv+0x374>)
 8000efa:	00c5      	lsls	r5, r0, #3
 8000efc:	4693      	mov	fp, r2
 8000efe:	449b      	add	fp, r3
 8000f00:	2300      	movs	r3, #0
 8000f02:	4699      	mov	r9, r3
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	033c      	lsls	r4, r7, #12
 8000f08:	007b      	lsls	r3, r7, #1
 8000f0a:	4650      	mov	r0, sl
 8000f0c:	0b24      	lsrs	r4, r4, #12
 8000f0e:	0d5b      	lsrs	r3, r3, #21
 8000f10:	0fff      	lsrs	r7, r7, #31
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d100      	bne.n	8000f18 <__aeabi_ddiv+0x5c>
 8000f16:	e11a      	b.n	800114e <__aeabi_ddiv+0x292>
 8000f18:	4ac4      	ldr	r2, [pc, #784]	; (800122c <__aeabi_ddiv+0x370>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_ddiv+0x64>
 8000f1e:	e15e      	b.n	80011de <__aeabi_ddiv+0x322>
 8000f20:	0f42      	lsrs	r2, r0, #29
 8000f22:	00e4      	lsls	r4, r4, #3
 8000f24:	4322      	orrs	r2, r4
 8000f26:	2480      	movs	r4, #128	; 0x80
 8000f28:	0424      	lsls	r4, r4, #16
 8000f2a:	4314      	orrs	r4, r2
 8000f2c:	4ac0      	ldr	r2, [pc, #768]	; (8001230 <__aeabi_ddiv+0x374>)
 8000f2e:	00c1      	lsls	r1, r0, #3
 8000f30:	4694      	mov	ip, r2
 8000f32:	465a      	mov	r2, fp
 8000f34:	4463      	add	r3, ip
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	469b      	mov	fp, r3
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	0033      	movs	r3, r6
 8000f3e:	407b      	eors	r3, r7
 8000f40:	469a      	mov	sl, r3
 8000f42:	464b      	mov	r3, r9
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d827      	bhi.n	8000f98 <__aeabi_ddiv+0xdc>
 8000f48:	4aba      	ldr	r2, [pc, #744]	; (8001234 <__aeabi_ddiv+0x378>)
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	58d3      	ldr	r3, [r2, r3]
 8000f4e:	469f      	mov	pc, r3
 8000f50:	46b2      	mov	sl, r6
 8000f52:	9b00      	ldr	r3, [sp, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d016      	beq.n	8000f86 <__aeabi_ddiv+0xca>
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xa2>
 8000f5c:	e287      	b.n	800146e <__aeabi_ddiv+0x5b2>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d000      	beq.n	8000f64 <__aeabi_ddiv+0xa8>
 8000f62:	e0d5      	b.n	8001110 <__aeabi_ddiv+0x254>
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	2500      	movs	r5, #0
 8000f6a:	051b      	lsls	r3, r3, #20
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	4652      	mov	r2, sl
 8000f70:	07d2      	lsls	r2, r2, #31
 8000f72:	4313      	orrs	r3, r2
 8000f74:	0028      	movs	r0, r5
 8000f76:	0019      	movs	r1, r3
 8000f78:	b005      	add	sp, #20
 8000f7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f7c:	46bb      	mov	fp, r7
 8000f7e:	46b2      	mov	sl, r6
 8000f80:	46a9      	mov	r9, r5
 8000f82:	46a0      	mov	r8, r4
 8000f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f86:	2200      	movs	r2, #0
 8000f88:	2500      	movs	r5, #0
 8000f8a:	4ba8      	ldr	r3, [pc, #672]	; (800122c <__aeabi_ddiv+0x370>)
 8000f8c:	e7ed      	b.n	8000f6a <__aeabi_ddiv+0xae>
 8000f8e:	46ba      	mov	sl, r7
 8000f90:	46a0      	mov	r8, r4
 8000f92:	000d      	movs	r5, r1
 8000f94:	9000      	str	r0, [sp, #0]
 8000f96:	e7dc      	b.n	8000f52 <__aeabi_ddiv+0x96>
 8000f98:	4544      	cmp	r4, r8
 8000f9a:	d200      	bcs.n	8000f9e <__aeabi_ddiv+0xe2>
 8000f9c:	e1c4      	b.n	8001328 <__aeabi_ddiv+0x46c>
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_ddiv+0xe6>
 8000fa0:	e1bf      	b.n	8001322 <__aeabi_ddiv+0x466>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	002e      	movs	r6, r5
 8000faa:	4640      	mov	r0, r8
 8000fac:	2500      	movs	r5, #0
 8000fae:	44e3      	add	fp, ip
 8000fb0:	0223      	lsls	r3, r4, #8
 8000fb2:	0e0c      	lsrs	r4, r1, #24
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	0c1b      	lsrs	r3, r3, #16
 8000fb8:	4699      	mov	r9, r3
 8000fba:	0423      	lsls	r3, r4, #16
 8000fbc:	020a      	lsls	r2, r1, #8
 8000fbe:	0c1f      	lsrs	r7, r3, #16
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	9701      	str	r7, [sp, #4]
 8000fc6:	f7ff f92d 	bl	8000224 <__aeabi_uidivmod>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	437a      	muls	r2, r7
 8000fce:	040b      	lsls	r3, r1, #16
 8000fd0:	0c31      	lsrs	r1, r6, #16
 8000fd2:	4680      	mov	r8, r0
 8000fd4:	4319      	orrs	r1, r3
 8000fd6:	428a      	cmp	r2, r1
 8000fd8:	d907      	bls.n	8000fea <__aeabi_ddiv+0x12e>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	425b      	negs	r3, r3
 8000fde:	469c      	mov	ip, r3
 8000fe0:	1909      	adds	r1, r1, r4
 8000fe2:	44e0      	add	r8, ip
 8000fe4:	428c      	cmp	r4, r1
 8000fe6:	d800      	bhi.n	8000fea <__aeabi_ddiv+0x12e>
 8000fe8:	e201      	b.n	80013ee <__aeabi_ddiv+0x532>
 8000fea:	1a88      	subs	r0, r1, r2
 8000fec:	4649      	mov	r1, r9
 8000fee:	f7ff f919 	bl	8000224 <__aeabi_uidivmod>
 8000ff2:	9a01      	ldr	r2, [sp, #4]
 8000ff4:	0436      	lsls	r6, r6, #16
 8000ff6:	4342      	muls	r2, r0
 8000ff8:	0409      	lsls	r1, r1, #16
 8000ffa:	0c36      	lsrs	r6, r6, #16
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	430e      	orrs	r6, r1
 8001000:	42b2      	cmp	r2, r6
 8001002:	d904      	bls.n	800100e <__aeabi_ddiv+0x152>
 8001004:	1936      	adds	r6, r6, r4
 8001006:	3b01      	subs	r3, #1
 8001008:	42b4      	cmp	r4, r6
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x152>
 800100c:	e1e9      	b.n	80013e2 <__aeabi_ddiv+0x526>
 800100e:	1ab0      	subs	r0, r6, r2
 8001010:	4642      	mov	r2, r8
 8001012:	9e00      	ldr	r6, [sp, #0]
 8001014:	0412      	lsls	r2, r2, #16
 8001016:	431a      	orrs	r2, r3
 8001018:	0c33      	lsrs	r3, r6, #16
 800101a:	001f      	movs	r7, r3
 800101c:	0c11      	lsrs	r1, r2, #16
 800101e:	4690      	mov	r8, r2
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	0413      	lsls	r3, r2, #16
 8001024:	0432      	lsls	r2, r6, #16
 8001026:	0c16      	lsrs	r6, r2, #16
 8001028:	0032      	movs	r2, r6
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	435a      	muls	r2, r3
 800102e:	9603      	str	r6, [sp, #12]
 8001030:	437b      	muls	r3, r7
 8001032:	434e      	muls	r6, r1
 8001034:	4379      	muls	r1, r7
 8001036:	0c17      	lsrs	r7, r2, #16
 8001038:	46bc      	mov	ip, r7
 800103a:	199b      	adds	r3, r3, r6
 800103c:	4463      	add	r3, ip
 800103e:	429e      	cmp	r6, r3
 8001040:	d903      	bls.n	800104a <__aeabi_ddiv+0x18e>
 8001042:	2680      	movs	r6, #128	; 0x80
 8001044:	0276      	lsls	r6, r6, #9
 8001046:	46b4      	mov	ip, r6
 8001048:	4461      	add	r1, ip
 800104a:	0c1e      	lsrs	r6, r3, #16
 800104c:	1871      	adds	r1, r6, r1
 800104e:	0416      	lsls	r6, r2, #16
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	0c36      	lsrs	r6, r6, #16
 8001054:	199e      	adds	r6, r3, r6
 8001056:	4288      	cmp	r0, r1
 8001058:	d302      	bcc.n	8001060 <__aeabi_ddiv+0x1a4>
 800105a:	d112      	bne.n	8001082 <__aeabi_ddiv+0x1c6>
 800105c:	42b5      	cmp	r5, r6
 800105e:	d210      	bcs.n	8001082 <__aeabi_ddiv+0x1c6>
 8001060:	4643      	mov	r3, r8
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	9b00      	ldr	r3, [sp, #0]
 8001066:	469c      	mov	ip, r3
 8001068:	4465      	add	r5, ip
 800106a:	001f      	movs	r7, r3
 800106c:	429d      	cmp	r5, r3
 800106e:	419b      	sbcs	r3, r3
 8001070:	425b      	negs	r3, r3
 8001072:	191b      	adds	r3, r3, r4
 8001074:	18c0      	adds	r0, r0, r3
 8001076:	4284      	cmp	r4, r0
 8001078:	d200      	bcs.n	800107c <__aeabi_ddiv+0x1c0>
 800107a:	e19e      	b.n	80013ba <__aeabi_ddiv+0x4fe>
 800107c:	d100      	bne.n	8001080 <__aeabi_ddiv+0x1c4>
 800107e:	e199      	b.n	80013b4 <__aeabi_ddiv+0x4f8>
 8001080:	4690      	mov	r8, r2
 8001082:	1bae      	subs	r6, r5, r6
 8001084:	42b5      	cmp	r5, r6
 8001086:	41ad      	sbcs	r5, r5
 8001088:	1a40      	subs	r0, r0, r1
 800108a:	426d      	negs	r5, r5
 800108c:	1b40      	subs	r0, r0, r5
 800108e:	4284      	cmp	r4, r0
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x1d8>
 8001092:	e1d2      	b.n	800143a <__aeabi_ddiv+0x57e>
 8001094:	4649      	mov	r1, r9
 8001096:	f7ff f8c5 	bl	8000224 <__aeabi_uidivmod>
 800109a:	9a01      	ldr	r2, [sp, #4]
 800109c:	040b      	lsls	r3, r1, #16
 800109e:	4342      	muls	r2, r0
 80010a0:	0c31      	lsrs	r1, r6, #16
 80010a2:	0005      	movs	r5, r0
 80010a4:	4319      	orrs	r1, r3
 80010a6:	428a      	cmp	r2, r1
 80010a8:	d900      	bls.n	80010ac <__aeabi_ddiv+0x1f0>
 80010aa:	e16c      	b.n	8001386 <__aeabi_ddiv+0x4ca>
 80010ac:	1a88      	subs	r0, r1, r2
 80010ae:	4649      	mov	r1, r9
 80010b0:	f7ff f8b8 	bl	8000224 <__aeabi_uidivmod>
 80010b4:	9a01      	ldr	r2, [sp, #4]
 80010b6:	0436      	lsls	r6, r6, #16
 80010b8:	4342      	muls	r2, r0
 80010ba:	0409      	lsls	r1, r1, #16
 80010bc:	0c36      	lsrs	r6, r6, #16
 80010be:	0003      	movs	r3, r0
 80010c0:	430e      	orrs	r6, r1
 80010c2:	42b2      	cmp	r2, r6
 80010c4:	d900      	bls.n	80010c8 <__aeabi_ddiv+0x20c>
 80010c6:	e153      	b.n	8001370 <__aeabi_ddiv+0x4b4>
 80010c8:	9803      	ldr	r0, [sp, #12]
 80010ca:	1ab6      	subs	r6, r6, r2
 80010cc:	0002      	movs	r2, r0
 80010ce:	042d      	lsls	r5, r5, #16
 80010d0:	431d      	orrs	r5, r3
 80010d2:	9f02      	ldr	r7, [sp, #8]
 80010d4:	042b      	lsls	r3, r5, #16
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	435a      	muls	r2, r3
 80010da:	437b      	muls	r3, r7
 80010dc:	469c      	mov	ip, r3
 80010de:	0c29      	lsrs	r1, r5, #16
 80010e0:	4348      	muls	r0, r1
 80010e2:	0c13      	lsrs	r3, r2, #16
 80010e4:	4484      	add	ip, r0
 80010e6:	4463      	add	r3, ip
 80010e8:	4379      	muls	r1, r7
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_ddiv+0x23a>
 80010ee:	2080      	movs	r0, #128	; 0x80
 80010f0:	0240      	lsls	r0, r0, #9
 80010f2:	4684      	mov	ip, r0
 80010f4:	4461      	add	r1, ip
 80010f6:	0c18      	lsrs	r0, r3, #16
 80010f8:	0412      	lsls	r2, r2, #16
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	0c12      	lsrs	r2, r2, #16
 80010fe:	1840      	adds	r0, r0, r1
 8001100:	189b      	adds	r3, r3, r2
 8001102:	4286      	cmp	r6, r0
 8001104:	d200      	bcs.n	8001108 <__aeabi_ddiv+0x24c>
 8001106:	e100      	b.n	800130a <__aeabi_ddiv+0x44e>
 8001108:	d100      	bne.n	800110c <__aeabi_ddiv+0x250>
 800110a:	e0fb      	b.n	8001304 <__aeabi_ddiv+0x448>
 800110c:	2301      	movs	r3, #1
 800110e:	431d      	orrs	r5, r3
 8001110:	4b49      	ldr	r3, [pc, #292]	; (8001238 <__aeabi_ddiv+0x37c>)
 8001112:	445b      	add	r3, fp
 8001114:	2b00      	cmp	r3, #0
 8001116:	dc00      	bgt.n	800111a <__aeabi_ddiv+0x25e>
 8001118:	e0aa      	b.n	8001270 <__aeabi_ddiv+0x3b4>
 800111a:	076a      	lsls	r2, r5, #29
 800111c:	d000      	beq.n	8001120 <__aeabi_ddiv+0x264>
 800111e:	e13d      	b.n	800139c <__aeabi_ddiv+0x4e0>
 8001120:	08e9      	lsrs	r1, r5, #3
 8001122:	4642      	mov	r2, r8
 8001124:	01d2      	lsls	r2, r2, #7
 8001126:	d506      	bpl.n	8001136 <__aeabi_ddiv+0x27a>
 8001128:	4642      	mov	r2, r8
 800112a:	4b44      	ldr	r3, [pc, #272]	; (800123c <__aeabi_ddiv+0x380>)
 800112c:	401a      	ands	r2, r3
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	4690      	mov	r8, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	445b      	add	r3, fp
 8001136:	4a42      	ldr	r2, [pc, #264]	; (8001240 <__aeabi_ddiv+0x384>)
 8001138:	4293      	cmp	r3, r2
 800113a:	dd00      	ble.n	800113e <__aeabi_ddiv+0x282>
 800113c:	e723      	b.n	8000f86 <__aeabi_ddiv+0xca>
 800113e:	4642      	mov	r2, r8
 8001140:	055b      	lsls	r3, r3, #21
 8001142:	0755      	lsls	r5, r2, #29
 8001144:	0252      	lsls	r2, r2, #9
 8001146:	430d      	orrs	r5, r1
 8001148:	0b12      	lsrs	r2, r2, #12
 800114a:	0d5b      	lsrs	r3, r3, #21
 800114c:	e70d      	b.n	8000f6a <__aeabi_ddiv+0xae>
 800114e:	4651      	mov	r1, sl
 8001150:	4321      	orrs	r1, r4
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x29a>
 8001154:	e07c      	b.n	8001250 <__aeabi_ddiv+0x394>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x2a0>
 800115a:	e0fb      	b.n	8001354 <__aeabi_ddiv+0x498>
 800115c:	0020      	movs	r0, r4
 800115e:	f001 f9dd 	bl	800251c <__clzsi2>
 8001162:	0002      	movs	r2, r0
 8001164:	3a0b      	subs	r2, #11
 8001166:	231d      	movs	r3, #29
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	4652      	mov	r2, sl
 800116c:	0001      	movs	r1, r0
 800116e:	40da      	lsrs	r2, r3
 8001170:	4653      	mov	r3, sl
 8001172:	3908      	subs	r1, #8
 8001174:	408b      	lsls	r3, r1
 8001176:	408c      	lsls	r4, r1
 8001178:	0019      	movs	r1, r3
 800117a:	4314      	orrs	r4, r2
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <__aeabi_ddiv+0x388>)
 800117e:	4458      	add	r0, fp
 8001180:	469b      	mov	fp, r3
 8001182:	4483      	add	fp, r0
 8001184:	2000      	movs	r0, #0
 8001186:	e6d9      	b.n	8000f3c <__aeabi_ddiv+0x80>
 8001188:	0003      	movs	r3, r0
 800118a:	4323      	orrs	r3, r4
 800118c:	4698      	mov	r8, r3
 800118e:	d044      	beq.n	800121a <__aeabi_ddiv+0x35e>
 8001190:	2c00      	cmp	r4, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x2da>
 8001194:	e0cf      	b.n	8001336 <__aeabi_ddiv+0x47a>
 8001196:	0020      	movs	r0, r4
 8001198:	f001 f9c0 	bl	800251c <__clzsi2>
 800119c:	0001      	movs	r1, r0
 800119e:	0002      	movs	r2, r0
 80011a0:	390b      	subs	r1, #11
 80011a2:	231d      	movs	r3, #29
 80011a4:	1a5b      	subs	r3, r3, r1
 80011a6:	4649      	mov	r1, r9
 80011a8:	0010      	movs	r0, r2
 80011aa:	40d9      	lsrs	r1, r3
 80011ac:	3808      	subs	r0, #8
 80011ae:	4084      	lsls	r4, r0
 80011b0:	000b      	movs	r3, r1
 80011b2:	464d      	mov	r5, r9
 80011b4:	4323      	orrs	r3, r4
 80011b6:	4698      	mov	r8, r3
 80011b8:	4085      	lsls	r5, r0
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <__aeabi_ddiv+0x38c>)
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	469b      	mov	fp, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	4699      	mov	r9, r3
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	e69e      	b.n	8000f06 <__aeabi_ddiv+0x4a>
 80011c8:	0002      	movs	r2, r0
 80011ca:	4322      	orrs	r2, r4
 80011cc:	4690      	mov	r8, r2
 80011ce:	d11d      	bne.n	800120c <__aeabi_ddiv+0x350>
 80011d0:	2208      	movs	r2, #8
 80011d2:	469b      	mov	fp, r3
 80011d4:	2302      	movs	r3, #2
 80011d6:	2500      	movs	r5, #0
 80011d8:	4691      	mov	r9, r2
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	e693      	b.n	8000f06 <__aeabi_ddiv+0x4a>
 80011de:	4651      	mov	r1, sl
 80011e0:	4321      	orrs	r1, r4
 80011e2:	d109      	bne.n	80011f8 <__aeabi_ddiv+0x33c>
 80011e4:	2302      	movs	r3, #2
 80011e6:	464a      	mov	r2, r9
 80011e8:	431a      	orrs	r2, r3
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <__aeabi_ddiv+0x390>)
 80011ec:	4691      	mov	r9, r2
 80011ee:	469c      	mov	ip, r3
 80011f0:	2400      	movs	r4, #0
 80011f2:	2002      	movs	r0, #2
 80011f4:	44e3      	add	fp, ip
 80011f6:	e6a1      	b.n	8000f3c <__aeabi_ddiv+0x80>
 80011f8:	2303      	movs	r3, #3
 80011fa:	464a      	mov	r2, r9
 80011fc:	431a      	orrs	r2, r3
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <__aeabi_ddiv+0x390>)
 8001200:	4691      	mov	r9, r2
 8001202:	469c      	mov	ip, r3
 8001204:	4651      	mov	r1, sl
 8001206:	2003      	movs	r0, #3
 8001208:	44e3      	add	fp, ip
 800120a:	e697      	b.n	8000f3c <__aeabi_ddiv+0x80>
 800120c:	220c      	movs	r2, #12
 800120e:	469b      	mov	fp, r3
 8001210:	2303      	movs	r3, #3
 8001212:	46a0      	mov	r8, r4
 8001214:	4691      	mov	r9, r2
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	e675      	b.n	8000f06 <__aeabi_ddiv+0x4a>
 800121a:	2304      	movs	r3, #4
 800121c:	4699      	mov	r9, r3
 800121e:	2300      	movs	r3, #0
 8001220:	469b      	mov	fp, r3
 8001222:	3301      	adds	r3, #1
 8001224:	2500      	movs	r5, #0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	e66d      	b.n	8000f06 <__aeabi_ddiv+0x4a>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	000007ff 	.word	0x000007ff
 8001230:	fffffc01 	.word	0xfffffc01
 8001234:	0800833c 	.word	0x0800833c
 8001238:	000003ff 	.word	0x000003ff
 800123c:	feffffff 	.word	0xfeffffff
 8001240:	000007fe 	.word	0x000007fe
 8001244:	000003f3 	.word	0x000003f3
 8001248:	fffffc0d 	.word	0xfffffc0d
 800124c:	fffff801 	.word	0xfffff801
 8001250:	464a      	mov	r2, r9
 8001252:	2301      	movs	r3, #1
 8001254:	431a      	orrs	r2, r3
 8001256:	4691      	mov	r9, r2
 8001258:	2400      	movs	r4, #0
 800125a:	2001      	movs	r0, #1
 800125c:	e66e      	b.n	8000f3c <__aeabi_ddiv+0x80>
 800125e:	2300      	movs	r3, #0
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	469a      	mov	sl, r3
 8001264:	2500      	movs	r5, #0
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <__aeabi_ddiv+0x5cc>)
 8001268:	0312      	lsls	r2, r2, #12
 800126a:	e67e      	b.n	8000f6a <__aeabi_ddiv+0xae>
 800126c:	2501      	movs	r5, #1
 800126e:	426d      	negs	r5, r5
 8001270:	2201      	movs	r2, #1
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	2a38      	cmp	r2, #56	; 0x38
 8001276:	dd00      	ble.n	800127a <__aeabi_ddiv+0x3be>
 8001278:	e674      	b.n	8000f64 <__aeabi_ddiv+0xa8>
 800127a:	2a1f      	cmp	r2, #31
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x3c4>
 800127e:	e0bd      	b.n	80013fc <__aeabi_ddiv+0x540>
 8001280:	211f      	movs	r1, #31
 8001282:	4249      	negs	r1, r1
 8001284:	1acb      	subs	r3, r1, r3
 8001286:	4641      	mov	r1, r8
 8001288:	40d9      	lsrs	r1, r3
 800128a:	000b      	movs	r3, r1
 800128c:	2a20      	cmp	r2, #32
 800128e:	d004      	beq.n	800129a <__aeabi_ddiv+0x3de>
 8001290:	4641      	mov	r1, r8
 8001292:	4a7e      	ldr	r2, [pc, #504]	; (800148c <__aeabi_ddiv+0x5d0>)
 8001294:	445a      	add	r2, fp
 8001296:	4091      	lsls	r1, r2
 8001298:	430d      	orrs	r5, r1
 800129a:	0029      	movs	r1, r5
 800129c:	1e4a      	subs	r2, r1, #1
 800129e:	4191      	sbcs	r1, r2
 80012a0:	4319      	orrs	r1, r3
 80012a2:	2307      	movs	r3, #7
 80012a4:	001d      	movs	r5, r3
 80012a6:	2200      	movs	r2, #0
 80012a8:	400d      	ands	r5, r1
 80012aa:	420b      	tst	r3, r1
 80012ac:	d100      	bne.n	80012b0 <__aeabi_ddiv+0x3f4>
 80012ae:	e0d0      	b.n	8001452 <__aeabi_ddiv+0x596>
 80012b0:	220f      	movs	r2, #15
 80012b2:	2300      	movs	r3, #0
 80012b4:	400a      	ands	r2, r1
 80012b6:	2a04      	cmp	r2, #4
 80012b8:	d100      	bne.n	80012bc <__aeabi_ddiv+0x400>
 80012ba:	e0c7      	b.n	800144c <__aeabi_ddiv+0x590>
 80012bc:	1d0a      	adds	r2, r1, #4
 80012be:	428a      	cmp	r2, r1
 80012c0:	4189      	sbcs	r1, r1
 80012c2:	4249      	negs	r1, r1
 80012c4:	185b      	adds	r3, r3, r1
 80012c6:	0011      	movs	r1, r2
 80012c8:	021a      	lsls	r2, r3, #8
 80012ca:	d400      	bmi.n	80012ce <__aeabi_ddiv+0x412>
 80012cc:	e0be      	b.n	800144c <__aeabi_ddiv+0x590>
 80012ce:	2301      	movs	r3, #1
 80012d0:	2200      	movs	r2, #0
 80012d2:	2500      	movs	r5, #0
 80012d4:	e649      	b.n	8000f6a <__aeabi_ddiv+0xae>
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	4643      	mov	r3, r8
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	4213      	tst	r3, r2
 80012de:	d008      	beq.n	80012f2 <__aeabi_ddiv+0x436>
 80012e0:	4214      	tst	r4, r2
 80012e2:	d106      	bne.n	80012f2 <__aeabi_ddiv+0x436>
 80012e4:	4322      	orrs	r2, r4
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	46ba      	mov	sl, r7
 80012ea:	000d      	movs	r5, r1
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <__aeabi_ddiv+0x5cc>)
 80012ee:	0b12      	lsrs	r2, r2, #12
 80012f0:	e63b      	b.n	8000f6a <__aeabi_ddiv+0xae>
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	4643      	mov	r3, r8
 80012f6:	0312      	lsls	r2, r2, #12
 80012f8:	431a      	orrs	r2, r3
 80012fa:	0312      	lsls	r2, r2, #12
 80012fc:	46b2      	mov	sl, r6
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <__aeabi_ddiv+0x5cc>)
 8001300:	0b12      	lsrs	r2, r2, #12
 8001302:	e632      	b.n	8000f6a <__aeabi_ddiv+0xae>
 8001304:	2b00      	cmp	r3, #0
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0x44e>
 8001308:	e702      	b.n	8001110 <__aeabi_ddiv+0x254>
 800130a:	19a6      	adds	r6, r4, r6
 800130c:	1e6a      	subs	r2, r5, #1
 800130e:	42a6      	cmp	r6, r4
 8001310:	d200      	bcs.n	8001314 <__aeabi_ddiv+0x458>
 8001312:	e089      	b.n	8001428 <__aeabi_ddiv+0x56c>
 8001314:	4286      	cmp	r6, r0
 8001316:	d200      	bcs.n	800131a <__aeabi_ddiv+0x45e>
 8001318:	e09f      	b.n	800145a <__aeabi_ddiv+0x59e>
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0x462>
 800131c:	e0af      	b.n	800147e <__aeabi_ddiv+0x5c2>
 800131e:	0015      	movs	r5, r2
 8001320:	e6f4      	b.n	800110c <__aeabi_ddiv+0x250>
 8001322:	42a9      	cmp	r1, r5
 8001324:	d900      	bls.n	8001328 <__aeabi_ddiv+0x46c>
 8001326:	e63c      	b.n	8000fa2 <__aeabi_ddiv+0xe6>
 8001328:	4643      	mov	r3, r8
 800132a:	07de      	lsls	r6, r3, #31
 800132c:	0858      	lsrs	r0, r3, #1
 800132e:	086b      	lsrs	r3, r5, #1
 8001330:	431e      	orrs	r6, r3
 8001332:	07ed      	lsls	r5, r5, #31
 8001334:	e63c      	b.n	8000fb0 <__aeabi_ddiv+0xf4>
 8001336:	f001 f8f1 	bl	800251c <__clzsi2>
 800133a:	0001      	movs	r1, r0
 800133c:	0002      	movs	r2, r0
 800133e:	3115      	adds	r1, #21
 8001340:	3220      	adds	r2, #32
 8001342:	291c      	cmp	r1, #28
 8001344:	dc00      	bgt.n	8001348 <__aeabi_ddiv+0x48c>
 8001346:	e72c      	b.n	80011a2 <__aeabi_ddiv+0x2e6>
 8001348:	464b      	mov	r3, r9
 800134a:	3808      	subs	r0, #8
 800134c:	4083      	lsls	r3, r0
 800134e:	2500      	movs	r5, #0
 8001350:	4698      	mov	r8, r3
 8001352:	e732      	b.n	80011ba <__aeabi_ddiv+0x2fe>
 8001354:	f001 f8e2 	bl	800251c <__clzsi2>
 8001358:	0003      	movs	r3, r0
 800135a:	001a      	movs	r2, r3
 800135c:	3215      	adds	r2, #21
 800135e:	3020      	adds	r0, #32
 8001360:	2a1c      	cmp	r2, #28
 8001362:	dc00      	bgt.n	8001366 <__aeabi_ddiv+0x4aa>
 8001364:	e6ff      	b.n	8001166 <__aeabi_ddiv+0x2aa>
 8001366:	4654      	mov	r4, sl
 8001368:	3b08      	subs	r3, #8
 800136a:	2100      	movs	r1, #0
 800136c:	409c      	lsls	r4, r3
 800136e:	e705      	b.n	800117c <__aeabi_ddiv+0x2c0>
 8001370:	1936      	adds	r6, r6, r4
 8001372:	3b01      	subs	r3, #1
 8001374:	42b4      	cmp	r4, r6
 8001376:	d900      	bls.n	800137a <__aeabi_ddiv+0x4be>
 8001378:	e6a6      	b.n	80010c8 <__aeabi_ddiv+0x20c>
 800137a:	42b2      	cmp	r2, r6
 800137c:	d800      	bhi.n	8001380 <__aeabi_ddiv+0x4c4>
 800137e:	e6a3      	b.n	80010c8 <__aeabi_ddiv+0x20c>
 8001380:	1e83      	subs	r3, r0, #2
 8001382:	1936      	adds	r6, r6, r4
 8001384:	e6a0      	b.n	80010c8 <__aeabi_ddiv+0x20c>
 8001386:	1909      	adds	r1, r1, r4
 8001388:	3d01      	subs	r5, #1
 800138a:	428c      	cmp	r4, r1
 800138c:	d900      	bls.n	8001390 <__aeabi_ddiv+0x4d4>
 800138e:	e68d      	b.n	80010ac <__aeabi_ddiv+0x1f0>
 8001390:	428a      	cmp	r2, r1
 8001392:	d800      	bhi.n	8001396 <__aeabi_ddiv+0x4da>
 8001394:	e68a      	b.n	80010ac <__aeabi_ddiv+0x1f0>
 8001396:	1e85      	subs	r5, r0, #2
 8001398:	1909      	adds	r1, r1, r4
 800139a:	e687      	b.n	80010ac <__aeabi_ddiv+0x1f0>
 800139c:	220f      	movs	r2, #15
 800139e:	402a      	ands	r2, r5
 80013a0:	2a04      	cmp	r2, #4
 80013a2:	d100      	bne.n	80013a6 <__aeabi_ddiv+0x4ea>
 80013a4:	e6bc      	b.n	8001120 <__aeabi_ddiv+0x264>
 80013a6:	1d29      	adds	r1, r5, #4
 80013a8:	42a9      	cmp	r1, r5
 80013aa:	41ad      	sbcs	r5, r5
 80013ac:	426d      	negs	r5, r5
 80013ae:	08c9      	lsrs	r1, r1, #3
 80013b0:	44a8      	add	r8, r5
 80013b2:	e6b6      	b.n	8001122 <__aeabi_ddiv+0x266>
 80013b4:	42af      	cmp	r7, r5
 80013b6:	d900      	bls.n	80013ba <__aeabi_ddiv+0x4fe>
 80013b8:	e662      	b.n	8001080 <__aeabi_ddiv+0x1c4>
 80013ba:	4281      	cmp	r1, r0
 80013bc:	d804      	bhi.n	80013c8 <__aeabi_ddiv+0x50c>
 80013be:	d000      	beq.n	80013c2 <__aeabi_ddiv+0x506>
 80013c0:	e65e      	b.n	8001080 <__aeabi_ddiv+0x1c4>
 80013c2:	42ae      	cmp	r6, r5
 80013c4:	d800      	bhi.n	80013c8 <__aeabi_ddiv+0x50c>
 80013c6:	e65b      	b.n	8001080 <__aeabi_ddiv+0x1c4>
 80013c8:	2302      	movs	r3, #2
 80013ca:	425b      	negs	r3, r3
 80013cc:	469c      	mov	ip, r3
 80013ce:	9b00      	ldr	r3, [sp, #0]
 80013d0:	44e0      	add	r8, ip
 80013d2:	469c      	mov	ip, r3
 80013d4:	4465      	add	r5, ip
 80013d6:	429d      	cmp	r5, r3
 80013d8:	419b      	sbcs	r3, r3
 80013da:	425b      	negs	r3, r3
 80013dc:	191b      	adds	r3, r3, r4
 80013de:	18c0      	adds	r0, r0, r3
 80013e0:	e64f      	b.n	8001082 <__aeabi_ddiv+0x1c6>
 80013e2:	42b2      	cmp	r2, r6
 80013e4:	d800      	bhi.n	80013e8 <__aeabi_ddiv+0x52c>
 80013e6:	e612      	b.n	800100e <__aeabi_ddiv+0x152>
 80013e8:	1e83      	subs	r3, r0, #2
 80013ea:	1936      	adds	r6, r6, r4
 80013ec:	e60f      	b.n	800100e <__aeabi_ddiv+0x152>
 80013ee:	428a      	cmp	r2, r1
 80013f0:	d800      	bhi.n	80013f4 <__aeabi_ddiv+0x538>
 80013f2:	e5fa      	b.n	8000fea <__aeabi_ddiv+0x12e>
 80013f4:	1e83      	subs	r3, r0, #2
 80013f6:	4698      	mov	r8, r3
 80013f8:	1909      	adds	r1, r1, r4
 80013fa:	e5f6      	b.n	8000fea <__aeabi_ddiv+0x12e>
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <__aeabi_ddiv+0x5d4>)
 80013fe:	0028      	movs	r0, r5
 8001400:	445b      	add	r3, fp
 8001402:	4641      	mov	r1, r8
 8001404:	409d      	lsls	r5, r3
 8001406:	4099      	lsls	r1, r3
 8001408:	40d0      	lsrs	r0, r2
 800140a:	1e6b      	subs	r3, r5, #1
 800140c:	419d      	sbcs	r5, r3
 800140e:	4643      	mov	r3, r8
 8001410:	4301      	orrs	r1, r0
 8001412:	4329      	orrs	r1, r5
 8001414:	40d3      	lsrs	r3, r2
 8001416:	074a      	lsls	r2, r1, #29
 8001418:	d100      	bne.n	800141c <__aeabi_ddiv+0x560>
 800141a:	e755      	b.n	80012c8 <__aeabi_ddiv+0x40c>
 800141c:	220f      	movs	r2, #15
 800141e:	400a      	ands	r2, r1
 8001420:	2a04      	cmp	r2, #4
 8001422:	d000      	beq.n	8001426 <__aeabi_ddiv+0x56a>
 8001424:	e74a      	b.n	80012bc <__aeabi_ddiv+0x400>
 8001426:	e74f      	b.n	80012c8 <__aeabi_ddiv+0x40c>
 8001428:	0015      	movs	r5, r2
 800142a:	4286      	cmp	r6, r0
 800142c:	d000      	beq.n	8001430 <__aeabi_ddiv+0x574>
 800142e:	e66d      	b.n	800110c <__aeabi_ddiv+0x250>
 8001430:	9a00      	ldr	r2, [sp, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d000      	beq.n	8001438 <__aeabi_ddiv+0x57c>
 8001436:	e669      	b.n	800110c <__aeabi_ddiv+0x250>
 8001438:	e66a      	b.n	8001110 <__aeabi_ddiv+0x254>
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <__aeabi_ddiv+0x5d8>)
 800143c:	445b      	add	r3, fp
 800143e:	2b00      	cmp	r3, #0
 8001440:	dc00      	bgt.n	8001444 <__aeabi_ddiv+0x588>
 8001442:	e713      	b.n	800126c <__aeabi_ddiv+0x3b0>
 8001444:	2501      	movs	r5, #1
 8001446:	2100      	movs	r1, #0
 8001448:	44a8      	add	r8, r5
 800144a:	e66a      	b.n	8001122 <__aeabi_ddiv+0x266>
 800144c:	075d      	lsls	r5, r3, #29
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	0b1a      	lsrs	r2, r3, #12
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	2300      	movs	r3, #0
 8001456:	430d      	orrs	r5, r1
 8001458:	e587      	b.n	8000f6a <__aeabi_ddiv+0xae>
 800145a:	9900      	ldr	r1, [sp, #0]
 800145c:	3d02      	subs	r5, #2
 800145e:	004a      	lsls	r2, r1, #1
 8001460:	428a      	cmp	r2, r1
 8001462:	41bf      	sbcs	r7, r7
 8001464:	427f      	negs	r7, r7
 8001466:	193f      	adds	r7, r7, r4
 8001468:	19f6      	adds	r6, r6, r7
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	e7dd      	b.n	800142a <__aeabi_ddiv+0x56e>
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	4643      	mov	r3, r8
 8001472:	0312      	lsls	r2, r2, #12
 8001474:	431a      	orrs	r2, r3
 8001476:	0312      	lsls	r2, r2, #12
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <__aeabi_ddiv+0x5cc>)
 800147a:	0b12      	lsrs	r2, r2, #12
 800147c:	e575      	b.n	8000f6a <__aeabi_ddiv+0xae>
 800147e:	9900      	ldr	r1, [sp, #0]
 8001480:	4299      	cmp	r1, r3
 8001482:	d3ea      	bcc.n	800145a <__aeabi_ddiv+0x59e>
 8001484:	0015      	movs	r5, r2
 8001486:	e7d3      	b.n	8001430 <__aeabi_ddiv+0x574>
 8001488:	000007ff 	.word	0x000007ff
 800148c:	0000043e 	.word	0x0000043e
 8001490:	0000041e 	.word	0x0000041e
 8001494:	000003ff 	.word	0x000003ff

08001498 <__eqdf2>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	464e      	mov	r6, r9
 800149c:	4645      	mov	r5, r8
 800149e:	46de      	mov	lr, fp
 80014a0:	4657      	mov	r7, sl
 80014a2:	4690      	mov	r8, r2
 80014a4:	b5e0      	push	{r5, r6, r7, lr}
 80014a6:	0017      	movs	r7, r2
 80014a8:	031a      	lsls	r2, r3, #12
 80014aa:	0b12      	lsrs	r2, r2, #12
 80014ac:	0005      	movs	r5, r0
 80014ae:	4684      	mov	ip, r0
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <__eqdf2+0x80>)
 80014b2:	030e      	lsls	r6, r1, #12
 80014b4:	004c      	lsls	r4, r1, #1
 80014b6:	4691      	mov	r9, r2
 80014b8:	005a      	lsls	r2, r3, #1
 80014ba:	0fdb      	lsrs	r3, r3, #31
 80014bc:	469b      	mov	fp, r3
 80014be:	0b36      	lsrs	r6, r6, #12
 80014c0:	0d64      	lsrs	r4, r4, #21
 80014c2:	0fc9      	lsrs	r1, r1, #31
 80014c4:	0d52      	lsrs	r2, r2, #21
 80014c6:	4284      	cmp	r4, r0
 80014c8:	d019      	beq.n	80014fe <__eqdf2+0x66>
 80014ca:	4282      	cmp	r2, r0
 80014cc:	d010      	beq.n	80014f0 <__eqdf2+0x58>
 80014ce:	2001      	movs	r0, #1
 80014d0:	4294      	cmp	r4, r2
 80014d2:	d10e      	bne.n	80014f2 <__eqdf2+0x5a>
 80014d4:	454e      	cmp	r6, r9
 80014d6:	d10c      	bne.n	80014f2 <__eqdf2+0x5a>
 80014d8:	2001      	movs	r0, #1
 80014da:	45c4      	cmp	ip, r8
 80014dc:	d109      	bne.n	80014f2 <__eqdf2+0x5a>
 80014de:	4559      	cmp	r1, fp
 80014e0:	d017      	beq.n	8001512 <__eqdf2+0x7a>
 80014e2:	2c00      	cmp	r4, #0
 80014e4:	d105      	bne.n	80014f2 <__eqdf2+0x5a>
 80014e6:	0030      	movs	r0, r6
 80014e8:	4328      	orrs	r0, r5
 80014ea:	1e43      	subs	r3, r0, #1
 80014ec:	4198      	sbcs	r0, r3
 80014ee:	e000      	b.n	80014f2 <__eqdf2+0x5a>
 80014f0:	2001      	movs	r0, #1
 80014f2:	bcf0      	pop	{r4, r5, r6, r7}
 80014f4:	46bb      	mov	fp, r7
 80014f6:	46b2      	mov	sl, r6
 80014f8:	46a9      	mov	r9, r5
 80014fa:	46a0      	mov	r8, r4
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fe:	0033      	movs	r3, r6
 8001500:	2001      	movs	r0, #1
 8001502:	432b      	orrs	r3, r5
 8001504:	d1f5      	bne.n	80014f2 <__eqdf2+0x5a>
 8001506:	42a2      	cmp	r2, r4
 8001508:	d1f3      	bne.n	80014f2 <__eqdf2+0x5a>
 800150a:	464b      	mov	r3, r9
 800150c:	433b      	orrs	r3, r7
 800150e:	d1f0      	bne.n	80014f2 <__eqdf2+0x5a>
 8001510:	e7e2      	b.n	80014d8 <__eqdf2+0x40>
 8001512:	2000      	movs	r0, #0
 8001514:	e7ed      	b.n	80014f2 <__eqdf2+0x5a>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	000007ff 	.word	0x000007ff

0800151c <__gedf2>:
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	4647      	mov	r7, r8
 8001520:	46ce      	mov	lr, r9
 8001522:	0004      	movs	r4, r0
 8001524:	0018      	movs	r0, r3
 8001526:	0016      	movs	r6, r2
 8001528:	031b      	lsls	r3, r3, #12
 800152a:	0b1b      	lsrs	r3, r3, #12
 800152c:	4d2d      	ldr	r5, [pc, #180]	; (80015e4 <__gedf2+0xc8>)
 800152e:	004a      	lsls	r2, r1, #1
 8001530:	4699      	mov	r9, r3
 8001532:	b580      	push	{r7, lr}
 8001534:	0043      	lsls	r3, r0, #1
 8001536:	030f      	lsls	r7, r1, #12
 8001538:	46a4      	mov	ip, r4
 800153a:	46b0      	mov	r8, r6
 800153c:	0b3f      	lsrs	r7, r7, #12
 800153e:	0d52      	lsrs	r2, r2, #21
 8001540:	0fc9      	lsrs	r1, r1, #31
 8001542:	0d5b      	lsrs	r3, r3, #21
 8001544:	0fc0      	lsrs	r0, r0, #31
 8001546:	42aa      	cmp	r2, r5
 8001548:	d021      	beq.n	800158e <__gedf2+0x72>
 800154a:	42ab      	cmp	r3, r5
 800154c:	d013      	beq.n	8001576 <__gedf2+0x5a>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d122      	bne.n	8001598 <__gedf2+0x7c>
 8001552:	433c      	orrs	r4, r7
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <__gedf2+0x42>
 8001558:	464d      	mov	r5, r9
 800155a:	432e      	orrs	r6, r5
 800155c:	d022      	beq.n	80015a4 <__gedf2+0x88>
 800155e:	2c00      	cmp	r4, #0
 8001560:	d010      	beq.n	8001584 <__gedf2+0x68>
 8001562:	4281      	cmp	r1, r0
 8001564:	d022      	beq.n	80015ac <__gedf2+0x90>
 8001566:	2002      	movs	r0, #2
 8001568:	3901      	subs	r1, #1
 800156a:	4008      	ands	r0, r1
 800156c:	3801      	subs	r0, #1
 800156e:	bcc0      	pop	{r6, r7}
 8001570:	46b9      	mov	r9, r7
 8001572:	46b0      	mov	r8, r6
 8001574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001576:	464d      	mov	r5, r9
 8001578:	432e      	orrs	r6, r5
 800157a:	d129      	bne.n	80015d0 <__gedf2+0xb4>
 800157c:	2a00      	cmp	r2, #0
 800157e:	d1f0      	bne.n	8001562 <__gedf2+0x46>
 8001580:	433c      	orrs	r4, r7
 8001582:	d1ee      	bne.n	8001562 <__gedf2+0x46>
 8001584:	2800      	cmp	r0, #0
 8001586:	d1f2      	bne.n	800156e <__gedf2+0x52>
 8001588:	2001      	movs	r0, #1
 800158a:	4240      	negs	r0, r0
 800158c:	e7ef      	b.n	800156e <__gedf2+0x52>
 800158e:	003d      	movs	r5, r7
 8001590:	4325      	orrs	r5, r4
 8001592:	d11d      	bne.n	80015d0 <__gedf2+0xb4>
 8001594:	4293      	cmp	r3, r2
 8001596:	d0ee      	beq.n	8001576 <__gedf2+0x5a>
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e2      	bne.n	8001562 <__gedf2+0x46>
 800159c:	464c      	mov	r4, r9
 800159e:	4326      	orrs	r6, r4
 80015a0:	d1df      	bne.n	8001562 <__gedf2+0x46>
 80015a2:	e7e0      	b.n	8001566 <__gedf2+0x4a>
 80015a4:	2000      	movs	r0, #0
 80015a6:	2c00      	cmp	r4, #0
 80015a8:	d0e1      	beq.n	800156e <__gedf2+0x52>
 80015aa:	e7dc      	b.n	8001566 <__gedf2+0x4a>
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dc0a      	bgt.n	80015c6 <__gedf2+0xaa>
 80015b0:	dbe8      	blt.n	8001584 <__gedf2+0x68>
 80015b2:	454f      	cmp	r7, r9
 80015b4:	d8d7      	bhi.n	8001566 <__gedf2+0x4a>
 80015b6:	d00e      	beq.n	80015d6 <__gedf2+0xba>
 80015b8:	2000      	movs	r0, #0
 80015ba:	454f      	cmp	r7, r9
 80015bc:	d2d7      	bcs.n	800156e <__gedf2+0x52>
 80015be:	2900      	cmp	r1, #0
 80015c0:	d0e2      	beq.n	8001588 <__gedf2+0x6c>
 80015c2:	0008      	movs	r0, r1
 80015c4:	e7d3      	b.n	800156e <__gedf2+0x52>
 80015c6:	4243      	negs	r3, r0
 80015c8:	4158      	adcs	r0, r3
 80015ca:	0040      	lsls	r0, r0, #1
 80015cc:	3801      	subs	r0, #1
 80015ce:	e7ce      	b.n	800156e <__gedf2+0x52>
 80015d0:	2002      	movs	r0, #2
 80015d2:	4240      	negs	r0, r0
 80015d4:	e7cb      	b.n	800156e <__gedf2+0x52>
 80015d6:	45c4      	cmp	ip, r8
 80015d8:	d8c5      	bhi.n	8001566 <__gedf2+0x4a>
 80015da:	2000      	movs	r0, #0
 80015dc:	45c4      	cmp	ip, r8
 80015de:	d2c6      	bcs.n	800156e <__gedf2+0x52>
 80015e0:	e7ed      	b.n	80015be <__gedf2+0xa2>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	000007ff 	.word	0x000007ff

080015e8 <__ledf2>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4647      	mov	r7, r8
 80015ec:	46ce      	mov	lr, r9
 80015ee:	0004      	movs	r4, r0
 80015f0:	0018      	movs	r0, r3
 80015f2:	0016      	movs	r6, r2
 80015f4:	031b      	lsls	r3, r3, #12
 80015f6:	0b1b      	lsrs	r3, r3, #12
 80015f8:	4d2c      	ldr	r5, [pc, #176]	; (80016ac <__ledf2+0xc4>)
 80015fa:	004a      	lsls	r2, r1, #1
 80015fc:	4699      	mov	r9, r3
 80015fe:	b580      	push	{r7, lr}
 8001600:	0043      	lsls	r3, r0, #1
 8001602:	030f      	lsls	r7, r1, #12
 8001604:	46a4      	mov	ip, r4
 8001606:	46b0      	mov	r8, r6
 8001608:	0b3f      	lsrs	r7, r7, #12
 800160a:	0d52      	lsrs	r2, r2, #21
 800160c:	0fc9      	lsrs	r1, r1, #31
 800160e:	0d5b      	lsrs	r3, r3, #21
 8001610:	0fc0      	lsrs	r0, r0, #31
 8001612:	42aa      	cmp	r2, r5
 8001614:	d00d      	beq.n	8001632 <__ledf2+0x4a>
 8001616:	42ab      	cmp	r3, r5
 8001618:	d010      	beq.n	800163c <__ledf2+0x54>
 800161a:	2a00      	cmp	r2, #0
 800161c:	d127      	bne.n	800166e <__ledf2+0x86>
 800161e:	433c      	orrs	r4, r7
 8001620:	2b00      	cmp	r3, #0
 8001622:	d111      	bne.n	8001648 <__ledf2+0x60>
 8001624:	464d      	mov	r5, r9
 8001626:	432e      	orrs	r6, r5
 8001628:	d10e      	bne.n	8001648 <__ledf2+0x60>
 800162a:	2000      	movs	r0, #0
 800162c:	2c00      	cmp	r4, #0
 800162e:	d015      	beq.n	800165c <__ledf2+0x74>
 8001630:	e00e      	b.n	8001650 <__ledf2+0x68>
 8001632:	003d      	movs	r5, r7
 8001634:	4325      	orrs	r5, r4
 8001636:	d110      	bne.n	800165a <__ledf2+0x72>
 8001638:	4293      	cmp	r3, r2
 800163a:	d118      	bne.n	800166e <__ledf2+0x86>
 800163c:	464d      	mov	r5, r9
 800163e:	432e      	orrs	r6, r5
 8001640:	d10b      	bne.n	800165a <__ledf2+0x72>
 8001642:	2a00      	cmp	r2, #0
 8001644:	d102      	bne.n	800164c <__ledf2+0x64>
 8001646:	433c      	orrs	r4, r7
 8001648:	2c00      	cmp	r4, #0
 800164a:	d00b      	beq.n	8001664 <__ledf2+0x7c>
 800164c:	4281      	cmp	r1, r0
 800164e:	d014      	beq.n	800167a <__ledf2+0x92>
 8001650:	2002      	movs	r0, #2
 8001652:	3901      	subs	r1, #1
 8001654:	4008      	ands	r0, r1
 8001656:	3801      	subs	r0, #1
 8001658:	e000      	b.n	800165c <__ledf2+0x74>
 800165a:	2002      	movs	r0, #2
 800165c:	bcc0      	pop	{r6, r7}
 800165e:	46b9      	mov	r9, r7
 8001660:	46b0      	mov	r8, r6
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001664:	2800      	cmp	r0, #0
 8001666:	d1f9      	bne.n	800165c <__ledf2+0x74>
 8001668:	2001      	movs	r0, #1
 800166a:	4240      	negs	r0, r0
 800166c:	e7f6      	b.n	800165c <__ledf2+0x74>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ec      	bne.n	800164c <__ledf2+0x64>
 8001672:	464c      	mov	r4, r9
 8001674:	4326      	orrs	r6, r4
 8001676:	d1e9      	bne.n	800164c <__ledf2+0x64>
 8001678:	e7ea      	b.n	8001650 <__ledf2+0x68>
 800167a:	429a      	cmp	r2, r3
 800167c:	dd04      	ble.n	8001688 <__ledf2+0xa0>
 800167e:	4243      	negs	r3, r0
 8001680:	4158      	adcs	r0, r3
 8001682:	0040      	lsls	r0, r0, #1
 8001684:	3801      	subs	r0, #1
 8001686:	e7e9      	b.n	800165c <__ledf2+0x74>
 8001688:	429a      	cmp	r2, r3
 800168a:	dbeb      	blt.n	8001664 <__ledf2+0x7c>
 800168c:	454f      	cmp	r7, r9
 800168e:	d8df      	bhi.n	8001650 <__ledf2+0x68>
 8001690:	d006      	beq.n	80016a0 <__ledf2+0xb8>
 8001692:	2000      	movs	r0, #0
 8001694:	454f      	cmp	r7, r9
 8001696:	d2e1      	bcs.n	800165c <__ledf2+0x74>
 8001698:	2900      	cmp	r1, #0
 800169a:	d0e5      	beq.n	8001668 <__ledf2+0x80>
 800169c:	0008      	movs	r0, r1
 800169e:	e7dd      	b.n	800165c <__ledf2+0x74>
 80016a0:	45c4      	cmp	ip, r8
 80016a2:	d8d5      	bhi.n	8001650 <__ledf2+0x68>
 80016a4:	2000      	movs	r0, #0
 80016a6:	45c4      	cmp	ip, r8
 80016a8:	d2d8      	bcs.n	800165c <__ledf2+0x74>
 80016aa:	e7f5      	b.n	8001698 <__ledf2+0xb0>
 80016ac:	000007ff 	.word	0x000007ff

080016b0 <__aeabi_dmul>:
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	4645      	mov	r5, r8
 80016b4:	46de      	mov	lr, fp
 80016b6:	4657      	mov	r7, sl
 80016b8:	464e      	mov	r6, r9
 80016ba:	b5e0      	push	{r5, r6, r7, lr}
 80016bc:	001f      	movs	r7, r3
 80016be:	030b      	lsls	r3, r1, #12
 80016c0:	0b1b      	lsrs	r3, r3, #12
 80016c2:	469b      	mov	fp, r3
 80016c4:	004d      	lsls	r5, r1, #1
 80016c6:	0fcb      	lsrs	r3, r1, #31
 80016c8:	0004      	movs	r4, r0
 80016ca:	4691      	mov	r9, r2
 80016cc:	4698      	mov	r8, r3
 80016ce:	b087      	sub	sp, #28
 80016d0:	0d6d      	lsrs	r5, r5, #21
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dmul+0x26>
 80016d4:	e1cd      	b.n	8001a72 <__aeabi_dmul+0x3c2>
 80016d6:	4bce      	ldr	r3, [pc, #824]	; (8001a10 <__aeabi_dmul+0x360>)
 80016d8:	429d      	cmp	r5, r3
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x2e>
 80016dc:	e1e9      	b.n	8001ab2 <__aeabi_dmul+0x402>
 80016de:	465a      	mov	r2, fp
 80016e0:	0f43      	lsrs	r3, r0, #29
 80016e2:	00d2      	lsls	r2, r2, #3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	0412      	lsls	r2, r2, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	00c3      	lsls	r3, r0, #3
 80016ee:	469a      	mov	sl, r3
 80016f0:	4bc8      	ldr	r3, [pc, #800]	; (8001a14 <__aeabi_dmul+0x364>)
 80016f2:	4693      	mov	fp, r2
 80016f4:	469c      	mov	ip, r3
 80016f6:	2300      	movs	r3, #0
 80016f8:	2600      	movs	r6, #0
 80016fa:	4465      	add	r5, ip
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	033c      	lsls	r4, r7, #12
 8001700:	007b      	lsls	r3, r7, #1
 8001702:	4648      	mov	r0, r9
 8001704:	0b24      	lsrs	r4, r4, #12
 8001706:	0d5b      	lsrs	r3, r3, #21
 8001708:	0fff      	lsrs	r7, r7, #31
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <__aeabi_dmul+0x60>
 800170e:	e189      	b.n	8001a24 <__aeabi_dmul+0x374>
 8001710:	4abf      	ldr	r2, [pc, #764]	; (8001a10 <__aeabi_dmul+0x360>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <__aeabi_dmul+0x9a>
 8001716:	0f42      	lsrs	r2, r0, #29
 8001718:	00e4      	lsls	r4, r4, #3
 800171a:	4322      	orrs	r2, r4
 800171c:	2480      	movs	r4, #128	; 0x80
 800171e:	0424      	lsls	r4, r4, #16
 8001720:	4314      	orrs	r4, r2
 8001722:	4abc      	ldr	r2, [pc, #752]	; (8001a14 <__aeabi_dmul+0x364>)
 8001724:	2100      	movs	r1, #0
 8001726:	4694      	mov	ip, r2
 8001728:	4642      	mov	r2, r8
 800172a:	4463      	add	r3, ip
 800172c:	195b      	adds	r3, r3, r5
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9b01      	ldr	r3, [sp, #4]
 8001732:	407a      	eors	r2, r7
 8001734:	3301      	adds	r3, #1
 8001736:	00c0      	lsls	r0, r0, #3
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2e0a      	cmp	r6, #10
 800173e:	dd1c      	ble.n	800177a <__aeabi_dmul+0xca>
 8001740:	003a      	movs	r2, r7
 8001742:	2e0b      	cmp	r6, #11
 8001744:	d05e      	beq.n	8001804 <__aeabi_dmul+0x154>
 8001746:	4647      	mov	r7, r8
 8001748:	e056      	b.n	80017f8 <__aeabi_dmul+0x148>
 800174a:	4649      	mov	r1, r9
 800174c:	4bb0      	ldr	r3, [pc, #704]	; (8001a10 <__aeabi_dmul+0x360>)
 800174e:	4321      	orrs	r1, r4
 8001750:	18eb      	adds	r3, r5, r3
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2900      	cmp	r1, #0
 8001756:	d12a      	bne.n	80017ae <__aeabi_dmul+0xfe>
 8001758:	2080      	movs	r0, #128	; 0x80
 800175a:	2202      	movs	r2, #2
 800175c:	0100      	lsls	r0, r0, #4
 800175e:	002b      	movs	r3, r5
 8001760:	4684      	mov	ip, r0
 8001762:	4316      	orrs	r6, r2
 8001764:	4642      	mov	r2, r8
 8001766:	4463      	add	r3, ip
 8001768:	407a      	eors	r2, r7
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2e0a      	cmp	r6, #10
 8001770:	dd00      	ble.n	8001774 <__aeabi_dmul+0xc4>
 8001772:	e231      	b.n	8001bd8 <__aeabi_dmul+0x528>
 8001774:	2000      	movs	r0, #0
 8001776:	2400      	movs	r4, #0
 8001778:	2102      	movs	r1, #2
 800177a:	2e02      	cmp	r6, #2
 800177c:	dc26      	bgt.n	80017cc <__aeabi_dmul+0x11c>
 800177e:	3e01      	subs	r6, #1
 8001780:	2e01      	cmp	r6, #1
 8001782:	d852      	bhi.n	800182a <__aeabi_dmul+0x17a>
 8001784:	2902      	cmp	r1, #2
 8001786:	d04c      	beq.n	8001822 <__aeabi_dmul+0x172>
 8001788:	2901      	cmp	r1, #1
 800178a:	d000      	beq.n	800178e <__aeabi_dmul+0xde>
 800178c:	e118      	b.n	80019c0 <__aeabi_dmul+0x310>
 800178e:	2300      	movs	r3, #0
 8001790:	2400      	movs	r4, #0
 8001792:	2500      	movs	r5, #0
 8001794:	051b      	lsls	r3, r3, #20
 8001796:	4323      	orrs	r3, r4
 8001798:	07d2      	lsls	r2, r2, #31
 800179a:	4313      	orrs	r3, r2
 800179c:	0028      	movs	r0, r5
 800179e:	0019      	movs	r1, r3
 80017a0:	b007      	add	sp, #28
 80017a2:	bcf0      	pop	{r4, r5, r6, r7}
 80017a4:	46bb      	mov	fp, r7
 80017a6:	46b2      	mov	sl, r6
 80017a8:	46a9      	mov	r9, r5
 80017aa:	46a0      	mov	r8, r4
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	2203      	movs	r2, #3
 80017b2:	0109      	lsls	r1, r1, #4
 80017b4:	002b      	movs	r3, r5
 80017b6:	468c      	mov	ip, r1
 80017b8:	4316      	orrs	r6, r2
 80017ba:	4642      	mov	r2, r8
 80017bc:	4463      	add	r3, ip
 80017be:	407a      	eors	r2, r7
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2e0a      	cmp	r6, #10
 80017c6:	dd00      	ble.n	80017ca <__aeabi_dmul+0x11a>
 80017c8:	e228      	b.n	8001c1c <__aeabi_dmul+0x56c>
 80017ca:	2103      	movs	r1, #3
 80017cc:	2501      	movs	r5, #1
 80017ce:	40b5      	lsls	r5, r6
 80017d0:	46ac      	mov	ip, r5
 80017d2:	26a6      	movs	r6, #166	; 0xa6
 80017d4:	4663      	mov	r3, ip
 80017d6:	00f6      	lsls	r6, r6, #3
 80017d8:	4035      	ands	r5, r6
 80017da:	4233      	tst	r3, r6
 80017dc:	d10b      	bne.n	80017f6 <__aeabi_dmul+0x146>
 80017de:	2690      	movs	r6, #144	; 0x90
 80017e0:	00b6      	lsls	r6, r6, #2
 80017e2:	4233      	tst	r3, r6
 80017e4:	d118      	bne.n	8001818 <__aeabi_dmul+0x168>
 80017e6:	3eb9      	subs	r6, #185	; 0xb9
 80017e8:	3eff      	subs	r6, #255	; 0xff
 80017ea:	421e      	tst	r6, r3
 80017ec:	d01d      	beq.n	800182a <__aeabi_dmul+0x17a>
 80017ee:	46a3      	mov	fp, r4
 80017f0:	4682      	mov	sl, r0
 80017f2:	9100      	str	r1, [sp, #0]
 80017f4:	e000      	b.n	80017f8 <__aeabi_dmul+0x148>
 80017f6:	0017      	movs	r7, r2
 80017f8:	9900      	ldr	r1, [sp, #0]
 80017fa:	003a      	movs	r2, r7
 80017fc:	2902      	cmp	r1, #2
 80017fe:	d010      	beq.n	8001822 <__aeabi_dmul+0x172>
 8001800:	465c      	mov	r4, fp
 8001802:	4650      	mov	r0, sl
 8001804:	2903      	cmp	r1, #3
 8001806:	d1bf      	bne.n	8001788 <__aeabi_dmul+0xd8>
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	031b      	lsls	r3, r3, #12
 800180c:	431c      	orrs	r4, r3
 800180e:	0324      	lsls	r4, r4, #12
 8001810:	0005      	movs	r5, r0
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <__aeabi_dmul+0x360>)
 8001814:	0b24      	lsrs	r4, r4, #12
 8001816:	e7bd      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001818:	2480      	movs	r4, #128	; 0x80
 800181a:	2200      	movs	r2, #0
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <__aeabi_dmul+0x360>)
 800181e:	0324      	lsls	r4, r4, #12
 8001820:	e7b8      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001822:	2400      	movs	r4, #0
 8001824:	2500      	movs	r5, #0
 8001826:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <__aeabi_dmul+0x360>)
 8001828:	e7b4      	b.n	8001794 <__aeabi_dmul+0xe4>
 800182a:	4653      	mov	r3, sl
 800182c:	041e      	lsls	r6, r3, #16
 800182e:	0c36      	lsrs	r6, r6, #16
 8001830:	0c1f      	lsrs	r7, r3, #16
 8001832:	0033      	movs	r3, r6
 8001834:	0c01      	lsrs	r1, r0, #16
 8001836:	0400      	lsls	r0, r0, #16
 8001838:	0c00      	lsrs	r0, r0, #16
 800183a:	4343      	muls	r3, r0
 800183c:	4698      	mov	r8, r3
 800183e:	0003      	movs	r3, r0
 8001840:	437b      	muls	r3, r7
 8001842:	4699      	mov	r9, r3
 8001844:	0033      	movs	r3, r6
 8001846:	434b      	muls	r3, r1
 8001848:	469c      	mov	ip, r3
 800184a:	4643      	mov	r3, r8
 800184c:	000d      	movs	r5, r1
 800184e:	0c1b      	lsrs	r3, r3, #16
 8001850:	469a      	mov	sl, r3
 8001852:	437d      	muls	r5, r7
 8001854:	44cc      	add	ip, r9
 8001856:	44d4      	add	ip, sl
 8001858:	9500      	str	r5, [sp, #0]
 800185a:	45e1      	cmp	r9, ip
 800185c:	d904      	bls.n	8001868 <__aeabi_dmul+0x1b8>
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	4699      	mov	r9, r3
 8001864:	444d      	add	r5, r9
 8001866:	9500      	str	r5, [sp, #0]
 8001868:	4663      	mov	r3, ip
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	001d      	movs	r5, r3
 800186e:	4663      	mov	r3, ip
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	469c      	mov	ip, r3
 8001874:	4643      	mov	r3, r8
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	4698      	mov	r8, r3
 800187c:	4663      	mov	r3, ip
 800187e:	4443      	add	r3, r8
 8001880:	9303      	str	r3, [sp, #12]
 8001882:	0c23      	lsrs	r3, r4, #16
 8001884:	4698      	mov	r8, r3
 8001886:	0033      	movs	r3, r6
 8001888:	0424      	lsls	r4, r4, #16
 800188a:	0c24      	lsrs	r4, r4, #16
 800188c:	4363      	muls	r3, r4
 800188e:	469c      	mov	ip, r3
 8001890:	0023      	movs	r3, r4
 8001892:	437b      	muls	r3, r7
 8001894:	4699      	mov	r9, r3
 8001896:	4643      	mov	r3, r8
 8001898:	435e      	muls	r6, r3
 800189a:	435f      	muls	r7, r3
 800189c:	444e      	add	r6, r9
 800189e:	4663      	mov	r3, ip
 80018a0:	46b2      	mov	sl, r6
 80018a2:	0c1e      	lsrs	r6, r3, #16
 80018a4:	4456      	add	r6, sl
 80018a6:	45b1      	cmp	r9, r6
 80018a8:	d903      	bls.n	80018b2 <__aeabi_dmul+0x202>
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	025b      	lsls	r3, r3, #9
 80018ae:	4699      	mov	r9, r3
 80018b0:	444f      	add	r7, r9
 80018b2:	0c33      	lsrs	r3, r6, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	003b      	movs	r3, r7
 80018b8:	444b      	add	r3, r9
 80018ba:	9305      	str	r3, [sp, #20]
 80018bc:	4663      	mov	r3, ip
 80018be:	46ac      	mov	ip, r5
 80018c0:	041f      	lsls	r7, r3, #16
 80018c2:	0c3f      	lsrs	r7, r7, #16
 80018c4:	0436      	lsls	r6, r6, #16
 80018c6:	19f6      	adds	r6, r6, r7
 80018c8:	44b4      	add	ip, r6
 80018ca:	4663      	mov	r3, ip
 80018cc:	9304      	str	r3, [sp, #16]
 80018ce:	465b      	mov	r3, fp
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	469c      	mov	ip, r3
 80018d4:	465b      	mov	r3, fp
 80018d6:	041f      	lsls	r7, r3, #16
 80018d8:	0c3f      	lsrs	r7, r7, #16
 80018da:	003b      	movs	r3, r7
 80018dc:	4343      	muls	r3, r0
 80018de:	4699      	mov	r9, r3
 80018e0:	4663      	mov	r3, ip
 80018e2:	4343      	muls	r3, r0
 80018e4:	469a      	mov	sl, r3
 80018e6:	464b      	mov	r3, r9
 80018e8:	4660      	mov	r0, ip
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	469b      	mov	fp, r3
 80018ee:	4348      	muls	r0, r1
 80018f0:	4379      	muls	r1, r7
 80018f2:	4451      	add	r1, sl
 80018f4:	4459      	add	r1, fp
 80018f6:	458a      	cmp	sl, r1
 80018f8:	d903      	bls.n	8001902 <__aeabi_dmul+0x252>
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	469a      	mov	sl, r3
 8001900:	4450      	add	r0, sl
 8001902:	0c0b      	lsrs	r3, r1, #16
 8001904:	469a      	mov	sl, r3
 8001906:	464b      	mov	r3, r9
 8001908:	041b      	lsls	r3, r3, #16
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	4699      	mov	r9, r3
 800190e:	003b      	movs	r3, r7
 8001910:	4363      	muls	r3, r4
 8001912:	0409      	lsls	r1, r1, #16
 8001914:	4645      	mov	r5, r8
 8001916:	4449      	add	r1, r9
 8001918:	4699      	mov	r9, r3
 800191a:	4663      	mov	r3, ip
 800191c:	435c      	muls	r4, r3
 800191e:	436b      	muls	r3, r5
 8001920:	469c      	mov	ip, r3
 8001922:	464b      	mov	r3, r9
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	4698      	mov	r8, r3
 8001928:	436f      	muls	r7, r5
 800192a:	193f      	adds	r7, r7, r4
 800192c:	4447      	add	r7, r8
 800192e:	4450      	add	r0, sl
 8001930:	42bc      	cmp	r4, r7
 8001932:	d903      	bls.n	800193c <__aeabi_dmul+0x28c>
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	4698      	mov	r8, r3
 800193a:	44c4      	add	ip, r8
 800193c:	9b04      	ldr	r3, [sp, #16]
 800193e:	9d00      	ldr	r5, [sp, #0]
 8001940:	4698      	mov	r8, r3
 8001942:	4445      	add	r5, r8
 8001944:	42b5      	cmp	r5, r6
 8001946:	41b6      	sbcs	r6, r6
 8001948:	4273      	negs	r3, r6
 800194a:	4698      	mov	r8, r3
 800194c:	464b      	mov	r3, r9
 800194e:	041e      	lsls	r6, r3, #16
 8001950:	9b05      	ldr	r3, [sp, #20]
 8001952:	043c      	lsls	r4, r7, #16
 8001954:	4699      	mov	r9, r3
 8001956:	0c36      	lsrs	r6, r6, #16
 8001958:	19a4      	adds	r4, r4, r6
 800195a:	444c      	add	r4, r9
 800195c:	46a1      	mov	r9, r4
 800195e:	4683      	mov	fp, r0
 8001960:	186e      	adds	r6, r5, r1
 8001962:	44c1      	add	r9, r8
 8001964:	428e      	cmp	r6, r1
 8001966:	4189      	sbcs	r1, r1
 8001968:	44cb      	add	fp, r9
 800196a:	465d      	mov	r5, fp
 800196c:	4249      	negs	r1, r1
 800196e:	186d      	adds	r5, r5, r1
 8001970:	429c      	cmp	r4, r3
 8001972:	41a4      	sbcs	r4, r4
 8001974:	45c1      	cmp	r9, r8
 8001976:	419b      	sbcs	r3, r3
 8001978:	4583      	cmp	fp, r0
 800197a:	4180      	sbcs	r0, r0
 800197c:	428d      	cmp	r5, r1
 800197e:	4189      	sbcs	r1, r1
 8001980:	425b      	negs	r3, r3
 8001982:	4264      	negs	r4, r4
 8001984:	431c      	orrs	r4, r3
 8001986:	4240      	negs	r0, r0
 8001988:	9b03      	ldr	r3, [sp, #12]
 800198a:	4249      	negs	r1, r1
 800198c:	4301      	orrs	r1, r0
 800198e:	0270      	lsls	r0, r6, #9
 8001990:	0c3f      	lsrs	r7, r7, #16
 8001992:	4318      	orrs	r0, r3
 8001994:	19e4      	adds	r4, r4, r7
 8001996:	1e47      	subs	r7, r0, #1
 8001998:	41b8      	sbcs	r0, r7
 800199a:	1864      	adds	r4, r4, r1
 800199c:	4464      	add	r4, ip
 800199e:	0df6      	lsrs	r6, r6, #23
 80019a0:	0261      	lsls	r1, r4, #9
 80019a2:	4330      	orrs	r0, r6
 80019a4:	0dec      	lsrs	r4, r5, #23
 80019a6:	026e      	lsls	r6, r5, #9
 80019a8:	430c      	orrs	r4, r1
 80019aa:	4330      	orrs	r0, r6
 80019ac:	01c9      	lsls	r1, r1, #7
 80019ae:	d400      	bmi.n	80019b2 <__aeabi_dmul+0x302>
 80019b0:	e0f1      	b.n	8001b96 <__aeabi_dmul+0x4e6>
 80019b2:	2101      	movs	r1, #1
 80019b4:	0843      	lsrs	r3, r0, #1
 80019b6:	4001      	ands	r1, r0
 80019b8:	430b      	orrs	r3, r1
 80019ba:	07e0      	lsls	r0, r4, #31
 80019bc:	4318      	orrs	r0, r3
 80019be:	0864      	lsrs	r4, r4, #1
 80019c0:	4915      	ldr	r1, [pc, #84]	; (8001a18 <__aeabi_dmul+0x368>)
 80019c2:	9b02      	ldr	r3, [sp, #8]
 80019c4:	468c      	mov	ip, r1
 80019c6:	4463      	add	r3, ip
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_dmul+0x31e>
 80019cc:	e097      	b.n	8001afe <__aeabi_dmul+0x44e>
 80019ce:	0741      	lsls	r1, r0, #29
 80019d0:	d009      	beq.n	80019e6 <__aeabi_dmul+0x336>
 80019d2:	210f      	movs	r1, #15
 80019d4:	4001      	ands	r1, r0
 80019d6:	2904      	cmp	r1, #4
 80019d8:	d005      	beq.n	80019e6 <__aeabi_dmul+0x336>
 80019da:	1d01      	adds	r1, r0, #4
 80019dc:	4281      	cmp	r1, r0
 80019de:	4180      	sbcs	r0, r0
 80019e0:	4240      	negs	r0, r0
 80019e2:	1824      	adds	r4, r4, r0
 80019e4:	0008      	movs	r0, r1
 80019e6:	01e1      	lsls	r1, r4, #7
 80019e8:	d506      	bpl.n	80019f8 <__aeabi_dmul+0x348>
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	00c9      	lsls	r1, r1, #3
 80019ee:	468c      	mov	ip, r1
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <__aeabi_dmul+0x36c>)
 80019f2:	401c      	ands	r4, r3
 80019f4:	9b02      	ldr	r3, [sp, #8]
 80019f6:	4463      	add	r3, ip
 80019f8:	4909      	ldr	r1, [pc, #36]	; (8001a20 <__aeabi_dmul+0x370>)
 80019fa:	428b      	cmp	r3, r1
 80019fc:	dd00      	ble.n	8001a00 <__aeabi_dmul+0x350>
 80019fe:	e710      	b.n	8001822 <__aeabi_dmul+0x172>
 8001a00:	0761      	lsls	r1, r4, #29
 8001a02:	08c5      	lsrs	r5, r0, #3
 8001a04:	0264      	lsls	r4, r4, #9
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	430d      	orrs	r5, r1
 8001a0a:	0b24      	lsrs	r4, r4, #12
 8001a0c:	0d5b      	lsrs	r3, r3, #21
 8001a0e:	e6c1      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001a10:	000007ff 	.word	0x000007ff
 8001a14:	fffffc01 	.word	0xfffffc01
 8001a18:	000003ff 	.word	0x000003ff
 8001a1c:	feffffff 	.word	0xfeffffff
 8001a20:	000007fe 	.word	0x000007fe
 8001a24:	464b      	mov	r3, r9
 8001a26:	4323      	orrs	r3, r4
 8001a28:	d059      	beq.n	8001ade <__aeabi_dmul+0x42e>
 8001a2a:	2c00      	cmp	r4, #0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dmul+0x380>
 8001a2e:	e0a3      	b.n	8001b78 <__aeabi_dmul+0x4c8>
 8001a30:	0020      	movs	r0, r4
 8001a32:	f000 fd73 	bl	800251c <__clzsi2>
 8001a36:	0001      	movs	r1, r0
 8001a38:	0003      	movs	r3, r0
 8001a3a:	390b      	subs	r1, #11
 8001a3c:	221d      	movs	r2, #29
 8001a3e:	1a52      	subs	r2, r2, r1
 8001a40:	4649      	mov	r1, r9
 8001a42:	0018      	movs	r0, r3
 8001a44:	40d1      	lsrs	r1, r2
 8001a46:	464a      	mov	r2, r9
 8001a48:	3808      	subs	r0, #8
 8001a4a:	4082      	lsls	r2, r0
 8001a4c:	4084      	lsls	r4, r0
 8001a4e:	0010      	movs	r0, r2
 8001a50:	430c      	orrs	r4, r1
 8001a52:	4a74      	ldr	r2, [pc, #464]	; (8001c24 <__aeabi_dmul+0x574>)
 8001a54:	1aeb      	subs	r3, r5, r3
 8001a56:	4694      	mov	ip, r2
 8001a58:	4642      	mov	r2, r8
 8001a5a:	4463      	add	r3, ip
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	407a      	eors	r2, r7
 8001a62:	3301      	adds	r3, #1
 8001a64:	2100      	movs	r1, #0
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	2e0a      	cmp	r6, #10
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dmul+0x3c0>
 8001a6e:	e667      	b.n	8001740 <__aeabi_dmul+0x90>
 8001a70:	e683      	b.n	800177a <__aeabi_dmul+0xca>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4303      	orrs	r3, r0
 8001a76:	469a      	mov	sl, r3
 8001a78:	d02a      	beq.n	8001ad0 <__aeabi_dmul+0x420>
 8001a7a:	465b      	mov	r3, fp
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d06d      	beq.n	8001b5c <__aeabi_dmul+0x4ac>
 8001a80:	4658      	mov	r0, fp
 8001a82:	f000 fd4b 	bl	800251c <__clzsi2>
 8001a86:	0001      	movs	r1, r0
 8001a88:	0003      	movs	r3, r0
 8001a8a:	390b      	subs	r1, #11
 8001a8c:	221d      	movs	r2, #29
 8001a8e:	1a52      	subs	r2, r2, r1
 8001a90:	0021      	movs	r1, r4
 8001a92:	0018      	movs	r0, r3
 8001a94:	465d      	mov	r5, fp
 8001a96:	40d1      	lsrs	r1, r2
 8001a98:	3808      	subs	r0, #8
 8001a9a:	4085      	lsls	r5, r0
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	4084      	lsls	r4, r0
 8001aa0:	432a      	orrs	r2, r5
 8001aa2:	4693      	mov	fp, r2
 8001aa4:	46a2      	mov	sl, r4
 8001aa6:	4d5f      	ldr	r5, [pc, #380]	; (8001c24 <__aeabi_dmul+0x574>)
 8001aa8:	2600      	movs	r6, #0
 8001aaa:	1aed      	subs	r5, r5, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	e625      	b.n	80016fe <__aeabi_dmul+0x4e>
 8001ab2:	465b      	mov	r3, fp
 8001ab4:	4303      	orrs	r3, r0
 8001ab6:	469a      	mov	sl, r3
 8001ab8:	d105      	bne.n	8001ac6 <__aeabi_dmul+0x416>
 8001aba:	2300      	movs	r3, #0
 8001abc:	469b      	mov	fp, r3
 8001abe:	3302      	adds	r3, #2
 8001ac0:	2608      	movs	r6, #8
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	e61b      	b.n	80016fe <__aeabi_dmul+0x4e>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	4682      	mov	sl, r0
 8001aca:	260c      	movs	r6, #12
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	e616      	b.n	80016fe <__aeabi_dmul+0x4e>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	2604      	movs	r6, #4
 8001ad8:	2500      	movs	r5, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	e60f      	b.n	80016fe <__aeabi_dmul+0x4e>
 8001ade:	4642      	mov	r2, r8
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	9501      	str	r5, [sp, #4]
 8001ae4:	431e      	orrs	r6, r3
 8001ae6:	9b01      	ldr	r3, [sp, #4]
 8001ae8:	407a      	eors	r2, r7
 8001aea:	3301      	adds	r3, #1
 8001aec:	2400      	movs	r4, #0
 8001aee:	2000      	movs	r0, #0
 8001af0:	2101      	movs	r1, #1
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2e0a      	cmp	r6, #10
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dmul+0x44c>
 8001afa:	e621      	b.n	8001740 <__aeabi_dmul+0x90>
 8001afc:	e63d      	b.n	800177a <__aeabi_dmul+0xca>
 8001afe:	2101      	movs	r1, #1
 8001b00:	1ac9      	subs	r1, r1, r3
 8001b02:	2938      	cmp	r1, #56	; 0x38
 8001b04:	dd00      	ble.n	8001b08 <__aeabi_dmul+0x458>
 8001b06:	e642      	b.n	800178e <__aeabi_dmul+0xde>
 8001b08:	291f      	cmp	r1, #31
 8001b0a:	dd47      	ble.n	8001b9c <__aeabi_dmul+0x4ec>
 8001b0c:	261f      	movs	r6, #31
 8001b0e:	0025      	movs	r5, r4
 8001b10:	4276      	negs	r6, r6
 8001b12:	1af3      	subs	r3, r6, r3
 8001b14:	40dd      	lsrs	r5, r3
 8001b16:	002b      	movs	r3, r5
 8001b18:	2920      	cmp	r1, #32
 8001b1a:	d005      	beq.n	8001b28 <__aeabi_dmul+0x478>
 8001b1c:	4942      	ldr	r1, [pc, #264]	; (8001c28 <__aeabi_dmul+0x578>)
 8001b1e:	9d02      	ldr	r5, [sp, #8]
 8001b20:	468c      	mov	ip, r1
 8001b22:	4465      	add	r5, ip
 8001b24:	40ac      	lsls	r4, r5
 8001b26:	4320      	orrs	r0, r4
 8001b28:	1e41      	subs	r1, r0, #1
 8001b2a:	4188      	sbcs	r0, r1
 8001b2c:	4318      	orrs	r0, r3
 8001b2e:	2307      	movs	r3, #7
 8001b30:	001d      	movs	r5, r3
 8001b32:	2400      	movs	r4, #0
 8001b34:	4005      	ands	r5, r0
 8001b36:	4203      	tst	r3, r0
 8001b38:	d04a      	beq.n	8001bd0 <__aeabi_dmul+0x520>
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	4003      	ands	r3, r0
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d042      	beq.n	8001bca <__aeabi_dmul+0x51a>
 8001b44:	1d03      	adds	r3, r0, #4
 8001b46:	4283      	cmp	r3, r0
 8001b48:	4180      	sbcs	r0, r0
 8001b4a:	4240      	negs	r0, r0
 8001b4c:	1824      	adds	r4, r4, r0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	0223      	lsls	r3, r4, #8
 8001b52:	d53a      	bpl.n	8001bca <__aeabi_dmul+0x51a>
 8001b54:	2301      	movs	r3, #1
 8001b56:	2400      	movs	r4, #0
 8001b58:	2500      	movs	r5, #0
 8001b5a:	e61b      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001b5c:	f000 fcde 	bl	800251c <__clzsi2>
 8001b60:	0001      	movs	r1, r0
 8001b62:	0003      	movs	r3, r0
 8001b64:	3115      	adds	r1, #21
 8001b66:	3320      	adds	r3, #32
 8001b68:	291c      	cmp	r1, #28
 8001b6a:	dd8f      	ble.n	8001a8c <__aeabi_dmul+0x3dc>
 8001b6c:	3808      	subs	r0, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4084      	lsls	r4, r0
 8001b72:	4692      	mov	sl, r2
 8001b74:	46a3      	mov	fp, r4
 8001b76:	e796      	b.n	8001aa6 <__aeabi_dmul+0x3f6>
 8001b78:	f000 fcd0 	bl	800251c <__clzsi2>
 8001b7c:	0001      	movs	r1, r0
 8001b7e:	0003      	movs	r3, r0
 8001b80:	3115      	adds	r1, #21
 8001b82:	3320      	adds	r3, #32
 8001b84:	291c      	cmp	r1, #28
 8001b86:	dc00      	bgt.n	8001b8a <__aeabi_dmul+0x4da>
 8001b88:	e758      	b.n	8001a3c <__aeabi_dmul+0x38c>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	464c      	mov	r4, r9
 8001b8e:	3a08      	subs	r2, #8
 8001b90:	2000      	movs	r0, #0
 8001b92:	4094      	lsls	r4, r2
 8001b94:	e75d      	b.n	8001a52 <__aeabi_dmul+0x3a2>
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	e711      	b.n	80019c0 <__aeabi_dmul+0x310>
 8001b9c:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <__aeabi_dmul+0x57c>)
 8001b9e:	0026      	movs	r6, r4
 8001ba0:	469c      	mov	ip, r3
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	9d02      	ldr	r5, [sp, #8]
 8001ba6:	40cb      	lsrs	r3, r1
 8001ba8:	4465      	add	r5, ip
 8001baa:	40ae      	lsls	r6, r5
 8001bac:	431e      	orrs	r6, r3
 8001bae:	0003      	movs	r3, r0
 8001bb0:	40ab      	lsls	r3, r5
 8001bb2:	1e58      	subs	r0, r3, #1
 8001bb4:	4183      	sbcs	r3, r0
 8001bb6:	0030      	movs	r0, r6
 8001bb8:	4318      	orrs	r0, r3
 8001bba:	40cc      	lsrs	r4, r1
 8001bbc:	0743      	lsls	r3, r0, #29
 8001bbe:	d0c7      	beq.n	8001b50 <__aeabi_dmul+0x4a0>
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	4003      	ands	r3, r0
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d1bd      	bne.n	8001b44 <__aeabi_dmul+0x494>
 8001bc8:	e7c2      	b.n	8001b50 <__aeabi_dmul+0x4a0>
 8001bca:	0765      	lsls	r5, r4, #29
 8001bcc:	0264      	lsls	r4, r4, #9
 8001bce:	0b24      	lsrs	r4, r4, #12
 8001bd0:	08c0      	lsrs	r0, r0, #3
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	4305      	orrs	r5, r0
 8001bd6:	e5dd      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001bd8:	2500      	movs	r5, #0
 8001bda:	2302      	movs	r3, #2
 8001bdc:	2e0f      	cmp	r6, #15
 8001bde:	d10c      	bne.n	8001bfa <__aeabi_dmul+0x54a>
 8001be0:	2480      	movs	r4, #128	; 0x80
 8001be2:	465b      	mov	r3, fp
 8001be4:	0324      	lsls	r4, r4, #12
 8001be6:	4223      	tst	r3, r4
 8001be8:	d00e      	beq.n	8001c08 <__aeabi_dmul+0x558>
 8001bea:	4221      	tst	r1, r4
 8001bec:	d10c      	bne.n	8001c08 <__aeabi_dmul+0x558>
 8001bee:	430c      	orrs	r4, r1
 8001bf0:	0324      	lsls	r4, r4, #12
 8001bf2:	003a      	movs	r2, r7
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <__aeabi_dmul+0x580>)
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	e5cc      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001bfa:	2e0b      	cmp	r6, #11
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dmul+0x550>
 8001bfe:	e5a2      	b.n	8001746 <__aeabi_dmul+0x96>
 8001c00:	468b      	mov	fp, r1
 8001c02:	46aa      	mov	sl, r5
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	e5f7      	b.n	80017f8 <__aeabi_dmul+0x148>
 8001c08:	2480      	movs	r4, #128	; 0x80
 8001c0a:	465b      	mov	r3, fp
 8001c0c:	0324      	lsls	r4, r4, #12
 8001c0e:	431c      	orrs	r4, r3
 8001c10:	0324      	lsls	r4, r4, #12
 8001c12:	4642      	mov	r2, r8
 8001c14:	4655      	mov	r5, sl
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <__aeabi_dmul+0x580>)
 8001c18:	0b24      	lsrs	r4, r4, #12
 8001c1a:	e5bb      	b.n	8001794 <__aeabi_dmul+0xe4>
 8001c1c:	464d      	mov	r5, r9
 8001c1e:	0021      	movs	r1, r4
 8001c20:	2303      	movs	r3, #3
 8001c22:	e7db      	b.n	8001bdc <__aeabi_dmul+0x52c>
 8001c24:	fffffc0d 	.word	0xfffffc0d
 8001c28:	0000043e 	.word	0x0000043e
 8001c2c:	0000041e 	.word	0x0000041e
 8001c30:	000007ff 	.word	0x000007ff

08001c34 <__aeabi_dsub>:
 8001c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c36:	4657      	mov	r7, sl
 8001c38:	464e      	mov	r6, r9
 8001c3a:	4645      	mov	r5, r8
 8001c3c:	46de      	mov	lr, fp
 8001c3e:	b5e0      	push	{r5, r6, r7, lr}
 8001c40:	000d      	movs	r5, r1
 8001c42:	0004      	movs	r4, r0
 8001c44:	0019      	movs	r1, r3
 8001c46:	0010      	movs	r0, r2
 8001c48:	032b      	lsls	r3, r5, #12
 8001c4a:	0a5b      	lsrs	r3, r3, #9
 8001c4c:	0f62      	lsrs	r2, r4, #29
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	00e3      	lsls	r3, r4, #3
 8001c52:	030c      	lsls	r4, r1, #12
 8001c54:	0a64      	lsrs	r4, r4, #9
 8001c56:	0f47      	lsrs	r7, r0, #29
 8001c58:	4327      	orrs	r7, r4
 8001c5a:	4cd0      	ldr	r4, [pc, #832]	; (8001f9c <__aeabi_dsub+0x368>)
 8001c5c:	006e      	lsls	r6, r5, #1
 8001c5e:	4691      	mov	r9, r2
 8001c60:	b083      	sub	sp, #12
 8001c62:	004a      	lsls	r2, r1, #1
 8001c64:	00c0      	lsls	r0, r0, #3
 8001c66:	4698      	mov	r8, r3
 8001c68:	46a2      	mov	sl, r4
 8001c6a:	0d76      	lsrs	r6, r6, #21
 8001c6c:	0fed      	lsrs	r5, r5, #31
 8001c6e:	0d52      	lsrs	r2, r2, #21
 8001c70:	0fc9      	lsrs	r1, r1, #31
 8001c72:	9001      	str	r0, [sp, #4]
 8001c74:	42a2      	cmp	r2, r4
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x46>
 8001c78:	e0b9      	b.n	8001dee <__aeabi_dsub+0x1ba>
 8001c7a:	2401      	movs	r4, #1
 8001c7c:	4061      	eors	r1, r4
 8001c7e:	468b      	mov	fp, r1
 8001c80:	428d      	cmp	r5, r1
 8001c82:	d100      	bne.n	8001c86 <__aeabi_dsub+0x52>
 8001c84:	e08d      	b.n	8001da2 <__aeabi_dsub+0x16e>
 8001c86:	1ab4      	subs	r4, r6, r2
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2c00      	cmp	r4, #0
 8001c8c:	dc00      	bgt.n	8001c90 <__aeabi_dsub+0x5c>
 8001c8e:	e0b7      	b.n	8001e00 <__aeabi_dsub+0x1cc>
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x62>
 8001c94:	e0cb      	b.n	8001e2e <__aeabi_dsub+0x1fa>
 8001c96:	4ac1      	ldr	r2, [pc, #772]	; (8001f9c <__aeabi_dsub+0x368>)
 8001c98:	4296      	cmp	r6, r2
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x6a>
 8001c9c:	e186      	b.n	8001fac <__aeabi_dsub+0x378>
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	0412      	lsls	r2, r2, #16
 8001ca2:	4317      	orrs	r7, r2
 8001ca4:	4662      	mov	r2, ip
 8001ca6:	2a38      	cmp	r2, #56	; 0x38
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dsub+0x78>
 8001caa:	e1a4      	b.n	8001ff6 <__aeabi_dsub+0x3c2>
 8001cac:	2a1f      	cmp	r2, #31
 8001cae:	dd00      	ble.n	8001cb2 <__aeabi_dsub+0x7e>
 8001cb0:	e21d      	b.n	80020ee <__aeabi_dsub+0x4ba>
 8001cb2:	4661      	mov	r1, ip
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	003c      	movs	r4, r7
 8001cb8:	1a52      	subs	r2, r2, r1
 8001cba:	0001      	movs	r1, r0
 8001cbc:	4090      	lsls	r0, r2
 8001cbe:	4094      	lsls	r4, r2
 8001cc0:	1e42      	subs	r2, r0, #1
 8001cc2:	4190      	sbcs	r0, r2
 8001cc4:	4662      	mov	r2, ip
 8001cc6:	46a0      	mov	r8, r4
 8001cc8:	4664      	mov	r4, ip
 8001cca:	40d7      	lsrs	r7, r2
 8001ccc:	464a      	mov	r2, r9
 8001cce:	40e1      	lsrs	r1, r4
 8001cd0:	4644      	mov	r4, r8
 8001cd2:	1bd2      	subs	r2, r2, r7
 8001cd4:	4691      	mov	r9, r2
 8001cd6:	430c      	orrs	r4, r1
 8001cd8:	4304      	orrs	r4, r0
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	4192      	sbcs	r2, r2
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4252      	negs	r2, r2
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	469a      	mov	sl, r3
 8001ce8:	4653      	mov	r3, sl
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	d400      	bmi.n	8001cf0 <__aeabi_dsub+0xbc>
 8001cee:	e12b      	b.n	8001f48 <__aeabi_dsub+0x314>
 8001cf0:	4653      	mov	r3, sl
 8001cf2:	025a      	lsls	r2, r3, #9
 8001cf4:	0a53      	lsrs	r3, r2, #9
 8001cf6:	469a      	mov	sl, r3
 8001cf8:	4653      	mov	r3, sl
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d100      	bne.n	8001d00 <__aeabi_dsub+0xcc>
 8001cfe:	e166      	b.n	8001fce <__aeabi_dsub+0x39a>
 8001d00:	4650      	mov	r0, sl
 8001d02:	f000 fc0b 	bl	800251c <__clzsi2>
 8001d06:	0003      	movs	r3, r0
 8001d08:	3b08      	subs	r3, #8
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	0020      	movs	r0, r4
 8001d0e:	1ad2      	subs	r2, r2, r3
 8001d10:	4651      	mov	r1, sl
 8001d12:	40d0      	lsrs	r0, r2
 8001d14:	4099      	lsls	r1, r3
 8001d16:	0002      	movs	r2, r0
 8001d18:	409c      	lsls	r4, r3
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	429e      	cmp	r6, r3
 8001d1e:	dd00      	ble.n	8001d22 <__aeabi_dsub+0xee>
 8001d20:	e164      	b.n	8001fec <__aeabi_dsub+0x3b8>
 8001d22:	1b9b      	subs	r3, r3, r6
 8001d24:	1c59      	adds	r1, r3, #1
 8001d26:	291f      	cmp	r1, #31
 8001d28:	dd00      	ble.n	8001d2c <__aeabi_dsub+0xf8>
 8001d2a:	e0fe      	b.n	8001f2a <__aeabi_dsub+0x2f6>
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	0010      	movs	r0, r2
 8001d30:	0026      	movs	r6, r4
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	409c      	lsls	r4, r3
 8001d36:	4098      	lsls	r0, r3
 8001d38:	40ce      	lsrs	r6, r1
 8001d3a:	40ca      	lsrs	r2, r1
 8001d3c:	1e63      	subs	r3, r4, #1
 8001d3e:	419c      	sbcs	r4, r3
 8001d40:	4330      	orrs	r0, r6
 8001d42:	4692      	mov	sl, r2
 8001d44:	2600      	movs	r6, #0
 8001d46:	4304      	orrs	r4, r0
 8001d48:	0763      	lsls	r3, r4, #29
 8001d4a:	d009      	beq.n	8001d60 <__aeabi_dsub+0x12c>
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	4023      	ands	r3, r4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d005      	beq.n	8001d60 <__aeabi_dsub+0x12c>
 8001d54:	1d23      	adds	r3, r4, #4
 8001d56:	42a3      	cmp	r3, r4
 8001d58:	41a4      	sbcs	r4, r4
 8001d5a:	4264      	negs	r4, r4
 8001d5c:	44a2      	add	sl, r4
 8001d5e:	001c      	movs	r4, r3
 8001d60:	4653      	mov	r3, sl
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	d400      	bmi.n	8001d68 <__aeabi_dsub+0x134>
 8001d66:	e0f2      	b.n	8001f4e <__aeabi_dsub+0x31a>
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <__aeabi_dsub+0x368>)
 8001d6a:	3601      	adds	r6, #1
 8001d6c:	429e      	cmp	r6, r3
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x13e>
 8001d70:	e10f      	b.n	8001f92 <__aeabi_dsub+0x35e>
 8001d72:	4653      	mov	r3, sl
 8001d74:	498a      	ldr	r1, [pc, #552]	; (8001fa0 <__aeabi_dsub+0x36c>)
 8001d76:	08e4      	lsrs	r4, r4, #3
 8001d78:	400b      	ands	r3, r1
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	075b      	lsls	r3, r3, #29
 8001d7e:	4323      	orrs	r3, r4
 8001d80:	0572      	lsls	r2, r6, #21
 8001d82:	024c      	lsls	r4, r1, #9
 8001d84:	0b24      	lsrs	r4, r4, #12
 8001d86:	0d52      	lsrs	r2, r2, #21
 8001d88:	0512      	lsls	r2, r2, #20
 8001d8a:	4322      	orrs	r2, r4
 8001d8c:	07ed      	lsls	r5, r5, #31
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	0018      	movs	r0, r3
 8001d92:	0011      	movs	r1, r2
 8001d94:	b003      	add	sp, #12
 8001d96:	bcf0      	pop	{r4, r5, r6, r7}
 8001d98:	46bb      	mov	fp, r7
 8001d9a:	46b2      	mov	sl, r6
 8001d9c:	46a9      	mov	r9, r5
 8001d9e:	46a0      	mov	r8, r4
 8001da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da2:	1ab4      	subs	r4, r6, r2
 8001da4:	46a4      	mov	ip, r4
 8001da6:	2c00      	cmp	r4, #0
 8001da8:	dd59      	ble.n	8001e5e <__aeabi_dsub+0x22a>
 8001daa:	2a00      	cmp	r2, #0
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x17c>
 8001dae:	e0b0      	b.n	8001f12 <__aeabi_dsub+0x2de>
 8001db0:	4556      	cmp	r6, sl
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x182>
 8001db4:	e0fa      	b.n	8001fac <__aeabi_dsub+0x378>
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	0412      	lsls	r2, r2, #16
 8001dba:	4317      	orrs	r7, r2
 8001dbc:	4662      	mov	r2, ip
 8001dbe:	2a38      	cmp	r2, #56	; 0x38
 8001dc0:	dd00      	ble.n	8001dc4 <__aeabi_dsub+0x190>
 8001dc2:	e0d4      	b.n	8001f6e <__aeabi_dsub+0x33a>
 8001dc4:	2a1f      	cmp	r2, #31
 8001dc6:	dc00      	bgt.n	8001dca <__aeabi_dsub+0x196>
 8001dc8:	e1c0      	b.n	800214c <__aeabi_dsub+0x518>
 8001dca:	0039      	movs	r1, r7
 8001dcc:	3a20      	subs	r2, #32
 8001dce:	40d1      	lsrs	r1, r2
 8001dd0:	4662      	mov	r2, ip
 8001dd2:	2a20      	cmp	r2, #32
 8001dd4:	d006      	beq.n	8001de4 <__aeabi_dsub+0x1b0>
 8001dd6:	4664      	mov	r4, ip
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	1b12      	subs	r2, r2, r4
 8001ddc:	003c      	movs	r4, r7
 8001dde:	4094      	lsls	r4, r2
 8001de0:	4304      	orrs	r4, r0
 8001de2:	9401      	str	r4, [sp, #4]
 8001de4:	9c01      	ldr	r4, [sp, #4]
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	430c      	orrs	r4, r1
 8001dec:	e0c3      	b.n	8001f76 <__aeabi_dsub+0x342>
 8001dee:	003c      	movs	r4, r7
 8001df0:	4304      	orrs	r4, r0
 8001df2:	d02b      	beq.n	8001e4c <__aeabi_dsub+0x218>
 8001df4:	468b      	mov	fp, r1
 8001df6:	428d      	cmp	r5, r1
 8001df8:	d02e      	beq.n	8001e58 <__aeabi_dsub+0x224>
 8001dfa:	4c6a      	ldr	r4, [pc, #424]	; (8001fa4 <__aeabi_dsub+0x370>)
 8001dfc:	46a4      	mov	ip, r4
 8001dfe:	44b4      	add	ip, r6
 8001e00:	4664      	mov	r4, ip
 8001e02:	2c00      	cmp	r4, #0
 8001e04:	d05f      	beq.n	8001ec6 <__aeabi_dsub+0x292>
 8001e06:	1b94      	subs	r4, r2, r6
 8001e08:	46a4      	mov	ip, r4
 8001e0a:	2e00      	cmp	r6, #0
 8001e0c:	d000      	beq.n	8001e10 <__aeabi_dsub+0x1dc>
 8001e0e:	e120      	b.n	8002052 <__aeabi_dsub+0x41e>
 8001e10:	464c      	mov	r4, r9
 8001e12:	431c      	orrs	r4, r3
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x1e4>
 8001e16:	e1c7      	b.n	80021a8 <__aeabi_dsub+0x574>
 8001e18:	4661      	mov	r1, ip
 8001e1a:	1e4c      	subs	r4, r1, #1
 8001e1c:	2901      	cmp	r1, #1
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x1ee>
 8001e20:	e223      	b.n	800226a <__aeabi_dsub+0x636>
 8001e22:	4d5e      	ldr	r5, [pc, #376]	; (8001f9c <__aeabi_dsub+0x368>)
 8001e24:	45ac      	cmp	ip, r5
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x1f6>
 8001e28:	e1d8      	b.n	80021dc <__aeabi_dsub+0x5a8>
 8001e2a:	46a4      	mov	ip, r4
 8001e2c:	e11a      	b.n	8002064 <__aeabi_dsub+0x430>
 8001e2e:	003a      	movs	r2, r7
 8001e30:	4302      	orrs	r2, r0
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0x202>
 8001e34:	e0e4      	b.n	8002000 <__aeabi_dsub+0x3cc>
 8001e36:	0022      	movs	r2, r4
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	2c01      	cmp	r4, #1
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x20c>
 8001e3e:	e1c3      	b.n	80021c8 <__aeabi_dsub+0x594>
 8001e40:	4956      	ldr	r1, [pc, #344]	; (8001f9c <__aeabi_dsub+0x368>)
 8001e42:	428c      	cmp	r4, r1
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x214>
 8001e46:	e0b1      	b.n	8001fac <__aeabi_dsub+0x378>
 8001e48:	4694      	mov	ip, r2
 8001e4a:	e72b      	b.n	8001ca4 <__aeabi_dsub+0x70>
 8001e4c:	2401      	movs	r4, #1
 8001e4e:	4061      	eors	r1, r4
 8001e50:	468b      	mov	fp, r1
 8001e52:	428d      	cmp	r5, r1
 8001e54:	d000      	beq.n	8001e58 <__aeabi_dsub+0x224>
 8001e56:	e716      	b.n	8001c86 <__aeabi_dsub+0x52>
 8001e58:	4952      	ldr	r1, [pc, #328]	; (8001fa4 <__aeabi_dsub+0x370>)
 8001e5a:	468c      	mov	ip, r1
 8001e5c:	44b4      	add	ip, r6
 8001e5e:	4664      	mov	r4, ip
 8001e60:	2c00      	cmp	r4, #0
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x232>
 8001e64:	e0d3      	b.n	800200e <__aeabi_dsub+0x3da>
 8001e66:	1b91      	subs	r1, r2, r6
 8001e68:	468c      	mov	ip, r1
 8001e6a:	2e00      	cmp	r6, #0
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x23c>
 8001e6e:	e15e      	b.n	800212e <__aeabi_dsub+0x4fa>
 8001e70:	494a      	ldr	r1, [pc, #296]	; (8001f9c <__aeabi_dsub+0x368>)
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x244>
 8001e76:	e1be      	b.n	80021f6 <__aeabi_dsub+0x5c2>
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	464c      	mov	r4, r9
 8001e7c:	0409      	lsls	r1, r1, #16
 8001e7e:	430c      	orrs	r4, r1
 8001e80:	46a1      	mov	r9, r4
 8001e82:	4661      	mov	r1, ip
 8001e84:	2938      	cmp	r1, #56	; 0x38
 8001e86:	dd00      	ble.n	8001e8a <__aeabi_dsub+0x256>
 8001e88:	e1ba      	b.n	8002200 <__aeabi_dsub+0x5cc>
 8001e8a:	291f      	cmp	r1, #31
 8001e8c:	dd00      	ble.n	8001e90 <__aeabi_dsub+0x25c>
 8001e8e:	e227      	b.n	80022e0 <__aeabi_dsub+0x6ac>
 8001e90:	2420      	movs	r4, #32
 8001e92:	1a64      	subs	r4, r4, r1
 8001e94:	4649      	mov	r1, r9
 8001e96:	40a1      	lsls	r1, r4
 8001e98:	001e      	movs	r6, r3
 8001e9a:	4688      	mov	r8, r1
 8001e9c:	4661      	mov	r1, ip
 8001e9e:	40a3      	lsls	r3, r4
 8001ea0:	40ce      	lsrs	r6, r1
 8001ea2:	4641      	mov	r1, r8
 8001ea4:	1e5c      	subs	r4, r3, #1
 8001ea6:	41a3      	sbcs	r3, r4
 8001ea8:	4331      	orrs	r1, r6
 8001eaa:	4319      	orrs	r1, r3
 8001eac:	000c      	movs	r4, r1
 8001eae:	4663      	mov	r3, ip
 8001eb0:	4649      	mov	r1, r9
 8001eb2:	40d9      	lsrs	r1, r3
 8001eb4:	187f      	adds	r7, r7, r1
 8001eb6:	1824      	adds	r4, r4, r0
 8001eb8:	4284      	cmp	r4, r0
 8001eba:	419b      	sbcs	r3, r3
 8001ebc:	425b      	negs	r3, r3
 8001ebe:	469a      	mov	sl, r3
 8001ec0:	0016      	movs	r6, r2
 8001ec2:	44ba      	add	sl, r7
 8001ec4:	e05d      	b.n	8001f82 <__aeabi_dsub+0x34e>
 8001ec6:	4c38      	ldr	r4, [pc, #224]	; (8001fa8 <__aeabi_dsub+0x374>)
 8001ec8:	1c72      	adds	r2, r6, #1
 8001eca:	4222      	tst	r2, r4
 8001ecc:	d000      	beq.n	8001ed0 <__aeabi_dsub+0x29c>
 8001ece:	e0df      	b.n	8002090 <__aeabi_dsub+0x45c>
 8001ed0:	464a      	mov	r2, r9
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	2e00      	cmp	r6, #0
 8001ed6:	d000      	beq.n	8001eda <__aeabi_dsub+0x2a6>
 8001ed8:	e15c      	b.n	8002194 <__aeabi_dsub+0x560>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x2ac>
 8001ede:	e1cf      	b.n	8002280 <__aeabi_dsub+0x64c>
 8001ee0:	003a      	movs	r2, r7
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x2b4>
 8001ee6:	e17f      	b.n	80021e8 <__aeabi_dsub+0x5b4>
 8001ee8:	1a1c      	subs	r4, r3, r0
 8001eea:	464a      	mov	r2, r9
 8001eec:	42a3      	cmp	r3, r4
 8001eee:	4189      	sbcs	r1, r1
 8001ef0:	1bd2      	subs	r2, r2, r7
 8001ef2:	4249      	negs	r1, r1
 8001ef4:	1a52      	subs	r2, r2, r1
 8001ef6:	4692      	mov	sl, r2
 8001ef8:	0212      	lsls	r2, r2, #8
 8001efa:	d400      	bmi.n	8001efe <__aeabi_dsub+0x2ca>
 8001efc:	e20a      	b.n	8002314 <__aeabi_dsub+0x6e0>
 8001efe:	1ac4      	subs	r4, r0, r3
 8001f00:	42a0      	cmp	r0, r4
 8001f02:	4180      	sbcs	r0, r0
 8001f04:	464b      	mov	r3, r9
 8001f06:	4240      	negs	r0, r0
 8001f08:	1aff      	subs	r7, r7, r3
 8001f0a:	1a3b      	subs	r3, r7, r0
 8001f0c:	469a      	mov	sl, r3
 8001f0e:	465d      	mov	r5, fp
 8001f10:	e71a      	b.n	8001d48 <__aeabi_dsub+0x114>
 8001f12:	003a      	movs	r2, r7
 8001f14:	4302      	orrs	r2, r0
 8001f16:	d073      	beq.n	8002000 <__aeabi_dsub+0x3cc>
 8001f18:	0022      	movs	r2, r4
 8001f1a:	3a01      	subs	r2, #1
 8001f1c:	2c01      	cmp	r4, #1
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x2ee>
 8001f20:	e0cb      	b.n	80020ba <__aeabi_dsub+0x486>
 8001f22:	4554      	cmp	r4, sl
 8001f24:	d042      	beq.n	8001fac <__aeabi_dsub+0x378>
 8001f26:	4694      	mov	ip, r2
 8001f28:	e748      	b.n	8001dbc <__aeabi_dsub+0x188>
 8001f2a:	0010      	movs	r0, r2
 8001f2c:	3b1f      	subs	r3, #31
 8001f2e:	40d8      	lsrs	r0, r3
 8001f30:	2920      	cmp	r1, #32
 8001f32:	d003      	beq.n	8001f3c <__aeabi_dsub+0x308>
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	1a5b      	subs	r3, r3, r1
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	4314      	orrs	r4, r2
 8001f3c:	1e63      	subs	r3, r4, #1
 8001f3e:	419c      	sbcs	r4, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	2600      	movs	r6, #0
 8001f44:	469a      	mov	sl, r3
 8001f46:	4304      	orrs	r4, r0
 8001f48:	0763      	lsls	r3, r4, #29
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x31a>
 8001f4c:	e6fe      	b.n	8001d4c <__aeabi_dsub+0x118>
 8001f4e:	4652      	mov	r2, sl
 8001f50:	08e3      	lsrs	r3, r4, #3
 8001f52:	0752      	lsls	r2, r2, #29
 8001f54:	4313      	orrs	r3, r2
 8001f56:	4652      	mov	r2, sl
 8001f58:	46b4      	mov	ip, r6
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	490f      	ldr	r1, [pc, #60]	; (8001f9c <__aeabi_dsub+0x368>)
 8001f5e:	458c      	cmp	ip, r1
 8001f60:	d02a      	beq.n	8001fb8 <__aeabi_dsub+0x384>
 8001f62:	0312      	lsls	r2, r2, #12
 8001f64:	0b14      	lsrs	r4, r2, #12
 8001f66:	4662      	mov	r2, ip
 8001f68:	0552      	lsls	r2, r2, #21
 8001f6a:	0d52      	lsrs	r2, r2, #21
 8001f6c:	e70c      	b.n	8001d88 <__aeabi_dsub+0x154>
 8001f6e:	003c      	movs	r4, r7
 8001f70:	4304      	orrs	r4, r0
 8001f72:	1e62      	subs	r2, r4, #1
 8001f74:	4194      	sbcs	r4, r2
 8001f76:	18e4      	adds	r4, r4, r3
 8001f78:	429c      	cmp	r4, r3
 8001f7a:	4192      	sbcs	r2, r2
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	444a      	add	r2, r9
 8001f80:	4692      	mov	sl, r2
 8001f82:	4653      	mov	r3, sl
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	d5df      	bpl.n	8001f48 <__aeabi_dsub+0x314>
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__aeabi_dsub+0x368>)
 8001f8a:	3601      	adds	r6, #1
 8001f8c:	429e      	cmp	r6, r3
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dsub+0x35e>
 8001f90:	e0a0      	b.n	80020d4 <__aeabi_dsub+0x4a0>
 8001f92:	0032      	movs	r2, r6
 8001f94:	2400      	movs	r4, #0
 8001f96:	2300      	movs	r3, #0
 8001f98:	e6f6      	b.n	8001d88 <__aeabi_dsub+0x154>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	000007ff 	.word	0x000007ff
 8001fa0:	ff7fffff 	.word	0xff7fffff
 8001fa4:	fffff801 	.word	0xfffff801
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	464a      	mov	r2, r9
 8001fb0:	0752      	lsls	r2, r2, #29
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	464a      	mov	r2, r9
 8001fb6:	08d2      	lsrs	r2, r2, #3
 8001fb8:	0019      	movs	r1, r3
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x38c>
 8001fbe:	e1b5      	b.n	800232c <__aeabi_dsub+0x6f8>
 8001fc0:	2480      	movs	r4, #128	; 0x80
 8001fc2:	0324      	lsls	r4, r4, #12
 8001fc4:	4314      	orrs	r4, r2
 8001fc6:	0324      	lsls	r4, r4, #12
 8001fc8:	4ad5      	ldr	r2, [pc, #852]	; (8002320 <__aeabi_dsub+0x6ec>)
 8001fca:	0b24      	lsrs	r4, r4, #12
 8001fcc:	e6dc      	b.n	8001d88 <__aeabi_dsub+0x154>
 8001fce:	0020      	movs	r0, r4
 8001fd0:	f000 faa4 	bl	800251c <__clzsi2>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	2b1f      	cmp	r3, #31
 8001fda:	dc00      	bgt.n	8001fde <__aeabi_dsub+0x3aa>
 8001fdc:	e695      	b.n	8001d0a <__aeabi_dsub+0xd6>
 8001fde:	0022      	movs	r2, r4
 8001fe0:	3808      	subs	r0, #8
 8001fe2:	4082      	lsls	r2, r0
 8001fe4:	2400      	movs	r4, #0
 8001fe6:	429e      	cmp	r6, r3
 8001fe8:	dc00      	bgt.n	8001fec <__aeabi_dsub+0x3b8>
 8001fea:	e69a      	b.n	8001d22 <__aeabi_dsub+0xee>
 8001fec:	1af6      	subs	r6, r6, r3
 8001fee:	4bcd      	ldr	r3, [pc, #820]	; (8002324 <__aeabi_dsub+0x6f0>)
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	4692      	mov	sl, r2
 8001ff4:	e6a8      	b.n	8001d48 <__aeabi_dsub+0x114>
 8001ff6:	003c      	movs	r4, r7
 8001ff8:	4304      	orrs	r4, r0
 8001ffa:	1e62      	subs	r2, r4, #1
 8001ffc:	4194      	sbcs	r4, r2
 8001ffe:	e66c      	b.n	8001cda <__aeabi_dsub+0xa6>
 8002000:	464a      	mov	r2, r9
 8002002:	08db      	lsrs	r3, r3, #3
 8002004:	0752      	lsls	r2, r2, #29
 8002006:	4313      	orrs	r3, r2
 8002008:	464a      	mov	r2, r9
 800200a:	08d2      	lsrs	r2, r2, #3
 800200c:	e7a6      	b.n	8001f5c <__aeabi_dsub+0x328>
 800200e:	4cc6      	ldr	r4, [pc, #792]	; (8002328 <__aeabi_dsub+0x6f4>)
 8002010:	1c72      	adds	r2, r6, #1
 8002012:	4222      	tst	r2, r4
 8002014:	d000      	beq.n	8002018 <__aeabi_dsub+0x3e4>
 8002016:	e0ac      	b.n	8002172 <__aeabi_dsub+0x53e>
 8002018:	464a      	mov	r2, r9
 800201a:	431a      	orrs	r2, r3
 800201c:	2e00      	cmp	r6, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dsub+0x3ee>
 8002020:	e105      	b.n	800222e <__aeabi_dsub+0x5fa>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x3f4>
 8002026:	e156      	b.n	80022d6 <__aeabi_dsub+0x6a2>
 8002028:	003a      	movs	r2, r7
 800202a:	4302      	orrs	r2, r0
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x3fc>
 800202e:	e0db      	b.n	80021e8 <__aeabi_dsub+0x5b4>
 8002030:	181c      	adds	r4, r3, r0
 8002032:	429c      	cmp	r4, r3
 8002034:	419b      	sbcs	r3, r3
 8002036:	444f      	add	r7, r9
 8002038:	46ba      	mov	sl, r7
 800203a:	425b      	negs	r3, r3
 800203c:	449a      	add	sl, r3
 800203e:	4653      	mov	r3, sl
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	d400      	bmi.n	8002046 <__aeabi_dsub+0x412>
 8002044:	e780      	b.n	8001f48 <__aeabi_dsub+0x314>
 8002046:	4652      	mov	r2, sl
 8002048:	4bb6      	ldr	r3, [pc, #728]	; (8002324 <__aeabi_dsub+0x6f0>)
 800204a:	2601      	movs	r6, #1
 800204c:	401a      	ands	r2, r3
 800204e:	4692      	mov	sl, r2
 8002050:	e77a      	b.n	8001f48 <__aeabi_dsub+0x314>
 8002052:	4cb3      	ldr	r4, [pc, #716]	; (8002320 <__aeabi_dsub+0x6ec>)
 8002054:	42a2      	cmp	r2, r4
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x426>
 8002058:	e0c0      	b.n	80021dc <__aeabi_dsub+0x5a8>
 800205a:	2480      	movs	r4, #128	; 0x80
 800205c:	464d      	mov	r5, r9
 800205e:	0424      	lsls	r4, r4, #16
 8002060:	4325      	orrs	r5, r4
 8002062:	46a9      	mov	r9, r5
 8002064:	4664      	mov	r4, ip
 8002066:	2c38      	cmp	r4, #56	; 0x38
 8002068:	dc53      	bgt.n	8002112 <__aeabi_dsub+0x4de>
 800206a:	4661      	mov	r1, ip
 800206c:	2c1f      	cmp	r4, #31
 800206e:	dd00      	ble.n	8002072 <__aeabi_dsub+0x43e>
 8002070:	e0cd      	b.n	800220e <__aeabi_dsub+0x5da>
 8002072:	2520      	movs	r5, #32
 8002074:	001e      	movs	r6, r3
 8002076:	1b2d      	subs	r5, r5, r4
 8002078:	464c      	mov	r4, r9
 800207a:	40ab      	lsls	r3, r5
 800207c:	40ac      	lsls	r4, r5
 800207e:	40ce      	lsrs	r6, r1
 8002080:	1e5d      	subs	r5, r3, #1
 8002082:	41ab      	sbcs	r3, r5
 8002084:	4334      	orrs	r4, r6
 8002086:	4323      	orrs	r3, r4
 8002088:	464c      	mov	r4, r9
 800208a:	40cc      	lsrs	r4, r1
 800208c:	1b3f      	subs	r7, r7, r4
 800208e:	e045      	b.n	800211c <__aeabi_dsub+0x4e8>
 8002090:	464a      	mov	r2, r9
 8002092:	1a1c      	subs	r4, r3, r0
 8002094:	1bd1      	subs	r1, r2, r7
 8002096:	42a3      	cmp	r3, r4
 8002098:	4192      	sbcs	r2, r2
 800209a:	4252      	negs	r2, r2
 800209c:	4692      	mov	sl, r2
 800209e:	000a      	movs	r2, r1
 80020a0:	4651      	mov	r1, sl
 80020a2:	1a52      	subs	r2, r2, r1
 80020a4:	4692      	mov	sl, r2
 80020a6:	0212      	lsls	r2, r2, #8
 80020a8:	d500      	bpl.n	80020ac <__aeabi_dsub+0x478>
 80020aa:	e083      	b.n	80021b4 <__aeabi_dsub+0x580>
 80020ac:	4653      	mov	r3, sl
 80020ae:	4323      	orrs	r3, r4
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x480>
 80020b2:	e621      	b.n	8001cf8 <__aeabi_dsub+0xc4>
 80020b4:	2200      	movs	r2, #0
 80020b6:	2500      	movs	r5, #0
 80020b8:	e753      	b.n	8001f62 <__aeabi_dsub+0x32e>
 80020ba:	181c      	adds	r4, r3, r0
 80020bc:	429c      	cmp	r4, r3
 80020be:	419b      	sbcs	r3, r3
 80020c0:	444f      	add	r7, r9
 80020c2:	46ba      	mov	sl, r7
 80020c4:	425b      	negs	r3, r3
 80020c6:	449a      	add	sl, r3
 80020c8:	4653      	mov	r3, sl
 80020ca:	2601      	movs	r6, #1
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	d400      	bmi.n	80020d2 <__aeabi_dsub+0x49e>
 80020d0:	e73a      	b.n	8001f48 <__aeabi_dsub+0x314>
 80020d2:	2602      	movs	r6, #2
 80020d4:	4652      	mov	r2, sl
 80020d6:	4b93      	ldr	r3, [pc, #588]	; (8002324 <__aeabi_dsub+0x6f0>)
 80020d8:	2101      	movs	r1, #1
 80020da:	401a      	ands	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	4021      	ands	r1, r4
 80020e0:	0862      	lsrs	r2, r4, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	07dc      	lsls	r4, r3, #31
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	469a      	mov	sl, r3
 80020ea:	4314      	orrs	r4, r2
 80020ec:	e62c      	b.n	8001d48 <__aeabi_dsub+0x114>
 80020ee:	0039      	movs	r1, r7
 80020f0:	3a20      	subs	r2, #32
 80020f2:	40d1      	lsrs	r1, r2
 80020f4:	4662      	mov	r2, ip
 80020f6:	2a20      	cmp	r2, #32
 80020f8:	d006      	beq.n	8002108 <__aeabi_dsub+0x4d4>
 80020fa:	4664      	mov	r4, ip
 80020fc:	2240      	movs	r2, #64	; 0x40
 80020fe:	1b12      	subs	r2, r2, r4
 8002100:	003c      	movs	r4, r7
 8002102:	4094      	lsls	r4, r2
 8002104:	4304      	orrs	r4, r0
 8002106:	9401      	str	r4, [sp, #4]
 8002108:	9c01      	ldr	r4, [sp, #4]
 800210a:	1e62      	subs	r2, r4, #1
 800210c:	4194      	sbcs	r4, r2
 800210e:	430c      	orrs	r4, r1
 8002110:	e5e3      	b.n	8001cda <__aeabi_dsub+0xa6>
 8002112:	4649      	mov	r1, r9
 8002114:	4319      	orrs	r1, r3
 8002116:	000b      	movs	r3, r1
 8002118:	1e5c      	subs	r4, r3, #1
 800211a:	41a3      	sbcs	r3, r4
 800211c:	1ac4      	subs	r4, r0, r3
 800211e:	42a0      	cmp	r0, r4
 8002120:	419b      	sbcs	r3, r3
 8002122:	425b      	negs	r3, r3
 8002124:	1afb      	subs	r3, r7, r3
 8002126:	469a      	mov	sl, r3
 8002128:	465d      	mov	r5, fp
 800212a:	0016      	movs	r6, r2
 800212c:	e5dc      	b.n	8001ce8 <__aeabi_dsub+0xb4>
 800212e:	4649      	mov	r1, r9
 8002130:	4319      	orrs	r1, r3
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x502>
 8002134:	e0ae      	b.n	8002294 <__aeabi_dsub+0x660>
 8002136:	4661      	mov	r1, ip
 8002138:	4664      	mov	r4, ip
 800213a:	3901      	subs	r1, #1
 800213c:	2c01      	cmp	r4, #1
 800213e:	d100      	bne.n	8002142 <__aeabi_dsub+0x50e>
 8002140:	e0e0      	b.n	8002304 <__aeabi_dsub+0x6d0>
 8002142:	4c77      	ldr	r4, [pc, #476]	; (8002320 <__aeabi_dsub+0x6ec>)
 8002144:	45a4      	cmp	ip, r4
 8002146:	d056      	beq.n	80021f6 <__aeabi_dsub+0x5c2>
 8002148:	468c      	mov	ip, r1
 800214a:	e69a      	b.n	8001e82 <__aeabi_dsub+0x24e>
 800214c:	4661      	mov	r1, ip
 800214e:	2220      	movs	r2, #32
 8002150:	003c      	movs	r4, r7
 8002152:	1a52      	subs	r2, r2, r1
 8002154:	4094      	lsls	r4, r2
 8002156:	0001      	movs	r1, r0
 8002158:	4090      	lsls	r0, r2
 800215a:	46a0      	mov	r8, r4
 800215c:	4664      	mov	r4, ip
 800215e:	1e42      	subs	r2, r0, #1
 8002160:	4190      	sbcs	r0, r2
 8002162:	4662      	mov	r2, ip
 8002164:	40e1      	lsrs	r1, r4
 8002166:	4644      	mov	r4, r8
 8002168:	40d7      	lsrs	r7, r2
 800216a:	430c      	orrs	r4, r1
 800216c:	4304      	orrs	r4, r0
 800216e:	44b9      	add	r9, r7
 8002170:	e701      	b.n	8001f76 <__aeabi_dsub+0x342>
 8002172:	496b      	ldr	r1, [pc, #428]	; (8002320 <__aeabi_dsub+0x6ec>)
 8002174:	428a      	cmp	r2, r1
 8002176:	d100      	bne.n	800217a <__aeabi_dsub+0x546>
 8002178:	e70c      	b.n	8001f94 <__aeabi_dsub+0x360>
 800217a:	1818      	adds	r0, r3, r0
 800217c:	4298      	cmp	r0, r3
 800217e:	419b      	sbcs	r3, r3
 8002180:	444f      	add	r7, r9
 8002182:	425b      	negs	r3, r3
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	07dc      	lsls	r4, r3, #31
 8002188:	0840      	lsrs	r0, r0, #1
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	469a      	mov	sl, r3
 800218e:	0016      	movs	r6, r2
 8002190:	4304      	orrs	r4, r0
 8002192:	e6d9      	b.n	8001f48 <__aeabi_dsub+0x314>
 8002194:	2a00      	cmp	r2, #0
 8002196:	d000      	beq.n	800219a <__aeabi_dsub+0x566>
 8002198:	e081      	b.n	800229e <__aeabi_dsub+0x66a>
 800219a:	003b      	movs	r3, r7
 800219c:	4303      	orrs	r3, r0
 800219e:	d11d      	bne.n	80021dc <__aeabi_dsub+0x5a8>
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	2500      	movs	r5, #0
 80021a4:	0312      	lsls	r2, r2, #12
 80021a6:	e70b      	b.n	8001fc0 <__aeabi_dsub+0x38c>
 80021a8:	08c0      	lsrs	r0, r0, #3
 80021aa:	077b      	lsls	r3, r7, #29
 80021ac:	465d      	mov	r5, fp
 80021ae:	4303      	orrs	r3, r0
 80021b0:	08fa      	lsrs	r2, r7, #3
 80021b2:	e6d3      	b.n	8001f5c <__aeabi_dsub+0x328>
 80021b4:	1ac4      	subs	r4, r0, r3
 80021b6:	42a0      	cmp	r0, r4
 80021b8:	4180      	sbcs	r0, r0
 80021ba:	464b      	mov	r3, r9
 80021bc:	4240      	negs	r0, r0
 80021be:	1aff      	subs	r7, r7, r3
 80021c0:	1a3b      	subs	r3, r7, r0
 80021c2:	469a      	mov	sl, r3
 80021c4:	465d      	mov	r5, fp
 80021c6:	e597      	b.n	8001cf8 <__aeabi_dsub+0xc4>
 80021c8:	1a1c      	subs	r4, r3, r0
 80021ca:	464a      	mov	r2, r9
 80021cc:	42a3      	cmp	r3, r4
 80021ce:	419b      	sbcs	r3, r3
 80021d0:	1bd7      	subs	r7, r2, r7
 80021d2:	425b      	negs	r3, r3
 80021d4:	1afb      	subs	r3, r7, r3
 80021d6:	469a      	mov	sl, r3
 80021d8:	2601      	movs	r6, #1
 80021da:	e585      	b.n	8001ce8 <__aeabi_dsub+0xb4>
 80021dc:	08c0      	lsrs	r0, r0, #3
 80021de:	077b      	lsls	r3, r7, #29
 80021e0:	465d      	mov	r5, fp
 80021e2:	4303      	orrs	r3, r0
 80021e4:	08fa      	lsrs	r2, r7, #3
 80021e6:	e6e7      	b.n	8001fb8 <__aeabi_dsub+0x384>
 80021e8:	464a      	mov	r2, r9
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	0752      	lsls	r2, r2, #29
 80021ee:	4313      	orrs	r3, r2
 80021f0:	464a      	mov	r2, r9
 80021f2:	08d2      	lsrs	r2, r2, #3
 80021f4:	e6b5      	b.n	8001f62 <__aeabi_dsub+0x32e>
 80021f6:	08c0      	lsrs	r0, r0, #3
 80021f8:	077b      	lsls	r3, r7, #29
 80021fa:	4303      	orrs	r3, r0
 80021fc:	08fa      	lsrs	r2, r7, #3
 80021fe:	e6db      	b.n	8001fb8 <__aeabi_dsub+0x384>
 8002200:	4649      	mov	r1, r9
 8002202:	4319      	orrs	r1, r3
 8002204:	000b      	movs	r3, r1
 8002206:	1e59      	subs	r1, r3, #1
 8002208:	418b      	sbcs	r3, r1
 800220a:	001c      	movs	r4, r3
 800220c:	e653      	b.n	8001eb6 <__aeabi_dsub+0x282>
 800220e:	464d      	mov	r5, r9
 8002210:	3c20      	subs	r4, #32
 8002212:	40e5      	lsrs	r5, r4
 8002214:	2920      	cmp	r1, #32
 8002216:	d005      	beq.n	8002224 <__aeabi_dsub+0x5f0>
 8002218:	2440      	movs	r4, #64	; 0x40
 800221a:	1a64      	subs	r4, r4, r1
 800221c:	4649      	mov	r1, r9
 800221e:	40a1      	lsls	r1, r4
 8002220:	430b      	orrs	r3, r1
 8002222:	4698      	mov	r8, r3
 8002224:	4643      	mov	r3, r8
 8002226:	1e5c      	subs	r4, r3, #1
 8002228:	41a3      	sbcs	r3, r4
 800222a:	432b      	orrs	r3, r5
 800222c:	e776      	b.n	800211c <__aeabi_dsub+0x4e8>
 800222e:	2a00      	cmp	r2, #0
 8002230:	d0e1      	beq.n	80021f6 <__aeabi_dsub+0x5c2>
 8002232:	003a      	movs	r2, r7
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	4302      	orrs	r2, r0
 8002238:	d100      	bne.n	800223c <__aeabi_dsub+0x608>
 800223a:	e6b8      	b.n	8001fae <__aeabi_dsub+0x37a>
 800223c:	464a      	mov	r2, r9
 800223e:	0752      	lsls	r2, r2, #29
 8002240:	2480      	movs	r4, #128	; 0x80
 8002242:	4313      	orrs	r3, r2
 8002244:	464a      	mov	r2, r9
 8002246:	0324      	lsls	r4, r4, #12
 8002248:	08d2      	lsrs	r2, r2, #3
 800224a:	4222      	tst	r2, r4
 800224c:	d007      	beq.n	800225e <__aeabi_dsub+0x62a>
 800224e:	08fe      	lsrs	r6, r7, #3
 8002250:	4226      	tst	r6, r4
 8002252:	d104      	bne.n	800225e <__aeabi_dsub+0x62a>
 8002254:	465d      	mov	r5, fp
 8002256:	0032      	movs	r2, r6
 8002258:	08c3      	lsrs	r3, r0, #3
 800225a:	077f      	lsls	r7, r7, #29
 800225c:	433b      	orrs	r3, r7
 800225e:	0f59      	lsrs	r1, r3, #29
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	0749      	lsls	r1, r1, #29
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	430b      	orrs	r3, r1
 8002268:	e6a6      	b.n	8001fb8 <__aeabi_dsub+0x384>
 800226a:	1ac4      	subs	r4, r0, r3
 800226c:	42a0      	cmp	r0, r4
 800226e:	4180      	sbcs	r0, r0
 8002270:	464b      	mov	r3, r9
 8002272:	4240      	negs	r0, r0
 8002274:	1aff      	subs	r7, r7, r3
 8002276:	1a3b      	subs	r3, r7, r0
 8002278:	469a      	mov	sl, r3
 800227a:	465d      	mov	r5, fp
 800227c:	2601      	movs	r6, #1
 800227e:	e533      	b.n	8001ce8 <__aeabi_dsub+0xb4>
 8002280:	003b      	movs	r3, r7
 8002282:	4303      	orrs	r3, r0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x654>
 8002286:	e715      	b.n	80020b4 <__aeabi_dsub+0x480>
 8002288:	08c0      	lsrs	r0, r0, #3
 800228a:	077b      	lsls	r3, r7, #29
 800228c:	465d      	mov	r5, fp
 800228e:	4303      	orrs	r3, r0
 8002290:	08fa      	lsrs	r2, r7, #3
 8002292:	e666      	b.n	8001f62 <__aeabi_dsub+0x32e>
 8002294:	08c0      	lsrs	r0, r0, #3
 8002296:	077b      	lsls	r3, r7, #29
 8002298:	4303      	orrs	r3, r0
 800229a:	08fa      	lsrs	r2, r7, #3
 800229c:	e65e      	b.n	8001f5c <__aeabi_dsub+0x328>
 800229e:	003a      	movs	r2, r7
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	4302      	orrs	r2, r0
 80022a4:	d100      	bne.n	80022a8 <__aeabi_dsub+0x674>
 80022a6:	e682      	b.n	8001fae <__aeabi_dsub+0x37a>
 80022a8:	464a      	mov	r2, r9
 80022aa:	0752      	lsls	r2, r2, #29
 80022ac:	2480      	movs	r4, #128	; 0x80
 80022ae:	4313      	orrs	r3, r2
 80022b0:	464a      	mov	r2, r9
 80022b2:	0324      	lsls	r4, r4, #12
 80022b4:	08d2      	lsrs	r2, r2, #3
 80022b6:	4222      	tst	r2, r4
 80022b8:	d007      	beq.n	80022ca <__aeabi_dsub+0x696>
 80022ba:	08fe      	lsrs	r6, r7, #3
 80022bc:	4226      	tst	r6, r4
 80022be:	d104      	bne.n	80022ca <__aeabi_dsub+0x696>
 80022c0:	465d      	mov	r5, fp
 80022c2:	0032      	movs	r2, r6
 80022c4:	08c3      	lsrs	r3, r0, #3
 80022c6:	077f      	lsls	r7, r7, #29
 80022c8:	433b      	orrs	r3, r7
 80022ca:	0f59      	lsrs	r1, r3, #29
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	0749      	lsls	r1, r1, #29
 80022d2:	430b      	orrs	r3, r1
 80022d4:	e670      	b.n	8001fb8 <__aeabi_dsub+0x384>
 80022d6:	08c0      	lsrs	r0, r0, #3
 80022d8:	077b      	lsls	r3, r7, #29
 80022da:	4303      	orrs	r3, r0
 80022dc:	08fa      	lsrs	r2, r7, #3
 80022de:	e640      	b.n	8001f62 <__aeabi_dsub+0x32e>
 80022e0:	464c      	mov	r4, r9
 80022e2:	3920      	subs	r1, #32
 80022e4:	40cc      	lsrs	r4, r1
 80022e6:	4661      	mov	r1, ip
 80022e8:	2920      	cmp	r1, #32
 80022ea:	d006      	beq.n	80022fa <__aeabi_dsub+0x6c6>
 80022ec:	4666      	mov	r6, ip
 80022ee:	2140      	movs	r1, #64	; 0x40
 80022f0:	1b89      	subs	r1, r1, r6
 80022f2:	464e      	mov	r6, r9
 80022f4:	408e      	lsls	r6, r1
 80022f6:	4333      	orrs	r3, r6
 80022f8:	4698      	mov	r8, r3
 80022fa:	4643      	mov	r3, r8
 80022fc:	1e59      	subs	r1, r3, #1
 80022fe:	418b      	sbcs	r3, r1
 8002300:	431c      	orrs	r4, r3
 8002302:	e5d8      	b.n	8001eb6 <__aeabi_dsub+0x282>
 8002304:	181c      	adds	r4, r3, r0
 8002306:	4284      	cmp	r4, r0
 8002308:	4180      	sbcs	r0, r0
 800230a:	444f      	add	r7, r9
 800230c:	46ba      	mov	sl, r7
 800230e:	4240      	negs	r0, r0
 8002310:	4482      	add	sl, r0
 8002312:	e6d9      	b.n	80020c8 <__aeabi_dsub+0x494>
 8002314:	4653      	mov	r3, sl
 8002316:	4323      	orrs	r3, r4
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x6e8>
 800231a:	e6cb      	b.n	80020b4 <__aeabi_dsub+0x480>
 800231c:	e614      	b.n	8001f48 <__aeabi_dsub+0x314>
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	000007ff 	.word	0x000007ff
 8002324:	ff7fffff 	.word	0xff7fffff
 8002328:	000007fe 	.word	0x000007fe
 800232c:	2300      	movs	r3, #0
 800232e:	4a01      	ldr	r2, [pc, #4]	; (8002334 <__aeabi_dsub+0x700>)
 8002330:	001c      	movs	r4, r3
 8002332:	e529      	b.n	8001d88 <__aeabi_dsub+0x154>
 8002334:	000007ff 	.word	0x000007ff

08002338 <__aeabi_dcmpun>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	0005      	movs	r5, r0
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <__aeabi_dcmpun+0x38>)
 800233e:	031c      	lsls	r4, r3, #12
 8002340:	0016      	movs	r6, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	030a      	lsls	r2, r1, #12
 8002346:	0049      	lsls	r1, r1, #1
 8002348:	0b12      	lsrs	r2, r2, #12
 800234a:	0d49      	lsrs	r1, r1, #21
 800234c:	0b24      	lsrs	r4, r4, #12
 800234e:	0d5b      	lsrs	r3, r3, #21
 8002350:	4281      	cmp	r1, r0
 8002352:	d008      	beq.n	8002366 <__aeabi_dcmpun+0x2e>
 8002354:	4a06      	ldr	r2, [pc, #24]	; (8002370 <__aeabi_dcmpun+0x38>)
 8002356:	2000      	movs	r0, #0
 8002358:	4293      	cmp	r3, r2
 800235a:	d103      	bne.n	8002364 <__aeabi_dcmpun+0x2c>
 800235c:	0020      	movs	r0, r4
 800235e:	4330      	orrs	r0, r6
 8002360:	1e43      	subs	r3, r0, #1
 8002362:	4198      	sbcs	r0, r3
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	2001      	movs	r0, #1
 8002368:	432a      	orrs	r2, r5
 800236a:	d1fb      	bne.n	8002364 <__aeabi_dcmpun+0x2c>
 800236c:	e7f2      	b.n	8002354 <__aeabi_dcmpun+0x1c>
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	000007ff 	.word	0x000007ff

08002374 <__aeabi_d2iz>:
 8002374:	000a      	movs	r2, r1
 8002376:	b530      	push	{r4, r5, lr}
 8002378:	4c13      	ldr	r4, [pc, #76]	; (80023c8 <__aeabi_d2iz+0x54>)
 800237a:	0053      	lsls	r3, r2, #1
 800237c:	0309      	lsls	r1, r1, #12
 800237e:	0005      	movs	r5, r0
 8002380:	0b09      	lsrs	r1, r1, #12
 8002382:	2000      	movs	r0, #0
 8002384:	0d5b      	lsrs	r3, r3, #21
 8002386:	0fd2      	lsrs	r2, r2, #31
 8002388:	42a3      	cmp	r3, r4
 800238a:	dd04      	ble.n	8002396 <__aeabi_d2iz+0x22>
 800238c:	480f      	ldr	r0, [pc, #60]	; (80023cc <__aeabi_d2iz+0x58>)
 800238e:	4283      	cmp	r3, r0
 8002390:	dd02      	ble.n	8002398 <__aeabi_d2iz+0x24>
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <__aeabi_d2iz+0x5c>)
 8002394:	18d0      	adds	r0, r2, r3
 8002396:	bd30      	pop	{r4, r5, pc}
 8002398:	2080      	movs	r0, #128	; 0x80
 800239a:	0340      	lsls	r0, r0, #13
 800239c:	4301      	orrs	r1, r0
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <__aeabi_d2iz+0x60>)
 80023a0:	1ac0      	subs	r0, r0, r3
 80023a2:	281f      	cmp	r0, #31
 80023a4:	dd08      	ble.n	80023b8 <__aeabi_d2iz+0x44>
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <__aeabi_d2iz+0x64>)
 80023a8:	1ac3      	subs	r3, r0, r3
 80023aa:	40d9      	lsrs	r1, r3
 80023ac:	000b      	movs	r3, r1
 80023ae:	4258      	negs	r0, r3
 80023b0:	2a00      	cmp	r2, #0
 80023b2:	d1f0      	bne.n	8002396 <__aeabi_d2iz+0x22>
 80023b4:	0018      	movs	r0, r3
 80023b6:	e7ee      	b.n	8002396 <__aeabi_d2iz+0x22>
 80023b8:	4c08      	ldr	r4, [pc, #32]	; (80023dc <__aeabi_d2iz+0x68>)
 80023ba:	40c5      	lsrs	r5, r0
 80023bc:	46a4      	mov	ip, r4
 80023be:	4463      	add	r3, ip
 80023c0:	4099      	lsls	r1, r3
 80023c2:	000b      	movs	r3, r1
 80023c4:	432b      	orrs	r3, r5
 80023c6:	e7f2      	b.n	80023ae <__aeabi_d2iz+0x3a>
 80023c8:	000003fe 	.word	0x000003fe
 80023cc:	0000041d 	.word	0x0000041d
 80023d0:	7fffffff 	.word	0x7fffffff
 80023d4:	00000433 	.word	0x00000433
 80023d8:	00000413 	.word	0x00000413
 80023dc:	fffffbed 	.word	0xfffffbed

080023e0 <__aeabi_i2d>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d016      	beq.n	8002414 <__aeabi_i2d+0x34>
 80023e6:	17c3      	asrs	r3, r0, #31
 80023e8:	18c5      	adds	r5, r0, r3
 80023ea:	405d      	eors	r5, r3
 80023ec:	0fc4      	lsrs	r4, r0, #31
 80023ee:	0028      	movs	r0, r5
 80023f0:	f000 f894 	bl	800251c <__clzsi2>
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <__aeabi_i2d+0x5c>)
 80023f6:	1a1b      	subs	r3, r3, r0
 80023f8:	280a      	cmp	r0, #10
 80023fa:	dc16      	bgt.n	800242a <__aeabi_i2d+0x4a>
 80023fc:	0002      	movs	r2, r0
 80023fe:	002e      	movs	r6, r5
 8002400:	3215      	adds	r2, #21
 8002402:	4096      	lsls	r6, r2
 8002404:	220b      	movs	r2, #11
 8002406:	1a12      	subs	r2, r2, r0
 8002408:	40d5      	lsrs	r5, r2
 800240a:	055b      	lsls	r3, r3, #21
 800240c:	032d      	lsls	r5, r5, #12
 800240e:	0b2d      	lsrs	r5, r5, #12
 8002410:	0d5b      	lsrs	r3, r3, #21
 8002412:	e003      	b.n	800241c <__aeabi_i2d+0x3c>
 8002414:	2400      	movs	r4, #0
 8002416:	2300      	movs	r3, #0
 8002418:	2500      	movs	r5, #0
 800241a:	2600      	movs	r6, #0
 800241c:	051b      	lsls	r3, r3, #20
 800241e:	432b      	orrs	r3, r5
 8002420:	07e4      	lsls	r4, r4, #31
 8002422:	4323      	orrs	r3, r4
 8002424:	0030      	movs	r0, r6
 8002426:	0019      	movs	r1, r3
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	380b      	subs	r0, #11
 800242c:	4085      	lsls	r5, r0
 800242e:	055b      	lsls	r3, r3, #21
 8002430:	032d      	lsls	r5, r5, #12
 8002432:	2600      	movs	r6, #0
 8002434:	0b2d      	lsrs	r5, r5, #12
 8002436:	0d5b      	lsrs	r3, r3, #21
 8002438:	e7f0      	b.n	800241c <__aeabi_i2d+0x3c>
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	0000041e 	.word	0x0000041e

08002440 <__aeabi_ui2d>:
 8002440:	b510      	push	{r4, lr}
 8002442:	1e04      	subs	r4, r0, #0
 8002444:	d010      	beq.n	8002468 <__aeabi_ui2d+0x28>
 8002446:	f000 f869 	bl	800251c <__clzsi2>
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <__aeabi_ui2d+0x48>)
 800244c:	1a1b      	subs	r3, r3, r0
 800244e:	280a      	cmp	r0, #10
 8002450:	dc11      	bgt.n	8002476 <__aeabi_ui2d+0x36>
 8002452:	220b      	movs	r2, #11
 8002454:	0021      	movs	r1, r4
 8002456:	1a12      	subs	r2, r2, r0
 8002458:	40d1      	lsrs	r1, r2
 800245a:	3015      	adds	r0, #21
 800245c:	030a      	lsls	r2, r1, #12
 800245e:	055b      	lsls	r3, r3, #21
 8002460:	4084      	lsls	r4, r0
 8002462:	0b12      	lsrs	r2, r2, #12
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	e001      	b.n	800246c <__aeabi_ui2d+0x2c>
 8002468:	2300      	movs	r3, #0
 800246a:	2200      	movs	r2, #0
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	4313      	orrs	r3, r2
 8002470:	0020      	movs	r0, r4
 8002472:	0019      	movs	r1, r3
 8002474:	bd10      	pop	{r4, pc}
 8002476:	0022      	movs	r2, r4
 8002478:	380b      	subs	r0, #11
 800247a:	4082      	lsls	r2, r0
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	0312      	lsls	r2, r2, #12
 8002480:	2400      	movs	r4, #0
 8002482:	0b12      	lsrs	r2, r2, #12
 8002484:	0d5b      	lsrs	r3, r3, #21
 8002486:	e7f1      	b.n	800246c <__aeabi_ui2d+0x2c>
 8002488:	0000041e 	.word	0x0000041e

0800248c <__aeabi_f2d>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	0242      	lsls	r2, r0, #9
 8002490:	0043      	lsls	r3, r0, #1
 8002492:	0fc4      	lsrs	r4, r0, #31
 8002494:	20fe      	movs	r0, #254	; 0xfe
 8002496:	0e1b      	lsrs	r3, r3, #24
 8002498:	1c59      	adds	r1, r3, #1
 800249a:	0a55      	lsrs	r5, r2, #9
 800249c:	4208      	tst	r0, r1
 800249e:	d00c      	beq.n	80024ba <__aeabi_f2d+0x2e>
 80024a0:	21e0      	movs	r1, #224	; 0xe0
 80024a2:	0089      	lsls	r1, r1, #2
 80024a4:	468c      	mov	ip, r1
 80024a6:	076d      	lsls	r5, r5, #29
 80024a8:	0b12      	lsrs	r2, r2, #12
 80024aa:	4463      	add	r3, ip
 80024ac:	051b      	lsls	r3, r3, #20
 80024ae:	4313      	orrs	r3, r2
 80024b0:	07e4      	lsls	r4, r4, #31
 80024b2:	4323      	orrs	r3, r4
 80024b4:	0028      	movs	r0, r5
 80024b6:	0019      	movs	r1, r3
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <__aeabi_f2d+0x5c>
 80024be:	2d00      	cmp	r5, #0
 80024c0:	d01b      	beq.n	80024fa <__aeabi_f2d+0x6e>
 80024c2:	0028      	movs	r0, r5
 80024c4:	f000 f82a 	bl	800251c <__clzsi2>
 80024c8:	280a      	cmp	r0, #10
 80024ca:	dc1c      	bgt.n	8002506 <__aeabi_f2d+0x7a>
 80024cc:	230b      	movs	r3, #11
 80024ce:	002a      	movs	r2, r5
 80024d0:	1a1b      	subs	r3, r3, r0
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	0003      	movs	r3, r0
 80024d6:	3315      	adds	r3, #21
 80024d8:	409d      	lsls	r5, r3
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <__aeabi_f2d+0x88>)
 80024dc:	0312      	lsls	r2, r2, #12
 80024de:	1a1b      	subs	r3, r3, r0
 80024e0:	055b      	lsls	r3, r3, #21
 80024e2:	0b12      	lsrs	r2, r2, #12
 80024e4:	0d5b      	lsrs	r3, r3, #21
 80024e6:	e7e1      	b.n	80024ac <__aeabi_f2d+0x20>
 80024e8:	2d00      	cmp	r5, #0
 80024ea:	d009      	beq.n	8002500 <__aeabi_f2d+0x74>
 80024ec:	0b13      	lsrs	r3, r2, #12
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	0312      	lsls	r2, r2, #12
 80024f2:	431a      	orrs	r2, r3
 80024f4:	076d      	lsls	r5, r5, #29
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <__aeabi_f2d+0x8c>)
 80024f8:	e7d8      	b.n	80024ac <__aeabi_f2d+0x20>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2200      	movs	r2, #0
 80024fe:	e7d5      	b.n	80024ac <__aeabi_f2d+0x20>
 8002500:	2200      	movs	r2, #0
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <__aeabi_f2d+0x8c>)
 8002504:	e7d2      	b.n	80024ac <__aeabi_f2d+0x20>
 8002506:	0003      	movs	r3, r0
 8002508:	002a      	movs	r2, r5
 800250a:	3b0b      	subs	r3, #11
 800250c:	409a      	lsls	r2, r3
 800250e:	2500      	movs	r5, #0
 8002510:	e7e3      	b.n	80024da <__aeabi_f2d+0x4e>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	00000389 	.word	0x00000389
 8002518:	000007ff 	.word	0x000007ff

0800251c <__clzsi2>:
 800251c:	211c      	movs	r1, #28
 800251e:	2301      	movs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	4298      	cmp	r0, r3
 8002524:	d301      	bcc.n	800252a <__clzsi2+0xe>
 8002526:	0c00      	lsrs	r0, r0, #16
 8002528:	3910      	subs	r1, #16
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	4298      	cmp	r0, r3
 800252e:	d301      	bcc.n	8002534 <__clzsi2+0x18>
 8002530:	0a00      	lsrs	r0, r0, #8
 8002532:	3908      	subs	r1, #8
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	4298      	cmp	r0, r3
 8002538:	d301      	bcc.n	800253e <__clzsi2+0x22>
 800253a:	0900      	lsrs	r0, r0, #4
 800253c:	3904      	subs	r1, #4
 800253e:	a202      	add	r2, pc, #8	; (adr r2, 8002548 <__clzsi2+0x2c>)
 8002540:	5c10      	ldrb	r0, [r2, r0]
 8002542:	1840      	adds	r0, r0, r1
 8002544:	4770      	bx	lr
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	02020304 	.word	0x02020304
 800254c:	01010101 	.word	0x01010101
	...

08002558 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	0004      	movs	r4, r0
 8002560:	0008      	movs	r0, r1
 8002562:	0011      	movs	r1, r2
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	1c22      	adds	r2, r4, #0
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	1dbb      	adds	r3, r7, #6
 800256c:	1c02      	adds	r2, r0, #0
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	1d7b      	adds	r3, r7, #5
 8002572:	1c0a      	adds	r2, r1, #0
 8002574:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	409a      	lsls	r2, r3
 8002580:	0013      	movs	r3, r2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	1d7a      	adds	r2, r7, #5
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	4013      	ands	r3, r2
 800258a:	b2db      	uxtb	r3, r3
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b003      	add	sp, #12
 8002592:	bd90      	pop	{r4, r7, pc}

08002594 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	0004      	movs	r4, r0
 800259c:	0008      	movs	r0, r1
 800259e:	0011      	movs	r1, r2
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	1c22      	adds	r2, r4, #0
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	1d7b      	adds	r3, r7, #5
 80025a8:	1c02      	adds	r2, r0, #0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	1c0a      	adds	r2, r1, #0
 80025b0:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 80025b2:	1dbb      	adds	r3, r7, #6
 80025b4:	881a      	ldrh	r2, [r3, #0]
 80025b6:	1d7b      	adds	r3, r7, #5
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	409a      	lsls	r2, r3
 80025bc:	0013      	movs	r3, r2
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	1d3a      	adds	r2, r7, #4
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b2db      	uxtb	r3, r3
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b003      	add	sp, #12
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	0004      	movs	r4, r0
 80025d8:	0008      	movs	r0, r1
 80025da:	0011      	movs	r1, r2
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	1c22      	adds	r2, r4, #0
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	1d7b      	adds	r3, r7, #5
 80025e4:	1c02      	adds	r2, r0, #0
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	1c0a      	adds	r2, r1, #0
 80025ec:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80025ee:	1dbb      	adds	r3, r7, #6
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	1d7b      	adds	r3, r7, #5
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	411a      	asrs	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	1d3a      	adds	r2, r7, #4
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	4013      	ands	r3, r2
 8002602:	b2db      	uxtb	r3, r3
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b003      	add	sp, #12
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <can1_ivt_improved_status_pack>:

int can1_ivt_improved_status_pack(
    uint8_t *dst_p,
    const struct can1_ivt_improved_status_t *src_p,
    size_t size)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
    uint16_t ivt_current;

    if (size < 8u) {
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b07      	cmp	r3, #7
 800261c:	d802      	bhi.n	8002624 <can1_ivt_improved_status_pack+0x18>
        return (-EINVAL);
 800261e:	2316      	movs	r3, #22
 8002620:	425b      	negs	r3, r3
 8002622:	e092      	b.n	800274a <can1_ivt_improved_status_pack+0x13e>
    }

    memset(&dst_p[0], 0, 8);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2208      	movs	r2, #8
 8002628:	2100      	movs	r1, #0
 800262a:	0018      	movs	r0, r3
 800262c:	f003 fd8e 	bl	800614c <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->ivt_voltage_battery, 0u, 0xffu);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	2100      	movs	r1, #0
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff ffab 	bl	8002594 <pack_left_shift_u16>
 800263e:	0003      	movs	r3, r0
 8002640:	001a      	movs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->ivt_voltage_battery, 8u, 0xffu);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	2108      	movs	r1, #8
 8002656:	0018      	movs	r0, r3
 8002658:	f7ff ffba 	bl	80025d0 <pack_right_shift_u16>
 800265c:	0003      	movs	r3, r0
 800265e:	0019      	movs	r1, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3301      	adds	r3, #1
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3301      	adds	r3, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->ivt_voltage_vehicle, 0u, 0xffu);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	885b      	ldrh	r3, [r3, #2]
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	2100      	movs	r1, #0
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff ff8b 	bl	8002594 <pack_left_shift_u16>
 800267e:	0003      	movs	r3, r0
 8002680:	0019      	movs	r1, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3302      	adds	r3, #2
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3302      	adds	r3, #2
 800268c:	430a      	orrs	r2, r1
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->ivt_voltage_vehicle, 8u, 0xffu);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	885b      	ldrh	r3, [r3, #2]
 8002696:	22ff      	movs	r2, #255	; 0xff
 8002698:	2108      	movs	r1, #8
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff ff98 	bl	80025d0 <pack_right_shift_u16>
 80026a0:	0003      	movs	r3, r0
 80026a2:	0019      	movs	r1, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3303      	adds	r3, #3
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3303      	adds	r3, #3
 80026ae:	430a      	orrs	r2, r1
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
    ivt_current = (uint16_t)src_p->ivt_current;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2204      	movs	r2, #4
 80026b8:	5e9a      	ldrsh	r2, [r3, r2]
 80026ba:	2416      	movs	r4, #22
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	801a      	strh	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(ivt_current, 0u, 0xffu);
 80026c0:	193b      	adds	r3, r7, r4
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	22ff      	movs	r2, #255	; 0xff
 80026c6:	2100      	movs	r1, #0
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ff63 	bl	8002594 <pack_left_shift_u16>
 80026ce:	0003      	movs	r3, r0
 80026d0:	0019      	movs	r1, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3304      	adds	r3, #4
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3304      	adds	r3, #4
 80026dc:	430a      	orrs	r2, r1
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(ivt_current, 8u, 0xffu);
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	2108      	movs	r1, #8
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff ff70 	bl	80025d0 <pack_right_shift_u16>
 80026f0:	0003      	movs	r3, r0
 80026f2:	0019      	movs	r1, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3305      	adds	r3, #5
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3305      	adds	r3, #5
 80026fe:	430a      	orrs	r2, r1
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u8(src_p->temp_h_vplus, 0u, 0xffu);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	799b      	ldrb	r3, [r3, #6]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	2100      	movs	r1, #0
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ff23 	bl	8002558 <pack_left_shift_u8>
 8002712:	0003      	movs	r3, r0
 8002714:	0019      	movs	r1, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3306      	adds	r3, #6
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3306      	adds	r3, #6
 8002720:	430a      	orrs	r2, r1
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_left_shift_u8(src_p->temp_h_vminus, 0u, 0xffu);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	79db      	ldrb	r3, [r3, #7]
 800272a:	22ff      	movs	r2, #255	; 0xff
 800272c:	2100      	movs	r1, #0
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff ff12 	bl	8002558 <pack_left_shift_u8>
 8002734:	0003      	movs	r3, r0
 8002736:	0019      	movs	r1, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3307      	adds	r3, #7
 800273c:	781a      	ldrb	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3307      	adds	r3, #7
 8002742:	430a      	orrs	r2, r1
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]

    return (8);
 8002748:	2308      	movs	r3, #8
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b007      	add	sp, #28
 8002750:	bd90      	pop	{r4, r7, pc}

08002752 <can1_ivt_improved_status_ivt_voltage_battery_encode>:

    return (0);
}

uint16_t can1_ivt_improved_status_ivt_voltage_battery_encode(double value)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6038      	str	r0, [r7, #0]
 800275a:	6079      	str	r1, [r7, #4]
    return (uint16_t)(value);
 800275c:	6838      	ldr	r0, [r7, #0]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f7fd fe8e 	bl	8000480 <__aeabi_d2uiz>
 8002764:	0003      	movs	r3, r0
 8002766:	b29b      	uxth	r3, r3
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <can1_ivt_improved_status_ivt_voltage_vehicle_encode>:
{
    return (value <= 600u);
}

uint16_t can1_ivt_improved_status_ivt_voltage_vehicle_encode(double value)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6038      	str	r0, [r7, #0]
 8002778:	6079      	str	r1, [r7, #4]
    return (uint16_t)(value);
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	f7fd fe7f 	bl	8000480 <__aeabi_d2uiz>
 8002782:	0003      	movs	r3, r0
 8002784:	b29b      	uxth	r3, r3
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}

0800278e <can1_ivt_improved_status_ivt_current_encode>:
{
    return (value <= 600u);
}

int16_t can1_ivt_improved_status_ivt_current_encode(double value)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6038      	str	r0, [r7, #0]
 8002796:	6079      	str	r1, [r7, #4]
    return (int16_t)(value);
 8002798:	6838      	ldr	r0, [r7, #0]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f7ff fdea 	bl	8002374 <__aeabi_d2iz>
 80027a0:	0003      	movs	r3, r0
 80027a2:	b21b      	sxth	r3, r3
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <can1_ivt_improved_status_temp_h_vplus_encode>:
{
    return ((value >= -50) && (value <= 200));
}

uint8_t can1_ivt_improved_status_temp_h_vplus_encode(double value)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6038      	str	r0, [r7, #0]
 80027b4:	6079      	str	r1, [r7, #4]
    return (uint8_t)(value);
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	f7fd fe61 	bl	8000480 <__aeabi_d2uiz>
 80027be:	0003      	movs	r3, r0
 80027c0:	b2db      	uxtb	r3, r3
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b002      	add	sp, #8
 80027c8:	bd80      	pop	{r7, pc}

080027ca <can1_ivt_improved_status_temp_h_vminus_encode>:

    return (true);
}

uint8_t can1_ivt_improved_status_temp_h_vminus_encode(double value)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6038      	str	r0, [r7, #0]
 80027d2:	6079      	str	r1, [r7, #4]
    return (uint8_t)(value);
 80027d4:	6838      	ldr	r0, [r7, #0]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f7fd fe52 	bl	8000480 <__aeabi_d2uiz>
 80027dc:	0003      	movs	r3, r0
 80027de:	b2db      	uxtb	r3, r3
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ee:	f000 fea1 	bl	8003534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027f2:	f000 f8bd 	bl	8002970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f6:	f000 fa3b 	bl	8002c70 <MX_GPIO_Init>
  MX_DMA_Init();
 80027fa:	f000 fa1b 	bl	8002c34 <MX_DMA_Init>
  MX_ADC_Init();
 80027fe:	f000 f8fd 	bl	80029fc <MX_ADC_Init>
  MX_CAN_Init();
 8002802:	f000 f98b 	bl	8002b1c <MX_CAN_Init>
  MX_TIM3_Init();
 8002806:	f000 f9bf 	bl	8002b88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 800280a:	4b4b      	ldr	r3, [pc, #300]	; (8002938 <main+0x150>)
 800280c:	0018      	movs	r0, r3
 800280e:	f001 fca7 	bl	8004160 <HAL_CAN_Start>
  HAL_CAN_WakeUp(&hcan);
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <main+0x150>)
 8002814:	0018      	movs	r0, r3
 8002816:	f001 fce9 	bl	80041ec <HAL_CAN_WakeUp>

  // set isolator pin to high permanently
  HAL_GPIO_WritePin(isolator_enable_GPIO_Port, isolator_enable_Pin, GPIO_PIN_SET);
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	019b      	lsls	r3, r3, #6
 800281e:	4847      	ldr	r0, [pc, #284]	; (800293c <main+0x154>)
 8002820:	2201      	movs	r2, #1
 8002822:	0019      	movs	r1, r3
 8002824:	f002 fa06 	bl	8004c34 <HAL_GPIO_WritePin>
  // Calibrate the ADC
  ADC_status = HAL_ADCEx_Calibration_Start(&hadc);
 8002828:	4b45      	ldr	r3, [pc, #276]	; (8002940 <main+0x158>)
 800282a:	0018      	movs	r0, r3
 800282c:	f001 faf2 	bl	8003e14 <HAL_ADCEx_Calibration_Start>
 8002830:	0003      	movs	r3, r0
 8002832:	001a      	movs	r2, r3
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <main+0x15c>)
 8002836:	701a      	strb	r2, [r3, #0]
  if (ADC_status == HAL_ERROR)
 8002838:	4b42      	ldr	r3, [pc, #264]	; (8002944 <main+0x15c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <main+0x5c>
	  Error_Handler();
 8002840:	f000 fc46 	bl	80030d0 <Error_Handler>
	while (1) {


		/* Only for checking on the development board */
		/* REPLACE WITH ACTUAL LEDS for PCB */
		HAL_GPIO_TogglePin(MCU_STATUS_LED_3_GREEN_GPIO_Port, MCU_STATUS_LED_3_GREEN_Pin);
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <main+0x154>)
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	0018      	movs	r0, r3
 800284a:	f002 fa10 	bl	8004c6e <HAL_GPIO_TogglePin>

		/* Initialise flags on loop */
		ADC_interrupt_flag = 0;
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <main+0x160>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
		timeout = 1;
 8002854:	4b3d      	ldr	r3, [pc, #244]	; (800294c <main+0x164>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

		// Take ADC values using the DMA
		HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_read_value_raw, (uint16_t)ADC_N);
 800285a:	493d      	ldr	r1, [pc, #244]	; (8002950 <main+0x168>)
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <main+0x158>)
 800285e:	2205      	movs	r2, #5
 8002860:	0018      	movs	r0, r3
 8002862:	f001 f82f 	bl	80038c4 <HAL_ADC_Start_DMA>
		for (int i = 0; i < ((timeout_time / 10) - 1); i++) {
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	e033      	b.n	80028d4 <main+0xec>
			if (ADC_interrupt_flag == 1) {
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <main+0x160>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d129      	bne.n	80028c8 <main+0xe0>

				timeout = 0;
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <main+0x164>)
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]

				//Check current reading, store in current_I
				current_measure();
 800287a:	f000 fa6b 	bl	8002d54 <current_measure>
				//Check voltage readings, store in vBat_V and vVehicle_V
				voltage_measure();
 800287e:	f000 facd 	bl	8002e1c <voltage_measure>
				// Take thermistor readings
				tTherm1_C = ADC_to_Temperature(ADC_read_value_raw[ADC_therm1_N]);
 8002882:	4b33      	ldr	r3, [pc, #204]	; (8002950 <main+0x168>)
 8002884:	885b      	ldrh	r3, [r3, #2]
 8002886:	b29b      	uxth	r3, r3
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff fdd9 	bl	8002440 <__aeabi_ui2d>
 800288e:	0002      	movs	r2, r0
 8002890:	000b      	movs	r3, r1
 8002892:	0010      	movs	r0, r2
 8002894:	0019      	movs	r1, r3
 8002896:	f000 fb1d 	bl	8002ed4 <ADC_to_Temperature>
 800289a:	0002      	movs	r2, r0
 800289c:	000b      	movs	r3, r1
 800289e:	492d      	ldr	r1, [pc, #180]	; (8002954 <main+0x16c>)
 80028a0:	600a      	str	r2, [r1, #0]
 80028a2:	604b      	str	r3, [r1, #4]
				tTherm2_C = ADC_to_Temperature(ADC_read_value_raw[ADC_therm2_N]);
 80028a4:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <main+0x168>)
 80028a6:	889b      	ldrh	r3, [r3, #4]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7ff fdc8 	bl	8002440 <__aeabi_ui2d>
 80028b0:	0002      	movs	r2, r0
 80028b2:	000b      	movs	r3, r1
 80028b4:	0010      	movs	r0, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	f000 fb0c 	bl	8002ed4 <ADC_to_Temperature>
 80028bc:	0002      	movs	r2, r0
 80028be:	000b      	movs	r3, r1
 80028c0:	4925      	ldr	r1, [pc, #148]	; (8002958 <main+0x170>)
 80028c2:	600a      	str	r2, [r1, #0]
 80028c4:	604b      	str	r3, [r1, #4]

				break;
 80028c6:	e010      	b.n	80028ea <main+0x102>
			}
			HAL_Delay(50);
 80028c8:	2032      	movs	r0, #50	; 0x32
 80028ca:	f000 fe97 	bl	80035fc <HAL_Delay>
		for (int i = 0; i < ((timeout_time / 10) - 1); i++) {
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3301      	adds	r3, #1
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <main+0x174>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	210a      	movs	r1, #10
 80028da:	0018      	movs	r0, r3
 80028dc:	f7fd fca6 	bl	800022c <__divsi3>
 80028e0:	0003      	movs	r3, r0
 80028e2:	3b01      	subs	r3, #1
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	dbc0      	blt.n	800286c <main+0x84>
		}
		CAN_send_status(); // bypass the timer
 80028ea:	f000 fb6d 	bl	8002fc8 <CAN_send_status>
		//Send data and status on CAN
		if (SEND_ON_CAN == 1)
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <main+0x178>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10c      	bne.n	8002910 <main+0x128>
		{
			HAL_TIM_Base_Stop_IT(&htim3); // stop timer once it is complete
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <main+0x17c>)
 80028f8:	0018      	movs	r0, r3
 80028fa:	f002 ff47 	bl	800578c <HAL_TIM_Base_Stop_IT>
			CAN_send_status(); //pack data and send on CAN
 80028fe:	f000 fb63 	bl	8002fc8 <CAN_send_status>
			SEND_ON_CAN = 0;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <main+0x178>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3); // start timer again
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <main+0x17c>)
 800290a:	0018      	movs	r0, r3
 800290c:	f002 feec 	bl	80056e8 <HAL_TIM_Base_Start_IT>
		}

		//If we haven't received values from ADC trough DMA -> timeout error
		if (timeout) {
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <main+0x164>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <main+0x136>
			error = ADC_timeout;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <main+0x180>)
 800291a:	2207      	movs	r2, #7
 800291c:	701a      	strb	r2, [r3, #0]
		}

		//Check if we have an error, if yes go to error handler
		if (error) {
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <main+0x180>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <main+0x142>
			Error_Handler();
 8002926:	f000 fbd3 	bl	80030d0 <Error_Handler>
		}
		HAL_Delay(period);
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <main+0x184>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fe64 	bl	80035fc <HAL_Delay>
		HAL_GPIO_TogglePin(MCU_STATUS_LED_3_GREEN_GPIO_Port, MCU_STATUS_LED_3_GREEN_Pin);
 8002934:	e786      	b.n	8002844 <main+0x5c>
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	20000128 	.word	0x20000128
 800293c:	48000400 	.word	0x48000400
 8002940:	200000a4 	.word	0x200000a4
 8002944:	200001e0 	.word	0x200001e0
 8002948:	200001ac 	.word	0x200001ac
 800294c:	200001b0 	.word	0x200001b0
 8002950:	200001a0 	.word	0x200001a0
 8002954:	200001d0 	.word	0x200001d0
 8002958:	200001d8 	.word	0x200001d8
 800295c:	20000004 	.word	0x20000004
 8002960:	20000198 	.word	0x20000198
 8002964:	20000150 	.word	0x20000150
 8002968:	2000019c 	.word	0x2000019c
 800296c:	20000000 	.word	0x20000000

08002970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b093      	sub	sp, #76	; 0x4c
 8002974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002976:	2414      	movs	r4, #20
 8002978:	193b      	adds	r3, r7, r4
 800297a:	0018      	movs	r0, r3
 800297c:	2334      	movs	r3, #52	; 0x34
 800297e:	001a      	movs	r2, r3
 8002980:	2100      	movs	r1, #0
 8002982:	f003 fbe3 	bl	800614c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	0018      	movs	r0, r3
 800298a:	2310      	movs	r3, #16
 800298c:	001a      	movs	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f003 fbdc 	bl	800614c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002994:	0021      	movs	r1, r4
 8002996:	187b      	adds	r3, r7, r1
 8002998:	2212      	movs	r2, #18
 800299a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800299c:	187b      	adds	r3, r7, r1
 800299e:	2201      	movs	r2, #1
 80029a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2201      	movs	r2, #1
 80029a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2210      	movs	r2, #16
 80029ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2210      	movs	r2, #16
 80029b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	0018      	movs	r0, r3
 80029be:	f002 f971 	bl	8004ca4 <HAL_RCC_OscConfig>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80029c6:	f000 fb83 	bl	80030d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	2207      	movs	r2, #7
 80029ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	2200      	movs	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	2100      	movs	r1, #0
 80029e6:	0018      	movs	r0, r3
 80029e8:	f002 fce2 	bl	80053b0 <HAL_RCC_ClockConfig>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80029f0:	f000 fb6e 	bl	80030d0 <Error_Handler>
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b013      	add	sp, #76	; 0x4c
 80029fa:	bd90      	pop	{r4, r7, pc}

080029fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	0018      	movs	r0, r3
 8002a06:	230c      	movs	r3, #12
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f003 fb9e 	bl	800614c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002a10:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a12:	4a41      	ldr	r2, [pc, #260]	; (8002b18 <MX_ADC_Init+0x11c>)
 8002a14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a22:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002a28:	4b3a      	ldr	r3, [pc, #232]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a30:	2204      	movs	r2, #4
 8002a32:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002a34:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002a46:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a4e:	22c2      	movs	r2, #194	; 0xc2
 8002a50:	32ff      	adds	r2, #255	; 0xff
 8002a52:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a5c:	2224      	movs	r2, #36	; 0x24
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a62:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 fdea 	bl	8003644 <HAL_ADC_Init>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d001      	beq.n	8002a78 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002a74:	f000 fb2c 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	0152      	lsls	r2, r2, #5
 8002a84:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	0552      	lsls	r2, r2, #21
 8002a8c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002a8e:	1d3a      	adds	r2, r7, #4
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <MX_ADC_Init+0x118>)
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 ffa7 	bl	80039e8 <HAL_ADC_ConfigChannel>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002a9e:	f000 fb17 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002aa8:	1d3a      	adds	r2, r7, #4
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_ADC_Init+0x118>)
 8002aac:	0011      	movs	r1, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 ff9a 	bl	80039e8 <HAL_ADC_ConfigChannel>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002ab8:	f000 fb0a 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2203      	movs	r2, #3
 8002ac0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ac2:	1d3a      	adds	r2, r7, #4
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <MX_ADC_Init+0x118>)
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 ff8d 	bl	80039e8 <HAL_ADC_ConfigChannel>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8002ad2:	f000 fafd 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	2206      	movs	r2, #6
 8002ada:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002adc:	1d3a      	adds	r2, r7, #4
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <MX_ADC_Init+0x118>)
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 ff80 	bl	80039e8 <HAL_ADC_ConfigChannel>
 8002ae8:	1e03      	subs	r3, r0, #0
 8002aea:	d001      	beq.n	8002af0 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8002aec:	f000 faf0 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2207      	movs	r2, #7
 8002af4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002af6:	1d3a      	adds	r2, r7, #4
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <MX_ADC_Init+0x118>)
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f000 ff73 	bl	80039e8 <HAL_ADC_ConfigChannel>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d001      	beq.n	8002b0a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8002b06:	f000 fae3 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	200000a4 	.word	0x200000a4
 8002b18:	40012400 	.word	0x40012400

08002b1c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <MX_CAN_Init+0x68>)
 8002b24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b3a:	22a0      	movs	r2, #160	; 0xa0
 8002b3c:	02d2      	lsls	r2, r2, #11
 8002b3e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <MX_CAN_Init+0x64>)
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f001 f9f9 	bl	8003f64 <HAL_CAN_Init>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d001      	beq.n	8002b7a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002b76:	f000 faab 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000128 	.word	0x20000128
 8002b84:	40006400 	.word	0x40006400

08002b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8e:	2308      	movs	r3, #8
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	0018      	movs	r0, r3
 8002b94:	2310      	movs	r3, #16
 8002b96:	001a      	movs	r2, r3
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f003 fad7 	bl	800614c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9e:	003b      	movs	r3, r7
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	f003 fad0 	bl	800614c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bac:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <MX_TIM3_Init+0xa4>)
 8002bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16;
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <MX_TIM3_Init+0xa8>)
 8002bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f002 fd38 	bl	8005648 <HAL_TIM_Base_Init>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002bdc:	f000 fa78 	bl	80030d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be0:	2108      	movs	r1, #8
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	0152      	lsls	r2, r2, #5
 8002be8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bea:	187a      	adds	r2, r7, r1
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002bee:	0011      	movs	r1, r2
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f002 ff0f 	bl	8005a14 <HAL_TIM_ConfigClockSource>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002bfa:	f000 fa69 	bl	80030d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfe:	003b      	movs	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c04:	003b      	movs	r3, r7
 8002c06:	2200      	movs	r2, #0
 8002c08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c0a:	003a      	movs	r2, r7
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <MX_TIM3_Init+0xa0>)
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f003 f90d 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002c1a:	f000 fa59 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b006      	add	sp, #24
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	20000150 	.word	0x20000150
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	0000c34f 	.word	0x0000c34f

08002c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_DMA_Init+0x38>)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_DMA_Init+0x38>)
 8002c40:	2101      	movs	r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_DMA_Init+0x38>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2009      	movs	r0, #9
 8002c58:	f001 fc8c 	bl	8004574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8002c5c:	2009      	movs	r0, #9
 8002c5e:	f001 fc9e 	bl	800459e <HAL_NVIC_EnableIRQ>

}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b002      	add	sp, #8
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	40021000 	.word	0x40021000

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	240c      	movs	r4, #12
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	2314      	movs	r3, #20
 8002c7e:	001a      	movs	r2, r3
 8002c80:	2100      	movs	r1, #0
 8002c82:	f003 fa63 	bl	800614c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b29      	ldr	r3, [pc, #164]	; (8002d2c <MX_GPIO_Init+0xbc>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	4b28      	ldr	r3, [pc, #160]	; (8002d2c <MX_GPIO_Init+0xbc>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0289      	lsls	r1, r1, #10
 8002c90:	430a      	orrs	r2, r1
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <MX_GPIO_Init+0xbc>)
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	029b      	lsls	r3, r3, #10
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <MX_GPIO_Init+0xbc>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <MX_GPIO_Init+0xbc>)
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	02c9      	lsls	r1, r1, #11
 8002cac:	430a      	orrs	r2, r1
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <MX_GPIO_Init+0xbc>)
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	02db      	lsls	r3, r3, #11
 8002cb8:	4013      	ands	r3, r2
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_LD2_GPIO_Port, LED_LD2_Pin, GPIO_PIN_RESET);
 8002cbe:	2390      	movs	r3, #144	; 0x90
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f001 ffb4 	bl	8004c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, isolator_enable_Pin|MCU_STATUS_LED_1_RED_Pin|MCU_STATUS_LED_2_YLW_Pin|MCU_STATUS_LED_3_GREEN_Pin, GPIO_PIN_RESET);
 8002ccc:	4918      	ldr	r1, [pc, #96]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_GPIO_Init+0xc4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f001 ffae 	bl	8004c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_LD2_Pin */
  GPIO_InitStruct.Pin = LED_LD2_Pin;
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	2220      	movs	r2, #32
 8002cdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2200      	movs	r2, #0
 8002cee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_LD2_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	193a      	adds	r2, r7, r4
 8002cf2:	2390      	movs	r3, #144	; 0x90
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f001 fe23 	bl	8004944 <HAL_GPIO_Init>

  /*Configure GPIO pins : isolator_enable_Pin MCU_STATUS_LED_1_RED_Pin MCU_STATUS_LED_2_YLW_Pin MCU_STATUS_LED_3_GREEN_Pin */
  GPIO_InitStruct.Pin = isolator_enable_Pin|MCU_STATUS_LED_1_RED_Pin|MCU_STATUS_LED_2_YLW_Pin|MCU_STATUS_LED_3_GREEN_Pin;
 8002cfe:	0021      	movs	r1, r4
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <MX_GPIO_Init+0xc0>)
 8002d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2201      	movs	r2, #1
 8002d0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <MX_GPIO_Init+0xc4>)
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	0010      	movs	r0, r2
 8002d20:	f001 fe10 	bl	8004944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b009      	add	sp, #36	; 0x24
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	00002070 	.word	0x00002070
 8002d34:	48000400 	.word	0x48000400

08002d38 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	ADC_interrupt_flag = 1;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_ADC_ConvCpltCallback+0x18>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	200001ac 	.word	0x200001ac

08002d54 <current_measure>:

void current_measure(void) {
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	// Need a lot of characterisation to make this at all accurate
	current_I = (100*sensMeas_V - 248.2 + 8.78)/0.63; //Amps (8.78 is an offset to keep it at roughly 0A when it should be 0)
	// TODO: Should add some sort of averaging here, need to improve accuracy somehow of current measurement
	current_CAN = (uint8_t) current_I;
	*/
	current_I = -9.706 * pow(10,-10) * pow(ADC_read_value_raw[ADC_curr_N],3) + 1.431*pow(10,-5) * pow(ADC_read_value_raw[ADC_curr_N],2) + 0.09581 * ADC_read_value_raw[ADC_curr_N] - 262.3;
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <current_measure+0x9c>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff fb6e 	bl	8002440 <__aeabi_ui2d>
 8002d64:	2200      	movs	r2, #0
 8002d66:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <current_measure+0xa0>)
 8002d68:	f004 f8a8 	bl	8006ebc <pow>
 8002d6c:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <current_measure+0xa4>)
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <current_measure+0xa8>)
 8002d70:	f7fe fc9e 	bl	80016b0 <__aeabi_dmul>
 8002d74:	0002      	movs	r2, r0
 8002d76:	000b      	movs	r3, r1
 8002d78:	0014      	movs	r4, r2
 8002d7a:	001d      	movs	r5, r3
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <current_measure+0x9c>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff fb5c 	bl	8002440 <__aeabi_ui2d>
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	05db      	lsls	r3, r3, #23
 8002d8e:	f004 f895 	bl	8006ebc <pow>
 8002d92:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <current_measure+0xac>)
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <current_measure+0xb0>)
 8002d96:	f7fe fc8b 	bl	80016b0 <__aeabi_dmul>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	0020      	movs	r0, r4
 8002da0:	0029      	movs	r1, r5
 8002da2:	f7fd fd2b 	bl	80007fc <__aeabi_dadd>
 8002da6:	0002      	movs	r2, r0
 8002da8:	000b      	movs	r3, r1
 8002daa:	0014      	movs	r4, r2
 8002dac:	001d      	movs	r5, r3
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <current_measure+0x9c>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff fb13 	bl	80023e0 <__aeabi_i2d>
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <current_measure+0xb4>)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <current_measure+0xb8>)
 8002dbe:	f7fe fc77 	bl	80016b0 <__aeabi_dmul>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	000b      	movs	r3, r1
 8002dc6:	0020      	movs	r0, r4
 8002dc8:	0029      	movs	r1, r5
 8002dca:	f7fd fd17 	bl	80007fc <__aeabi_dadd>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	0010      	movs	r0, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <current_measure+0xbc>)
 8002dd8:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <current_measure+0xc0>)
 8002dda:	f7fe ff2b 	bl	8001c34 <__aeabi_dsub>
 8002dde:	0002      	movs	r2, r0
 8002de0:	000b      	movs	r3, r1
 8002de2:	490d      	ldr	r1, [pc, #52]	; (8002e18 <current_measure+0xc4>)
 8002de4:	600a      	str	r2, [r1, #0]
 8002de6:	604b      	str	r3, [r1, #4]
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bdb0      	pop	{r4, r5, r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	200001a0 	.word	0x200001a0
 8002df4:	40080000 	.word	0x40080000
 8002df8:	7317c51c 	.word	0x7317c51c
 8002dfc:	be10acbe 	.word	0xbe10acbe
 8002e00:	6c9757f7 	.word	0x6c9757f7
 8002e04:	3eee029f 	.word	0x3eee029f
 8002e08:	10a137f4 	.word	0x10a137f4
 8002e0c:	3fb88701 	.word	0x3fb88701
 8002e10:	cccccccd 	.word	0xcccccccd
 8002e14:	407064cc 	.word	0x407064cc
 8002e18:	200001b8 	.word	0x200001b8

08002e1c <voltage_measure>:

void voltage_measure(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
	double ADCBat_V, ADCVehicle_V;
	ADCBat_V = (ADC_reference_voltage * ADC_read_value_raw[ADC_voltBat_N]) / 4095.0; // Range: [0, 3.3V]
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <voltage_measure+0xa0>)
 8002e24:	88db      	ldrh	r3, [r3, #6]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fd fc95 	bl	8000758 <__aeabi_i2f>
 8002e2e:	1c02      	adds	r2, r0, #0
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <voltage_measure+0xa4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c19      	adds	r1, r3, #0
 8002e36:	1c10      	adds	r0, r2, #0
 8002e38:	f7fd fb40 	bl	80004bc <__aeabi_fmul>
 8002e3c:	1c03      	adds	r3, r0, #0
 8002e3e:	1c18      	adds	r0, r3, #0
 8002e40:	f7ff fb24 	bl	800248c <__aeabi_f2d>
 8002e44:	2200      	movs	r2, #0
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <voltage_measure+0xa8>)
 8002e48:	f7fe f838 	bl	8000ebc <__aeabi_ddiv>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	000b      	movs	r3, r1
 8002e50:	60ba      	str	r2, [r7, #8]
 8002e52:	60fb      	str	r3, [r7, #12]
	ADCVehicle_V = (ADC_reference_voltage * ADC_read_value_raw[ADC_voltVehicle_N]) / 4095.0; // Range: [0, 3.3V]
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <voltage_measure+0xa0>)
 8002e56:	891b      	ldrh	r3, [r3, #8]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7fd fc7c 	bl	8000758 <__aeabi_i2f>
 8002e60:	1c02      	adds	r2, r0, #0
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <voltage_measure+0xa4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1c19      	adds	r1, r3, #0
 8002e68:	1c10      	adds	r0, r2, #0
 8002e6a:	f7fd fb27 	bl	80004bc <__aeabi_fmul>
 8002e6e:	1c03      	adds	r3, r0, #0
 8002e70:	1c18      	adds	r0, r3, #0
 8002e72:	f7ff fb0b 	bl	800248c <__aeabi_f2d>
 8002e76:	2200      	movs	r2, #0
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <voltage_measure+0xa8>)
 8002e7a:	f7fe f81f 	bl	8000ebc <__aeabi_ddiv>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	000b      	movs	r3, r1
 8002e82:	603a      	str	r2, [r7, #0]
 8002e84:	607b      	str	r3, [r7, #4]

	/* Reverse the voltage division to get actual voltage value */
	/* division: (2Meg + 2Meg + 2Meg + 1Meg + 300k + (120k || 120k || 120k)) / (120k || 120k || 120k) */
	vBat_V = (734/4)*ADCBat_V;
 8002e86:	2200      	movs	r2, #0
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <voltage_measure+0xac>)
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	f7fe fc0f 	bl	80016b0 <__aeabi_dmul>
 8002e92:	0002      	movs	r2, r0
 8002e94:	000b      	movs	r3, r1
 8002e96:	490d      	ldr	r1, [pc, #52]	; (8002ecc <voltage_measure+0xb0>)
 8002e98:	600a      	str	r2, [r1, #0]
 8002e9a:	604b      	str	r3, [r1, #4]
	vVehicle_V = (734/4)*ADCVehicle_V;
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <voltage_measure+0xac>)
 8002ea0:	6838      	ldr	r0, [r7, #0]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	f7fe fc04 	bl	80016b0 <__aeabi_dmul>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	000b      	movs	r3, r1
 8002eac:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <voltage_measure+0xb4>)
 8002eae:	600a      	str	r2, [r1, #0]
 8002eb0:	604b      	str	r3, [r1, #4]
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	200001a0 	.word	0x200001a0
 8002ec0:	20000008 	.word	0x20000008
 8002ec4:	40affe00 	.word	0x40affe00
 8002ec8:	4066e000 	.word	0x4066e000
 8002ecc:	200001c0 	.word	0x200001c0
 8002ed0:	200001c8 	.word	0x200001c8

08002ed4 <ADC_to_Temperature>:
 The code defines a function "ADC_to_Temperature" that calculates the temperature in degrees Celsius
 based on an ADC value, using the Steinhart-Hart equation and specific parameters such as the
 Beta value, reference temperature, and nominal resistance of a thermistor. The function takes
 the ADC value as input, performs the calculation, and returns the corresponding temperature.
 */
double ADC_to_Temperature(double ADC_value) {	//TODO: calibrate
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60b8      	str	r0, [r7, #8]
 8002edc:	60f9      	str	r1, [r7, #12]
	double beta = 3500;
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <ADC_to_Temperature+0xdc>)
 8002ee2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	double temp = 25 + 273.15;
 8002ee6:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <ADC_to_Temperature+0xe0>)
 8002ee8:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <ADC_to_Temperature+0xe4>)
 8002eea:	623a      	str	r2, [r7, #32]
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
	double R0 = 10000 * exp(-beta / temp);
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	001c      	movs	r4, r3
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	0612      	lsls	r2, r2, #24
 8002ef8:	405a      	eors	r2, r3
 8002efa:	0015      	movs	r5, r2
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	0020      	movs	r0, r4
 8002f02:	0029      	movs	r1, r5
 8002f04:	f7fd ffda 	bl	8000ebc <__aeabi_ddiv>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	000b      	movs	r3, r1
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	f003 ff66 	bl	8006de0 <exp>
 8002f14:	2200      	movs	r2, #0
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <ADC_to_Temperature+0xe8>)
 8002f18:	f7fe fbca 	bl	80016b0 <__aeabi_dmul>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	000b      	movs	r3, r1
 8002f20:	61ba      	str	r2, [r7, #24]
 8002f22:	61fb      	str	r3, [r7, #28]
	double R = 10000;
 8002f24:	2200      	movs	r2, #0
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <ADC_to_Temperature+0xe8>)
 8002f28:	613a      	str	r2, [r7, #16]
 8002f2a:	617b      	str	r3, [r7, #20]
	return beta / (log(R * ADC_value ) - log(-R0 * (ADC_value - 4095))) - 273.15;
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	6979      	ldr	r1, [r7, #20]
 8002f34:	f7fe fbbc 	bl	80016b0 <__aeabi_dmul>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	f003 ff86 	bl	8006e50 <log>
 8002f44:	0004      	movs	r4, r0
 8002f46:	000d      	movs	r5, r1
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2280      	movs	r2, #128	; 0x80
 8002f50:	0612      	lsls	r2, r2, #24
 8002f52:	405a      	eors	r2, r3
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <ADC_to_Temperature+0xec>)
 8002f5a:	68b8      	ldr	r0, [r7, #8]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	f7fe fe69 	bl	8001c34 <__aeabi_dsub>
 8002f62:	0002      	movs	r2, r0
 8002f64:	000b      	movs	r3, r1
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	f7fe fba1 	bl	80016b0 <__aeabi_dmul>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	000b      	movs	r3, r1
 8002f72:	0010      	movs	r0, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	f003 ff6b 	bl	8006e50 <log>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	000b      	movs	r3, r1
 8002f7e:	0020      	movs	r0, r4
 8002f80:	0029      	movs	r1, r5
 8002f82:	f7fe fe57 	bl	8001c34 <__aeabi_dsub>
 8002f86:	0002      	movs	r2, r0
 8002f88:	000b      	movs	r3, r1
 8002f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f8e:	f7fd ff95 	bl	8000ebc <__aeabi_ddiv>
 8002f92:	0002      	movs	r2, r0
 8002f94:	000b      	movs	r3, r1
 8002f96:	0010      	movs	r0, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <ADC_to_Temperature+0xe0>)
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <ADC_to_Temperature+0xf0>)
 8002f9e:	f7fe fe49 	bl	8001c34 <__aeabi_dsub>
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	000b      	movs	r3, r1
}
 8002fa6:	0010      	movs	r0, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b00c      	add	sp, #48	; 0x30
 8002fae:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb0:	40ab5800 	.word	0x40ab5800
 8002fb4:	66666666 	.word	0x66666666
 8002fb8:	4072a266 	.word	0x4072a266
 8002fbc:	40c38800 	.word	0x40c38800
 8002fc0:	40affe00 	.word	0x40affe00
 8002fc4:	40711266 	.word	0x40711266

08002fc8 <CAN_send_status>:

void CAN_send_status(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	ivt_improved_status.ivt_current = can1_ivt_improved_status_ivt_current_encode(current_I);
 8002fcc:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <CAN_send_status+0xb8>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	0010      	movs	r0, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	f7ff fbda 	bl	800278e <can1_ivt_improved_status_ivt_current_encode>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	001a      	movs	r2, r3
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <CAN_send_status+0xbc>)
 8002fe0:	809a      	strh	r2, [r3, #4]
	ivt_improved_status.ivt_voltage_battery = can1_ivt_improved_status_ivt_voltage_battery_encode(vBat_V);
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <CAN_send_status+0xc0>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0010      	movs	r0, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	f7ff fbb1 	bl	8002752 <can1_ivt_improved_status_ivt_voltage_battery_encode>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <CAN_send_status+0xbc>)
 8002ff6:	801a      	strh	r2, [r3, #0]
	ivt_improved_status.ivt_voltage_vehicle = can1_ivt_improved_status_ivt_voltage_vehicle_encode(vVehicle_V);
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <CAN_send_status+0xc4>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	0010      	movs	r0, r2
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff fbb5 	bl	8002770 <can1_ivt_improved_status_ivt_voltage_vehicle_encode>
 8003006:	0003      	movs	r3, r0
 8003008:	001a      	movs	r2, r3
 800300a:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <CAN_send_status+0xbc>)
 800300c:	805a      	strh	r2, [r3, #2]
	ivt_improved_status.temp_h_vplus = can1_ivt_improved_status_temp_h_vplus_encode(tTherm1_C);
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <CAN_send_status+0xc8>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	0010      	movs	r0, r2
 8003016:	0019      	movs	r1, r3
 8003018:	f7ff fbc8 	bl	80027ac <can1_ivt_improved_status_temp_h_vplus_encode>
 800301c:	0003      	movs	r3, r0
 800301e:	001a      	movs	r2, r3
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <CAN_send_status+0xbc>)
 8003022:	719a      	strb	r2, [r3, #6]
	ivt_improved_status.temp_h_vminus = can1_ivt_improved_status_temp_h_vminus_encode(tTherm2_C);
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <CAN_send_status+0xcc>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	0010      	movs	r0, r2
 800302c:	0019      	movs	r1, r3
 800302e:	f7ff fbcc 	bl	80027ca <can1_ivt_improved_status_temp_h_vminus_encode>
 8003032:	0003      	movs	r3, r0
 8003034:	001a      	movs	r2, r3
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <CAN_send_status+0xbc>)
 8003038:	71da      	strb	r2, [r3, #7]

	// TODO : fix mapping of voltage signals so that they can be signed
	pTxHeader.DLC = CAN1_IVT_IMPROVED_STATUS_LENGTH;
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <CAN_send_status+0xd0>)
 800303c:	2208      	movs	r2, #8
 800303e:	611a      	str	r2, [r3, #16]
	pTxHeader.IDE = CAN_ID_STD;
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <CAN_send_status+0xd0>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
	pTxHeader.StdId = CAN1_IVT_IMPROVED_STATUS_FRAME_ID;
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <CAN_send_status+0xd0>)
 8003048:	221d      	movs	r2, #29
 800304a:	601a      	str	r2, [r3, #0]
	pTxHeader.RTR = CAN_RTR_DATA;
 800304c:	4b12      	ldr	r3, [pc, #72]	; (8003098 <CAN_send_status+0xd0>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
	pTxHeader.TransmitGlobalTime = DISABLE;
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <CAN_send_status+0xd0>)
 8003054:	2200      	movs	r2, #0
 8003056:	751a      	strb	r2, [r3, #20]

	can1_ivt_improved_status_pack(TxData, &ivt_improved_status, CAN1_IVT_IMPROVED_STATUS_LENGTH);
 8003058:	490a      	ldr	r1, [pc, #40]	; (8003084 <CAN_send_status+0xbc>)
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <CAN_send_status+0xd4>)
 800305c:	2208      	movs	r2, #8
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff fad4 	bl	800260c <can1_ivt_improved_status_pack>
	if (HAL_CAN_AddTxMessage(&hcan, &pTxHeader, TxData, &TxMailbox) != HAL_OK) {
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <CAN_send_status+0xd8>)
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <CAN_send_status+0xd4>)
 8003068:	490b      	ldr	r1, [pc, #44]	; (8003098 <CAN_send_status+0xd0>)
 800306a:	480e      	ldr	r0, [pc, #56]	; (80030a4 <CAN_send_status+0xdc>)
 800306c:	f001 f904 	bl	8004278 <HAL_CAN_AddTxMessage>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d001      	beq.n	8003078 <CAN_send_status+0xb0>
		Error_Handler();
 8003074:	f000 f82c 	bl	80030d0 <Error_Handler>

	}
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	200001b8 	.word	0x200001b8
 8003084:	20000208 	.word	0x20000208
 8003088:	200001c0 	.word	0x200001c0
 800308c:	200001c8 	.word	0x200001c8
 8003090:	200001d0 	.word	0x200001d0
 8003094:	200001d8 	.word	0x200001d8
 8003098:	200001e4 	.word	0x200001e4
 800309c:	200001fc 	.word	0x200001fc
 80030a0:	20000204 	.word	0x20000204
 80030a4:	20000128 	.word	0x20000128

080030a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and send on CAN if it's tim3.
  if (htim == &htim3 )
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d102      	bne.n	80030be <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    SEND_ON_CAN = 1;
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

  }
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000150 	.word	0x20000150
 80030cc:	20000198 	.word	0x20000198

080030d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	// Send error information on CAN
	while (1) {
		HAL_GPIO_WritePin(MCU_STATUS_LED_2_YLW_GPIO_Port,
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <Error_Handler+0x28>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	2120      	movs	r1, #32
 80030da:	0018      	movs	r0, r3
 80030dc:	f001 fdaa 	bl	8004c34 <HAL_GPIO_WritePin>
				MCU_STATUS_LED_2_YLW_Pin, 1);
		if (ADC_status == HAL_ERROR)
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <Error_Handler+0x2c>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d103      	bne.n	80030f0 <Error_Handler+0x20>
			printf("ADC Error");
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <Error_Handler+0x30>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f002 ffd2 	bl	8006094 <iprintf>
		HAL_Delay(100);
 80030f0:	2064      	movs	r0, #100	; 0x64
 80030f2:	f000 fa83 	bl	80035fc <HAL_Delay>
		HAL_GPIO_WritePin(MCU_STATUS_LED_2_YLW_GPIO_Port,
 80030f6:	e7ed      	b.n	80030d4 <Error_Handler+0x4>
 80030f8:	48000400 	.word	0x48000400
 80030fc:	200001e0 	.word	0x200001e0
 8003100:	08008330 	.word	0x08008330

08003104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_MspInit+0x44>)
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_MspInit+0x44>)
 8003110:	2101      	movs	r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_MspInit+0x44>)
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_MspInit+0x44>)
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_MspInit+0x44>)
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	0549      	lsls	r1, r1, #21
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
 8003130:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_MspInit+0x44>)
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	055b      	lsls	r3, r3, #21
 8003138:	4013      	ands	r3, r2
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b08b      	sub	sp, #44	; 0x2c
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	2414      	movs	r4, #20
 8003156:	193b      	adds	r3, r7, r4
 8003158:	0018      	movs	r0, r3
 800315a:	2314      	movs	r3, #20
 800315c:	001a      	movs	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f002 fff4 	bl	800614c <memset>
  if(hadc->Instance==ADC1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a35      	ldr	r2, [pc, #212]	; (8003240 <HAL_ADC_MspInit+0xf4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d164      	bne.n	8003238 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <HAL_ADC_MspInit+0xf8>)
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_ADC_MspInit+0xf8>)
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	0089      	lsls	r1, r1, #2
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
 800317c:	4b31      	ldr	r3, [pc, #196]	; (8003244 <HAL_ADC_MspInit+0xf8>)
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_ADC_MspInit+0xf8>)
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_ADC_MspInit+0xf8>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0289      	lsls	r1, r1, #10
 8003194:	430a      	orrs	r2, r1
 8003196:	615a      	str	r2, [r3, #20]
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_ADC_MspInit+0xf8>)
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	029b      	lsls	r3, r3, #10
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA3     ------> ADC_IN3
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = currentMeasure_v_Pin|thermistor_1_Pin|thermistor_2_Pin|GPIO_PIN_6
 80031a6:	193b      	adds	r3, r7, r4
 80031a8:	22cb      	movs	r2, #203	; 0xcb
 80031aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	2203      	movs	r2, #3
 80031b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	193a      	adds	r2, r7, r4
 80031ba:	2390      	movs	r3, #144	; 0x90
 80031bc:	05db      	lsls	r3, r3, #23
 80031be:	0011      	movs	r1, r2
 80031c0:	0018      	movs	r0, r3
 80031c2:	f001 fbbf 	bl	8004944 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031c8:	4a20      	ldr	r2, [pc, #128]	; (800324c <HAL_ADC_MspInit+0x100>)
 80031ca:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031cc:	4b1e      	ldr	r3, [pc, #120]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	00d2      	lsls	r2, r2, #3
 80031ec:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80031f4:	4b14      	ldr	r3, [pc, #80]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031f6:	2280      	movs	r2, #128	; 0x80
 80031f8:	0192      	lsls	r2, r2, #6
 80031fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 f9ea 	bl	80045d8 <HAL_DMA_Init>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003208:	f7ff ff62 	bl	80030d0 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800320c:	4a10      	ldr	r2, [pc, #64]	; (8003250 <HAL_ADC_MspInit+0x104>)
 800320e:	23a8      	movs	r3, #168	; 0xa8
 8003210:	58d3      	ldr	r3, [r2, r3]
 8003212:	490f      	ldr	r1, [pc, #60]	; (8003250 <HAL_ADC_MspInit+0x104>)
 8003214:	220f      	movs	r2, #15
 8003216:	4393      	bics	r3, r2
 8003218:	22a8      	movs	r2, #168	; 0xa8
 800321a:	508b      	str	r3, [r1, r2]
 800321c:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <HAL_ADC_MspInit+0x104>)
 800321e:	23a8      	movs	r3, #168	; 0xa8
 8003220:	58d3      	ldr	r3, [r2, r3]
 8003222:	490b      	ldr	r1, [pc, #44]	; (8003250 <HAL_ADC_MspInit+0x104>)
 8003224:	2201      	movs	r2, #1
 8003226:	4313      	orrs	r3, r2
 8003228:	22a8      	movs	r2, #168	; 0xa8
 800322a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_ADC_MspInit+0xfc>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b00b      	add	sp, #44	; 0x2c
 800323e:	bd90      	pop	{r4, r7, pc}
 8003240:	40012400 	.word	0x40012400
 8003244:	40021000 	.word	0x40021000
 8003248:	200000e4 	.word	0x200000e4
 800324c:	40020008 	.word	0x40020008
 8003250:	40020000 	.word	0x40020000

08003254 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b08b      	sub	sp, #44	; 0x2c
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	2414      	movs	r4, #20
 800325e:	193b      	adds	r3, r7, r4
 8003260:	0018      	movs	r0, r3
 8003262:	2314      	movs	r3, #20
 8003264:	001a      	movs	r2, r3
 8003266:	2100      	movs	r1, #0
 8003268:	f002 ff70 	bl	800614c <memset>
  if(hcan->Instance==CAN)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_CAN_MspInit+0x94>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d133      	bne.n	80032de <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_CAN_MspInit+0x98>)
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_CAN_MspInit+0x98>)
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	0489      	lsls	r1, r1, #18
 8003280:	430a      	orrs	r2, r1
 8003282:	61da      	str	r2, [r3, #28]
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_CAN_MspInit+0x98>)
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	049b      	lsls	r3, r3, #18
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_CAN_MspInit+0x98>)
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_CAN_MspInit+0x98>)
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0289      	lsls	r1, r1, #10
 800329c:	430a      	orrs	r2, r1
 800329e:	615a      	str	r2, [r3, #20]
 80032a0:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_CAN_MspInit+0x98>)
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	029b      	lsls	r3, r3, #10
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	22c0      	movs	r2, #192	; 0xc0
 80032b2:	0152      	lsls	r2, r2, #5
 80032b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	0021      	movs	r1, r4
 80032b8:	187b      	adds	r3, r7, r1
 80032ba:	2202      	movs	r2, #2
 80032bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c4:	187b      	adds	r3, r7, r1
 80032c6:	2203      	movs	r2, #3
 80032c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80032ca:	187b      	adds	r3, r7, r1
 80032cc:	2204      	movs	r2, #4
 80032ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	187a      	adds	r2, r7, r1
 80032d2:	2390      	movs	r3, #144	; 0x90
 80032d4:	05db      	lsls	r3, r3, #23
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 fb33 	bl	8004944 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b00b      	add	sp, #44	; 0x2c
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40006400 	.word	0x40006400
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_TIM_Base_MspInit+0x44>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d113      	bne.n	800332a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_TIM_Base_MspInit+0x48>)
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <HAL_TIM_Base_MspInit+0x48>)
 8003308:	2102      	movs	r1, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_TIM_Base_MspInit+0x48>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2010      	movs	r0, #16
 8003320:	f001 f928 	bl	8004574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003324:	2010      	movs	r0, #16
 8003326:	f001 f93a 	bl	800459e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b004      	add	sp, #16
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40000400 	.word	0x40000400
 8003338:	40021000 	.word	0x40021000

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <NMI_Handler+0x4>

08003342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <HardFault_Handler+0x4>

08003348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003360:	f000 f930 	bl	80035c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <DMA1_Ch1_IRQHandler+0x14>)
 8003372:	0018      	movs	r0, r3
 8003374:	f001 f9de 	bl	8004734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	200000e4 	.word	0x200000e4

08003384 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <TIM3_IRQHandler+0x14>)
 800338a:	0018      	movs	r0, r3
 800338c:	f002 fa2c 	bl	80057e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	20000150 	.word	0x20000150

0800339c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	e00a      	b.n	80033c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033ae:	e000      	b.n	80033b2 <_read+0x16>
 80033b0:	bf00      	nop
 80033b2:	0001      	movs	r1, r0
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	60ba      	str	r2, [r7, #8]
 80033ba:	b2ca      	uxtb	r2, r1
 80033bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	dbf0      	blt.n	80033ae <_read+0x12>
  }

  return len;
 80033cc:	687b      	ldr	r3, [r7, #4]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b006      	add	sp, #24
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e009      	b.n	80033fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	60ba      	str	r2, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	0018      	movs	r0, r3
 80033f2:	e000      	b.n	80033f6 <_write+0x20>
 80033f4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3301      	adds	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	dbf1      	blt.n	80033e8 <_write+0x12>
  }
  return len;
 8003404:	687b      	ldr	r3, [r7, #4]
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b006      	add	sp, #24
 800340c:	bd80      	pop	{r7, pc}

0800340e <_close>:

int _close(int file)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003416:	2301      	movs	r3, #1
 8003418:	425b      	negs	r3, r3
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}

08003422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0192      	lsls	r2, r2, #6
 8003432:	605a      	str	r2, [r3, #4]
  return 0;
 8003434:	2300      	movs	r3, #0
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b002      	add	sp, #8
 800343c:	bd80      	pop	{r7, pc}

0800343e <_isatty>:

int _isatty(int file)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003446:	2301      	movs	r3, #1
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b002      	add	sp, #8
 800344e:	bd80      	pop	{r7, pc}

08003450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <_sbrk+0x5c>)
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <_sbrk+0x60>)
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <_sbrk+0x64>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <_sbrk+0x64>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <_sbrk+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <_sbrk+0x64>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	18d3      	adds	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d207      	bcs.n	80034a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003498:	f002 feae 	bl	80061f8 <__errno>
 800349c:	0003      	movs	r3, r0
 800349e:	220c      	movs	r2, #12
 80034a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	425b      	negs	r3, r3
 80034a6:	e009      	b.n	80034bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <_sbrk+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <_sbrk+0x64>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	18d2      	adds	r2, r2, r3
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <_sbrk+0x64>)
 80034b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80034ba:	68fb      	ldr	r3, [r7, #12]
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b006      	add	sp, #24
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20008000 	.word	0x20008000
 80034c8:	00000400 	.word	0x00000400
 80034cc:	20000210 	.word	0x20000210
 80034d0:	20000368 	.word	0x20000368

080034d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034e0:	480d      	ldr	r0, [pc, #52]	; (8003518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034e4:	f7ff fff6 	bl	80034d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e8:	480c      	ldr	r0, [pc, #48]	; (800351c <LoopForever+0x6>)
  ldr r1, =_edata
 80034ea:	490d      	ldr	r1, [pc, #52]	; (8003520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034ec:	4a0d      	ldr	r2, [pc, #52]	; (8003524 <LoopForever+0xe>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034f0:	e002      	b.n	80034f8 <LoopCopyDataInit>

080034f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034f6:	3304      	adds	r3, #4

080034f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034fc:	d3f9      	bcc.n	80034f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003500:	4c0a      	ldr	r4, [pc, #40]	; (800352c <LoopForever+0x16>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003504:	e001      	b.n	800350a <LoopFillZerobss>

08003506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003508:	3204      	adds	r2, #4

0800350a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800350a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800350c:	d3fb      	bcc.n	8003506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800350e:	f002 fe79 	bl	8006204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003512:	f7ff f969 	bl	80027e8 <main>

08003516 <LoopForever>:

LoopForever:
    b LoopForever
 8003516:	e7fe      	b.n	8003516 <LoopForever>
  ldr   r0, =_estack
 8003518:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800351c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003520:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003524:	08008448 	.word	0x08008448
  ldr r2, =_sbss
 8003528:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800352c:	20000364 	.word	0x20000364

08003530 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003530:	e7fe      	b.n	8003530 <ADC1_COMP_IRQHandler>
	...

08003534 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003538:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_Init+0x24>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_Init+0x24>)
 800353e:	2110      	movs	r1, #16
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003544:	2003      	movs	r0, #3
 8003546:	f000 f809 	bl	800355c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800354a:	f7ff fddb 	bl	8003104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	40022000 	.word	0x40022000

0800355c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_InitTick+0x5c>)
 8003566:	681c      	ldr	r4, [r3, #0]
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_InitTick+0x60>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	0019      	movs	r1, r3
 800356e:	23fa      	movs	r3, #250	; 0xfa
 8003570:	0098      	lsls	r0, r3, #2
 8003572:	f7fc fdd1 	bl	8000118 <__udivsi3>
 8003576:	0003      	movs	r3, r0
 8003578:	0019      	movs	r1, r3
 800357a:	0020      	movs	r0, r4
 800357c:	f7fc fdcc 	bl	8000118 <__udivsi3>
 8003580:	0003      	movs	r3, r0
 8003582:	0018      	movs	r0, r3
 8003584:	f001 f81b 	bl	80045be <HAL_SYSTICK_Config>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d001      	beq.n	8003590 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e00f      	b.n	80035b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d80b      	bhi.n	80035ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	2301      	movs	r3, #1
 800359a:	425b      	negs	r3, r3
 800359c:	2200      	movs	r2, #0
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 ffe8 	bl	8004574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_InitTick+0x64>)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b003      	add	sp, #12
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	20000014 	.word	0x20000014
 80035c0:	20000010 	.word	0x20000010

080035c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_IncTick+0x1c>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	001a      	movs	r2, r3
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_IncTick+0x20>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	18d2      	adds	r2, r2, r3
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_IncTick+0x20>)
 80035d6:	601a      	str	r2, [r3, #0]
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	20000014 	.word	0x20000014
 80035e4:	20000214 	.word	0x20000214

080035e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  return uwTick;
 80035ec:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <HAL_GetTick+0x10>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000214 	.word	0x20000214

080035fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff fff0 	bl	80035e8 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3301      	adds	r3, #1
 8003614:	d005      	beq.n	8003622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_Delay+0x44>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	001a      	movs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	189b      	adds	r3, r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	f7ff ffe0 	bl	80035e8 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d8f7      	bhi.n	8003624 <HAL_Delay+0x28>
  {
  }
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	20000014 	.word	0x20000014

08003644 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364c:	230f      	movs	r3, #15
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e125      	b.n	80038ae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2234      	movs	r2, #52	; 0x34
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0018      	movs	r0, r3
 800367c:	f7ff fd66 	bl	800314c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	2210      	movs	r2, #16
 8003686:	4013      	ands	r3, r2
 8003688:	d000      	beq.n	800368c <HAL_ADC_Init+0x48>
 800368a:	e103      	b.n	8003894 <HAL_ADC_Init+0x250>
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d000      	beq.n	8003698 <HAL_ADC_Init+0x54>
 8003696:	e0fd      	b.n	8003894 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2204      	movs	r2, #4
 80036a0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80036a2:	d000      	beq.n	80036a6 <HAL_ADC_Init+0x62>
 80036a4:	e0f6      	b.n	8003894 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	4a83      	ldr	r2, [pc, #524]	; (80038b8 <HAL_ADC_Init+0x274>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	2202      	movs	r2, #2
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2203      	movs	r2, #3
 80036be:	4013      	ands	r3, r2
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d112      	bne.n	80036ea <HAL_ADC_Init+0xa6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2201      	movs	r2, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d009      	beq.n	80036e6 <HAL_ADC_Init+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	401a      	ands	r2, r3
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Init+0xa6>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_ADC_Init+0xa8>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2218      	movs	r2, #24
 80036f8:	4393      	bics	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	0899      	lsrs	r1, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4964      	ldr	r1, [pc, #400]	; (80038bc <HAL_ADC_Init+0x278>)
 800372a:	400a      	ands	r2, r1
 800372c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7e1b      	ldrb	r3, [r3, #24]
 8003732:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7e5b      	ldrb	r3, [r3, #25]
 8003738:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800373a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7e9b      	ldrb	r3, [r3, #26]
 8003740:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003742:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	2b01      	cmp	r3, #1
 800374a:	d002      	beq.n	8003752 <HAL_ADC_Init+0x10e>
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	015b      	lsls	r3, r3, #5
 8003750:	e000      	b.n	8003754 <HAL_ADC_Init+0x110>
 8003752:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003754:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800375a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d101      	bne.n	8003768 <HAL_ADC_Init+0x124>
 8003764:	2304      	movs	r3, #4
 8003766:	e000      	b.n	800376a <HAL_ADC_Init+0x126>
 8003768:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800376a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2124      	movs	r1, #36	; 0x24
 8003770:	5c5b      	ldrb	r3, [r3, r1]
 8003772:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003774:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7edb      	ldrb	r3, [r3, #27]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d115      	bne.n	80037b0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	7e9b      	ldrb	r3, [r3, #26]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	0252      	lsls	r2, r2, #9
 8003792:	4313      	orrs	r3, r2
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	e00b      	b.n	80037b0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	2220      	movs	r2, #32
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2201      	movs	r2, #1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	23c2      	movs	r3, #194	; 0xc2
 80037b6:	33ff      	adds	r3, #255	; 0xff
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d007      	beq.n	80037cc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80037c4:	4313      	orrs	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	430a      	orrs	r2, r1
 80037da:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	055b      	lsls	r3, r3, #21
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d01b      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d017      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d013      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d00f      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2b04      	cmp	r3, #4
 8003806:	d00b      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	2b05      	cmp	r3, #5
 800380e:	d007      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b06      	cmp	r3, #6
 8003816:	d003      	beq.n	8003820 <HAL_ADC_Init+0x1dc>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b07      	cmp	r3, #7
 800381e:	d112      	bne.n	8003846 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2107      	movs	r1, #7
 800382c:	438a      	bics	r2, r1
 800382e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	2207      	movs	r2, #7
 800383c:	401a      	ands	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_ADC_Init+0x27c>)
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d10b      	bne.n	800386e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	2203      	movs	r2, #3
 8003862:	4393      	bics	r3, r2
 8003864:	2201      	movs	r2, #1
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800386c:	e01c      	b.n	80038a8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	2212      	movs	r2, #18
 8003874:	4393      	bics	r3, r2
 8003876:	2210      	movs	r2, #16
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	2201      	movs	r2, #1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800388a:	230f      	movs	r3, #15
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003892:	e009      	b.n	80038a8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	2210      	movs	r2, #16
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038a8:	230f      	movs	r3, #15
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	781b      	ldrb	r3, [r3, #0]
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	fffffefd 	.word	0xfffffefd
 80038bc:	fffe0219 	.word	0xfffe0219
 80038c0:	833fffe7 	.word	0x833fffe7

080038c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038d0:	2317      	movs	r3, #23
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2204      	movs	r2, #4
 80038e0:	4013      	ands	r3, r2
 80038e2:	d15e      	bne.n	80039a2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2234      	movs	r2, #52	; 0x34
 80038e8:	5c9b      	ldrb	r3, [r3, r2]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_Start_DMA+0x2e>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e05e      	b.n	80039b0 <HAL_ADC_Start_DMA+0xec>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2234      	movs	r2, #52	; 0x34
 80038f6:	2101      	movs	r1, #1
 80038f8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	7e5b      	ldrb	r3, [r3, #25]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d007      	beq.n	8003912 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003902:	2317      	movs	r3, #23
 8003904:	18fc      	adds	r4, r7, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	0018      	movs	r0, r3
 800390a:	f000 f97b 	bl	8003c04 <ADC_Enable>
 800390e:	0003      	movs	r3, r0
 8003910:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003912:	2317      	movs	r3, #23
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d146      	bne.n	80039aa <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <HAL_ADC_Start_DMA+0xf4>)
 8003922:	4013      	ands	r3, r2
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	0052      	lsls	r2, r2, #1
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2234      	movs	r2, #52	; 0x34
 8003938:	2100      	movs	r1, #0
 800393a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <HAL_ADC_Start_DMA+0xf8>)
 8003942:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_ADC_Start_DMA+0xfc>)
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_ADC_Start_DMA+0x100>)
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	221c      	movs	r2, #28
 800395a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2110      	movs	r1, #16
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3340      	adds	r3, #64	; 0x40
 8003986:	0019      	movs	r1, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f000 fe6c 	bl	8004668 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2104      	movs	r1, #4
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	e003      	b.n	80039aa <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039a2:	2317      	movs	r3, #23
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2202      	movs	r2, #2
 80039a8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80039aa:	2317      	movs	r3, #23
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b007      	add	sp, #28
 80039b6:	bd90      	pop	{r4, r7, pc}
 80039b8:	fffff0fe 	.word	0xfffff0fe
 80039bc:	08003d0d 	.word	0x08003d0d
 80039c0:	08003dc1 	.word	0x08003dc1
 80039c4:	08003ddf 	.word	0x08003ddf

080039c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f2:	230f      	movs	r3, #15
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	055b      	lsls	r3, r3, #21
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d011      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d00d      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d009      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d005      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d001      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x46>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2234      	movs	r2, #52	; 0x34
 8003a32:	5c9b      	ldrb	r3, [r3, r2]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x54>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0d0      	b.n	8003bde <HAL_ADC_ConfigChannel+0x1f6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2234      	movs	r2, #52	; 0x34
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d000      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x6a>
 8003a50:	e0b4      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4a64      	ldr	r2, [pc, #400]	; (8003be8 <HAL_ADC_ConfigChannel+0x200>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x76>
 8003a5c:	e082      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	055b      	lsls	r3, r3, #21
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d037      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d033      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d02f      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d02b      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d027      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d023      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d01f      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	d01b      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2107      	movs	r1, #7
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d012      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	438a      	bics	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6959      	ldr	r1, [r3, #20]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d007      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x120>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b11      	cmp	r3, #17
 8003afe:	d003      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x120>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	d163      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b08:	4b38      	ldr	r3, [pc, #224]	; (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d009      	beq.n	8003b28 <HAL_ADC_ConfigChannel+0x140>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b11      	cmp	r3, #17
 8003b1a:	d102      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x13a>
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	03db      	lsls	r3, r3, #15
 8003b20:	e004      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x144>
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	045b      	lsls	r3, r3, #17
 8003b26:	e001      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x144>
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d14a      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_ADC_ConfigChannel+0x208>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <HAL_ADC_ConfigChannel+0x20c>)
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fc fae9 	bl	8000118 <__udivsi3>
 8003b46:	0003      	movs	r3, r0
 8003b48:	001a      	movs	r2, r3
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b54:	e002      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f9      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x16e>
 8003b62:	e035      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4099      	lsls	r1, r3
 8003b72:	000b      	movs	r3, r1
 8003b74:	43d9      	mvns	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d007      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x1ae>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b11      	cmp	r3, #17
 8003b8c:	d003      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x1ae>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b12      	cmp	r3, #18
 8003b94:	d11c      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d007      	beq.n	8003bb2 <HAL_ADC_ConfigChannel+0x1ca>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b11      	cmp	r3, #17
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x1c6>
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_ADC_ConfigChannel+0x210>)
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_ADC_ConfigChannel+0x214>)
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_ADC_ConfigChannel+0x218>)
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <HAL_ADC_ConfigChannel+0x204>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e009      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2234      	movs	r2, #52	; 0x34
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b004      	add	sp, #16
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	00001001 	.word	0x00001001
 8003bec:	40012708 	.word	0x40012708
 8003bf0:	2000000c 	.word	0x2000000c
 8003bf4:	000f4240 	.word	0x000f4240
 8003bf8:	ffbfffff 	.word	0xffbfffff
 8003bfc:	feffffff 	.word	0xfeffffff
 8003c00:	ff7fffff 	.word	0xff7fffff

08003c04 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d112      	bne.n	8003c48 <ADC_Enable+0x44>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d009      	beq.n	8003c44 <ADC_Enable+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d101      	bne.n	8003c48 <ADC_Enable+0x44>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <ADC_Enable+0x46>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d152      	bne.n	8003cf4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <ADC_Enable+0xfc>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00d      	beq.n	8003c76 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	2210      	movs	r2, #16
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e03f      	b.n	8003cf6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c86:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <ADC_Enable+0x100>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	491f      	ldr	r1, [pc, #124]	; (8003d08 <ADC_Enable+0x104>)
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7fc fa43 	bl	8000118 <__udivsi3>
 8003c92:	0003      	movs	r3, r0
 8003c94:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c96:	e002      	b.n	8003c9e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f9      	bne.n	8003c98 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ca4:	f7ff fca0 	bl	80035e8 <HAL_GetTick>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cac:	e01b      	b.n	8003ce6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cae:	f7ff fc9b 	bl	80035e8 <HAL_GetTick>
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d914      	bls.n	8003ce6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d00d      	beq.n	8003ce6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	2210      	movs	r2, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e007      	b.n	8003cf6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2201      	movs	r2, #1
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d1dc      	bne.n	8003cae <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	80000017 	.word	0x80000017
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	000f4240 	.word	0x000f4240

08003d0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	2250      	movs	r2, #80	; 0x50
 8003d20:	4013      	ands	r3, r2
 8003d22:	d140      	bne.n	8003da6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	2280      	movs	r2, #128	; 0x80
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	23c0      	movs	r3, #192	; 0xc0
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d12d      	bne.n	8003d9c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d129      	bne.n	8003d9c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2208      	movs	r2, #8
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d122      	bne.n	8003d9c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d110      	bne.n	8003d84 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	210c      	movs	r1, #12
 8003d6e:	438a      	bics	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	4a11      	ldr	r2, [pc, #68]	; (8003dbc <ADC_DMAConvCplt+0xb0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
 8003d82:	e00b      	b.n	8003d9c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2220      	movs	r2, #32
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	2201      	movs	r2, #1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7fe ffca 	bl	8002d38 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003da4:	e005      	b.n	8003db2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	0010      	movs	r0, r2
 8003db0:	4798      	blx	r3
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b004      	add	sp, #16
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	fffffefe 	.word	0xfffffefe

08003dc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff fdf9 	bl	80039c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	2240      	movs	r2, #64	; 0x40
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7ff fde6 	bl	80039d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b004      	add	sp, #16
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1c:	2317      	movs	r3, #23
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2234      	movs	r2, #52	; 0x34
 8003e30:	5c9b      	ldrb	r3, [r3, r2]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_ADCEx_Calibration_Start+0x26>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e08d      	b.n	8003f56 <HAL_ADCEx_Calibration_Start+0x142>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2234      	movs	r2, #52	; 0x34
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d112      	bne.n	8003e76 <HAL_ADCEx_Calibration_Start+0x62>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d009      	beq.n	8003e72 <HAL_ADCEx_Calibration_Start+0x5e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	401a      	ands	r2, r3
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d101      	bne.n	8003e76 <HAL_ADCEx_Calibration_Start+0x62>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_ADCEx_Calibration_Start+0x64>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d15b      	bne.n	8003f34 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	4a37      	ldr	r2, [pc, #220]	; (8003f60 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	2202      	movs	r2, #2
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2203      	movs	r2, #3
 8003e94:	4013      	ands	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2103      	movs	r1, #3
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	0609      	lsls	r1, r1, #24
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003eba:	f7ff fb95 	bl	80035e8 <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ec2:	e01d      	b.n	8003f00 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003ec4:	f7ff fb90 	bl	80035e8 <HAL_GetTick>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d916      	bls.n	8003f00 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	0fdb      	lsrs	r3, r3, #31
 8003eda:	07da      	lsls	r2, r3, #31
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d10d      	bne.n	8003f00 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	2212      	movs	r2, #18
 8003eea:	4393      	bics	r3, r2
 8003eec:	2210      	movs	r2, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2234      	movs	r2, #52	; 0x34
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e02a      	b.n	8003f56 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0fdb      	lsrs	r3, r3, #31
 8003f08:	07da      	lsls	r2, r3, #31
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d0d8      	beq.n	8003ec4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68d9      	ldr	r1, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	2203      	movs	r2, #3
 8003f28:	4393      	bics	r3, r2
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
 8003f32:	e009      	b.n	8003f48 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	2220      	movs	r2, #32
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003f40:	2317      	movs	r3, #23
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2234      	movs	r2, #52	; 0x34
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003f50:	2317      	movs	r3, #23
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	781b      	ldrb	r3, [r3, #0]
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b006      	add	sp, #24
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	fffffefd 	.word	0xfffffefd

08003f64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0f0      	b.n	8004158 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff f965 	bl	8003254 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2101      	movs	r1, #1
 8003f96:	430a      	orrs	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f9a:	f7ff fb25 	bl	80035e8 <HAL_GetTick>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003fa2:	e013      	b.n	8003fcc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fa4:	f7ff fb20 	bl	80035e8 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b0a      	cmp	r3, #10
 8003fb0:	d90c      	bls.n	8003fcc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	0292      	lsls	r2, r2, #10
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	2105      	movs	r1, #5
 8003fc6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0c5      	b.n	8004158 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d0e5      	beq.n	8003fa4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe8:	f7ff fafe 	bl	80035e8 <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ff0:	e013      	b.n	800401a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ff2:	f7ff faf9 	bl	80035e8 <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b0a      	cmp	r3, #10
 8003ffe:	d90c      	bls.n	800401a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	0292      	lsls	r2, r2, #10
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	2105      	movs	r1, #5
 8004014:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e09e      	b.n	8004158 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	4013      	ands	r3, r2
 8004024:	d1e5      	bne.n	8003ff2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7e1b      	ldrb	r3, [r3, #24]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d108      	bne.n	8004040 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	438a      	bics	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7e5b      	ldrb	r3, [r3, #25]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d108      	bne.n	800406a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e007      	b.n	800407a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2140      	movs	r1, #64	; 0x40
 8004076:	438a      	bics	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	7e9b      	ldrb	r3, [r3, #26]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d108      	bne.n	8004094 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2120      	movs	r1, #32
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e007      	b.n	80040a4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2120      	movs	r1, #32
 80040a0:	438a      	bics	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	7edb      	ldrb	r3, [r3, #27]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d108      	bne.n	80040be <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2110      	movs	r1, #16
 80040b8:	438a      	bics	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e007      	b.n	80040ce <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2110      	movs	r1, #16
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7f1b      	ldrb	r3, [r3, #28]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d108      	bne.n	80040e8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2108      	movs	r1, #8
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e007      	b.n	80040f8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2108      	movs	r1, #8
 80040f4:	438a      	bics	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7f5b      	ldrb	r3, [r3, #29]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d108      	bne.n	8004112 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2104      	movs	r1, #4
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e007      	b.n	8004122 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2104      	movs	r1, #4
 800411e:	438a      	bics	r2, r1
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	0011      	movs	r1, r2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	1e5a      	subs	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	2101      	movs	r1, #1
 8004154:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b004      	add	sp, #16
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	5c9b      	ldrb	r3, [r3, r2]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	d12f      	bne.n	80041d4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	2102      	movs	r1, #2
 800417a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800418c:	f7ff fa2c 	bl	80035e8 <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004194:	e013      	b.n	80041be <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004196:	f7ff fa27 	bl	80035e8 <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b0a      	cmp	r3, #10
 80041a2:	d90c      	bls.n	80041be <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2280      	movs	r2, #128	; 0x80
 80041aa:	0292      	lsls	r2, r2, #10
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	2105      	movs	r1, #5
 80041b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e012      	b.n	80041e4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	d1e5      	bne.n	8004196 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e007      	b.n	80041e4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2280      	movs	r2, #128	; 0x80
 80041da:	0312      	lsls	r2, r2, #12
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
  }
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b004      	add	sp, #16
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <HAL_CAN_WakeUp+0x88>)
 80041fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041fc:	2013      	movs	r0, #19
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	2120      	movs	r1, #32
 8004204:	5c52      	ldrb	r2, [r2, r1]
 8004206:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8004208:	0002      	movs	r2, r0
 800420a:	18bb      	adds	r3, r7, r2
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d003      	beq.n	800421a <HAL_CAN_WakeUp+0x2e>
 8004212:	18bb      	adds	r3, r7, r2
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d11f      	bne.n	800425a <HAL_CAN_WakeUp+0x6e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2102      	movs	r1, #2
 8004226:	438a      	bics	r2, r1
 8004228:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	429a      	cmp	r2, r3
 8004236:	d208      	bcs.n	800424a <HAL_CAN_WakeUp+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	0292      	lsls	r2, r2, #10
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e00f      	b.n	800426a <HAL_CAN_WakeUp+0x7e>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	4013      	ands	r3, r2
 8004254:	d1e9      	bne.n	800422a <HAL_CAN_WakeUp+0x3e>

    /* Return function status */
    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e007      	b.n	800426a <HAL_CAN_WakeUp+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2280      	movs	r2, #128	; 0x80
 8004260:	02d2      	lsls	r2, r2, #11
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
  }
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b006      	add	sp, #24
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	000f4240 	.word	0x000f4240

08004278 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004286:	201f      	movs	r0, #31
 8004288:	183b      	adds	r3, r7, r0
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	2120      	movs	r1, #32
 800428e:	5c52      	ldrb	r2, [r2, r1]
 8004290:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800429a:	183b      	adds	r3, r7, r0
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d004      	beq.n	80042ac <HAL_CAN_AddTxMessage+0x34>
 80042a2:	183b      	adds	r3, r7, r0
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d000      	beq.n	80042ac <HAL_CAN_AddTxMessage+0x34>
 80042aa:	e0ab      	b.n	8004404 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	04db      	lsls	r3, r3, #19
 80042b2:	4013      	ands	r3, r2
 80042b4:	d10a      	bne.n	80042cc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	051b      	lsls	r3, r3, #20
 80042bc:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042be:	d105      	bne.n	80042cc <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	055b      	lsls	r3, r3, #21
 80042c6:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042c8:	d100      	bne.n	80042cc <HAL_CAN_AddTxMessage+0x54>
 80042ca:	e092      	b.n	80043f2 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	0e1b      	lsrs	r3, r3, #24
 80042d0:	2203      	movs	r2, #3
 80042d2:	4013      	ands	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042d6:	2201      	movs	r2, #1
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	409a      	lsls	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10c      	bne.n	8004302 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4311      	orrs	r1, r2
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	3218      	adds	r2, #24
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	50d1      	str	r1, [r2, r3]
 8004300:	e00f      	b.n	8004322 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800430c:	431a      	orrs	r2, r3
 800430e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8004318:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	3218      	adds	r2, #24
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3318      	adds	r3, #24
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	18cb      	adds	r3, r1, r3
 8004332:	3304      	adds	r3, #4
 8004334:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	7d1b      	ldrb	r3, [r3, #20]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d112      	bne.n	8004364 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3318      	adds	r3, #24
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	3304      	adds	r3, #4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	431a      	orrs	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3318      	adds	r3, #24
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	18cb      	adds	r3, r1, r3
 8004360:	3304      	adds	r3, #4
 8004362:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3307      	adds	r3, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	061a      	lsls	r2, r3, #24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3306      	adds	r3, #6
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3305      	adds	r3, #5
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	0019      	movs	r1, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	23c6      	movs	r3, #198	; 0xc6
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	0109      	lsls	r1, r1, #4
 8004396:	1841      	adds	r1, r0, r1
 8004398:	18cb      	adds	r3, r1, r3
 800439a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3303      	adds	r3, #3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	061a      	lsls	r2, r3, #24
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3302      	adds	r3, #2
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	041b      	lsls	r3, r3, #16
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3301      	adds	r3, #1
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	0019      	movs	r1, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	6979      	ldr	r1, [r7, #20]
 80043c6:	23c4      	movs	r3, #196	; 0xc4
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	0109      	lsls	r1, r1, #4
 80043cc:	1841      	adds	r1, r0, r1
 80043ce:	18cb      	adds	r3, r1, r3
 80043d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	3218      	adds	r2, #24
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	58d2      	ldr	r2, [r2, r3]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2101      	movs	r1, #1
 80043e4:	4311      	orrs	r1, r2
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	3218      	adds	r2, #24
 80043ea:	0112      	lsls	r2, r2, #4
 80043ec:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e010      	b.n	8004414 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	0392      	lsls	r2, r2, #14
 80043fa:	431a      	orrs	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e007      	b.n	8004414 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	2280      	movs	r2, #128	; 0x80
 800440a:	02d2      	lsls	r2, r2, #11
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
  }
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b008      	add	sp, #32
 800441a:	bd80      	pop	{r7, pc}

0800441c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	0002      	movs	r2, r0
 8004424:	1dfb      	adds	r3, r7, #7
 8004426:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b7f      	cmp	r3, #127	; 0x7f
 800442e:	d809      	bhi.n	8004444 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	001a      	movs	r2, r3
 8004436:	231f      	movs	r3, #31
 8004438:	401a      	ands	r2, r3
 800443a:	4b04      	ldr	r3, [pc, #16]	; (800444c <__NVIC_EnableIRQ+0x30>)
 800443c:	2101      	movs	r1, #1
 800443e:	4091      	lsls	r1, r2
 8004440:	000a      	movs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
  }
}
 8004444:	46c0      	nop			; (mov r8, r8)
 8004446:	46bd      	mov	sp, r7
 8004448:	b002      	add	sp, #8
 800444a:	bd80      	pop	{r7, pc}
 800444c:	e000e100 	.word	0xe000e100

08004450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	0002      	movs	r2, r0
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	1dfb      	adds	r3, r7, #7
 800445c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b7f      	cmp	r3, #127	; 0x7f
 8004464:	d828      	bhi.n	80044b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <__NVIC_SetPriority+0xd4>)
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b25b      	sxtb	r3, r3
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	33c0      	adds	r3, #192	; 0xc0
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	589b      	ldr	r3, [r3, r2]
 8004476:	1dfa      	adds	r2, r7, #7
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	0011      	movs	r1, r2
 800447c:	2203      	movs	r2, #3
 800447e:	400a      	ands	r2, r1
 8004480:	00d2      	lsls	r2, r2, #3
 8004482:	21ff      	movs	r1, #255	; 0xff
 8004484:	4091      	lsls	r1, r2
 8004486:	000a      	movs	r2, r1
 8004488:	43d2      	mvns	r2, r2
 800448a:	401a      	ands	r2, r3
 800448c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	22ff      	movs	r2, #255	; 0xff
 8004494:	401a      	ands	r2, r3
 8004496:	1dfb      	adds	r3, r7, #7
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	0018      	movs	r0, r3
 800449c:	2303      	movs	r3, #3
 800449e:	4003      	ands	r3, r0
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044a4:	481f      	ldr	r0, [pc, #124]	; (8004524 <__NVIC_SetPriority+0xd4>)
 80044a6:	1dfb      	adds	r3, r7, #7
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	089b      	lsrs	r3, r3, #2
 80044ae:	430a      	orrs	r2, r1
 80044b0:	33c0      	adds	r3, #192	; 0xc0
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044b6:	e031      	b.n	800451c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <__NVIC_SetPriority+0xd8>)
 80044ba:	1dfb      	adds	r3, r7, #7
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	0019      	movs	r1, r3
 80044c0:	230f      	movs	r3, #15
 80044c2:	400b      	ands	r3, r1
 80044c4:	3b08      	subs	r3, #8
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3306      	adds	r3, #6
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	18d3      	adds	r3, r2, r3
 80044ce:	3304      	adds	r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	1dfa      	adds	r2, r7, #7
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	0011      	movs	r1, r2
 80044d8:	2203      	movs	r2, #3
 80044da:	400a      	ands	r2, r1
 80044dc:	00d2      	lsls	r2, r2, #3
 80044de:	21ff      	movs	r1, #255	; 0xff
 80044e0:	4091      	lsls	r1, r2
 80044e2:	000a      	movs	r2, r1
 80044e4:	43d2      	mvns	r2, r2
 80044e6:	401a      	ands	r2, r3
 80044e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	401a      	ands	r2, r3
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	0018      	movs	r0, r3
 80044f8:	2303      	movs	r3, #3
 80044fa:	4003      	ands	r3, r0
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004500:	4809      	ldr	r0, [pc, #36]	; (8004528 <__NVIC_SetPriority+0xd8>)
 8004502:	1dfb      	adds	r3, r7, #7
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	001c      	movs	r4, r3
 8004508:	230f      	movs	r3, #15
 800450a:	4023      	ands	r3, r4
 800450c:	3b08      	subs	r3, #8
 800450e:	089b      	lsrs	r3, r3, #2
 8004510:	430a      	orrs	r2, r1
 8004512:	3306      	adds	r3, #6
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	18c3      	adds	r3, r0, r3
 8004518:	3304      	adds	r3, #4
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b003      	add	sp, #12
 8004522:	bd90      	pop	{r4, r7, pc}
 8004524:	e000e100 	.word	0xe000e100
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	1e5a      	subs	r2, r3, #1
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	045b      	lsls	r3, r3, #17
 800453c:	429a      	cmp	r2, r3
 800453e:	d301      	bcc.n	8004544 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004540:	2301      	movs	r3, #1
 8004542:	e010      	b.n	8004566 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <SysTick_Config+0x44>)
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	3a01      	subs	r2, #1
 800454a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800454c:	2301      	movs	r3, #1
 800454e:	425b      	negs	r3, r3
 8004550:	2103      	movs	r1, #3
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff ff7c 	bl	8004450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <SysTick_Config+0x44>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <SysTick_Config+0x44>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b002      	add	sp, #8
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	e000e010 	.word	0xe000e010

08004574 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	210f      	movs	r1, #15
 8004580:	187b      	adds	r3, r7, r1
 8004582:	1c02      	adds	r2, r0, #0
 8004584:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	187b      	adds	r3, r7, r1
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b25b      	sxtb	r3, r3
 800458e:	0011      	movs	r1, r2
 8004590:	0018      	movs	r0, r3
 8004592:	f7ff ff5d 	bl	8004450 <__NVIC_SetPriority>
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	0002      	movs	r2, r0
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff ff33 	bl	800441c <__NVIC_EnableIRQ>
}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b002      	add	sp, #8
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff ffaf 	bl	800452c <SysTick_Config>
 80045ce:	0003      	movs	r3, r0
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e036      	b.n	800465c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2221      	movs	r2, #33	; 0x21
 80045f2:	2102      	movs	r1, #2
 80045f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <HAL_DMA_Init+0x8c>)
 8004602:	4013      	ands	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800460e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f946 	bl	80048d0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2221      	movs	r2, #33	; 0x21
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}
 8004664:	ffffc00f 	.word	0xffffc00f

08004668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2317      	movs	r3, #23
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	5c9b      	ldrb	r3, [r3, r2]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_DMA_Start_IT+0x24>
 8004688:	2302      	movs	r3, #2
 800468a:	e04f      	b.n	800472c <HAL_DMA_Start_IT+0xc4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	2101      	movs	r1, #1
 8004692:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2221      	movs	r2, #33	; 0x21
 8004698:	5c9b      	ldrb	r3, [r3, r2]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d13a      	bne.n	8004716 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2221      	movs	r2, #33	; 0x21
 80046a4:	2102      	movs	r1, #2
 80046a6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2101      	movs	r1, #1
 80046ba:	438a      	bics	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f8d7 	bl	8004878 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	210e      	movs	r1, #14
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e00f      	b.n	8004704 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	210a      	movs	r1, #10
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2104      	movs	r1, #4
 8004700:	438a      	bics	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2101      	movs	r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800471e:	2317      	movs	r3, #23
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2202      	movs	r2, #2
 8004724:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004726:	2317      	movs	r3, #23
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	781b      	ldrb	r3, [r3, #0]
}
 800472c:	0018      	movs	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	b006      	add	sp, #24
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2204      	movs	r2, #4
 8004752:	409a      	lsls	r2, r3
 8004754:	0013      	movs	r3, r2
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4013      	ands	r3, r2
 800475a:	d024      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x72>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2204      	movs	r2, #4
 8004760:	4013      	ands	r3, r2
 8004762:	d020      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2220      	movs	r2, #32
 800476c:	4013      	ands	r3, r2
 800476e:	d107      	bne.n	8004780 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2104      	movs	r1, #4
 800477c:	438a      	bics	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	2104      	movs	r1, #4
 800478a:	4091      	lsls	r1, r2
 800478c:	000a      	movs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d100      	bne.n	800479a <HAL_DMA_IRQHandler+0x66>
 8004798:	e06a      	b.n	8004870 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	0010      	movs	r0, r2
 80047a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047a4:	e064      	b.n	8004870 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	2202      	movs	r2, #2
 80047ac:	409a      	lsls	r2, r3
 80047ae:	0013      	movs	r3, r2
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4013      	ands	r3, r2
 80047b4:	d02b      	beq.n	800480e <HAL_DMA_IRQHandler+0xda>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2202      	movs	r2, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2220      	movs	r2, #32
 80047c6:	4013      	ands	r3, r2
 80047c8:	d10b      	bne.n	80047e2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	210a      	movs	r1, #10
 80047d6:	438a      	bics	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2221      	movs	r2, #33	; 0x21
 80047de:	2101      	movs	r1, #1
 80047e0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	2102      	movs	r1, #2
 80047ec:	4091      	lsls	r1, r2
 80047ee:	000a      	movs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	2100      	movs	r1, #0
 80047f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d036      	beq.n	8004870 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	0010      	movs	r0, r2
 800480a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800480c:	e030      	b.n	8004870 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2208      	movs	r2, #8
 8004814:	409a      	lsls	r2, r3
 8004816:	0013      	movs	r3, r2
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4013      	ands	r3, r2
 800481c:	d028      	beq.n	8004870 <HAL_DMA_IRQHandler+0x13c>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2208      	movs	r2, #8
 8004822:	4013      	ands	r3, r2
 8004824:	d024      	beq.n	8004870 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	210e      	movs	r1, #14
 8004832:	438a      	bics	r2, r1
 8004834:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2101      	movs	r1, #1
 8004840:	4091      	lsls	r1, r2
 8004842:	000a      	movs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	0010      	movs	r0, r2
 800486c:	4798      	blx	r3
    }
  }
}
 800486e:	e7ff      	b.n	8004870 <HAL_DMA_IRQHandler+0x13c>
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}

08004878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	2101      	movs	r1, #1
 8004890:	4091      	lsls	r1, r2
 8004892:	000a      	movs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d108      	bne.n	80048b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048b6:	e007      	b.n	80048c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b004      	add	sp, #16
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	001a      	movs	r2, r3
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <DMA_CalcBaseAndBitshift+0x60>)
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d810      	bhi.n	8004906 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a12      	ldr	r2, [pc, #72]	; (8004934 <DMA_CalcBaseAndBitshift+0x64>)
 80048ea:	4694      	mov	ip, r2
 80048ec:	4463      	add	r3, ip
 80048ee:	2114      	movs	r1, #20
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fb fc11 	bl	8000118 <__udivsi3>
 80048f6:	0003      	movs	r3, r0
 80048f8:	009a      	lsls	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <DMA_CalcBaseAndBitshift+0x68>)
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004904:	e00f      	b.n	8004926 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a0c      	ldr	r2, [pc, #48]	; (800493c <DMA_CalcBaseAndBitshift+0x6c>)
 800490c:	4694      	mov	ip, r2
 800490e:	4463      	add	r3, ip
 8004910:	2114      	movs	r1, #20
 8004912:	0018      	movs	r0, r3
 8004914:	f7fb fc00 	bl	8000118 <__udivsi3>
 8004918:	0003      	movs	r3, r0
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a07      	ldr	r2, [pc, #28]	; (8004940 <DMA_CalcBaseAndBitshift+0x70>)
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b002      	add	sp, #8
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	40020407 	.word	0x40020407
 8004934:	bffdfff8 	.word	0xbffdfff8
 8004938:	40020000 	.word	0x40020000
 800493c:	bffdfbf8 	.word	0xbffdfbf8
 8004940:	40020400 	.word	0x40020400

08004944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004952:	e155      	b.n	8004c00 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4091      	lsls	r1, r2
 800495e:	000a      	movs	r2, r1
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d100      	bne.n	800496c <HAL_GPIO_Init+0x28>
 800496a:	e146      	b.n	8004bfa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2203      	movs	r2, #3
 8004972:	4013      	ands	r3, r2
 8004974:	2b01      	cmp	r3, #1
 8004976:	d005      	beq.n	8004984 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2203      	movs	r2, #3
 800497e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004980:	2b02      	cmp	r3, #2
 8004982:	d130      	bne.n	80049e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2203      	movs	r2, #3
 8004990:	409a      	lsls	r2, r3
 8004992:	0013      	movs	r3, r2
 8004994:	43da      	mvns	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4013      	ands	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	0013      	movs	r3, r2
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049ba:	2201      	movs	r2, #1
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	409a      	lsls	r2, r3
 80049c0:	0013      	movs	r3, r2
 80049c2:	43da      	mvns	r2, r3
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4013      	ands	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	2201      	movs	r2, #1
 80049d2:	401a      	ands	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	409a      	lsls	r2, r3
 80049d8:	0013      	movs	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2203      	movs	r2, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d017      	beq.n	8004a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	409a      	lsls	r2, r3
 8004a00:	0013      	movs	r3, r2
 8004a02:	43da      	mvns	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4013      	ands	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	409a      	lsls	r2, r3
 8004a14:	0013      	movs	r3, r2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d123      	bne.n	8004a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	58d3      	ldr	r3, [r2, r3]
 8004a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2207      	movs	r2, #7
 8004a40:	4013      	ands	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	220f      	movs	r2, #15
 8004a46:	409a      	lsls	r2, r3
 8004a48:	0013      	movs	r3, r2
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2107      	movs	r1, #7
 8004a5a:	400b      	ands	r3, r1
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	0013      	movs	r3, r2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	0092      	lsls	r2, r2, #2
 8004a72:	6939      	ldr	r1, [r7, #16]
 8004a74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	409a      	lsls	r2, r3
 8004a84:	0013      	movs	r3, r2
 8004a86:	43da      	mvns	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2203      	movs	r2, #3
 8004a94:	401a      	ands	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	0013      	movs	r3, r2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	23c0      	movs	r3, #192	; 0xc0
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <HAL_GPIO_Init+0x174>
 8004ab6:	e0a0      	b.n	8004bfa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab8:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_GPIO_Init+0x2d4>)
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	4b56      	ldr	r3, [pc, #344]	; (8004c18 <HAL_GPIO_Init+0x2d4>)
 8004abe:	2101      	movs	r1, #1
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	619a      	str	r2, [r3, #24]
 8004ac4:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <HAL_GPIO_Init+0x2d4>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ad0:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_GPIO_Init+0x2d8>)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	589b      	ldr	r3, [r3, r2]
 8004adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	220f      	movs	r2, #15
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	0013      	movs	r3, r2
 8004aec:	43da      	mvns	r2, r3
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4013      	ands	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	2390      	movs	r3, #144	; 0x90
 8004af8:	05db      	lsls	r3, r3, #23
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x1ee>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a47      	ldr	r2, [pc, #284]	; (8004c20 <HAL_GPIO_Init+0x2dc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x1ea>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a46      	ldr	r2, [pc, #280]	; (8004c24 <HAL_GPIO_Init+0x2e0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x1e6>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a45      	ldr	r2, [pc, #276]	; (8004c28 <HAL_GPIO_Init+0x2e4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x1e2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a44      	ldr	r2, [pc, #272]	; (8004c2c <HAL_GPIO_Init+0x2e8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x1de>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e008      	b.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b22:	2305      	movs	r3, #5
 8004b24:	e006      	b.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e004      	b.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e002      	b.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_GPIO_Init+0x1f0>
 8004b32:	2300      	movs	r3, #0
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	2103      	movs	r1, #3
 8004b38:	400a      	ands	r2, r1
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	4093      	lsls	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b44:	4935      	ldr	r1, [pc, #212]	; (8004c1c <HAL_GPIO_Init+0x2d8>)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	035b      	lsls	r3, r3, #13
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004b7c:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	43da      	mvns	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	039b      	lsls	r3, r3, #14
 8004b94:	4013      	ands	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	43da      	mvns	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	029b      	lsls	r3, r3, #10
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	025b      	lsls	r3, r3, #9
 8004be8:	4013      	ands	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_GPIO_Init+0x2ec>)
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	40da      	lsrs	r2, r3
 8004c08:	1e13      	subs	r3, r2, #0
 8004c0a:	d000      	beq.n	8004c0e <HAL_GPIO_Init+0x2ca>
 8004c0c:	e6a2      	b.n	8004954 <HAL_GPIO_Init+0x10>
  } 
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b006      	add	sp, #24
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	48000400 	.word	0x48000400
 8004c24:	48000800 	.word	0x48000800
 8004c28:	48000c00 	.word	0x48000c00
 8004c2c:	48001000 	.word	0x48001000
 8004c30:	40010400 	.word	0x40010400

08004c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	0008      	movs	r0, r1
 8004c3e:	0011      	movs	r1, r2
 8004c40:	1cbb      	adds	r3, r7, #2
 8004c42:	1c02      	adds	r2, r0, #0
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	1c7b      	adds	r3, r7, #1
 8004c48:	1c0a      	adds	r2, r1, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c4c:	1c7b      	adds	r3, r7, #1
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c54:	1cbb      	adds	r3, r7, #2
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c5c:	e003      	b.n	8004c66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c5e:	1cbb      	adds	r3, r7, #2
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b002      	add	sp, #8
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	000a      	movs	r2, r1
 8004c78:	1cbb      	adds	r3, r7, #2
 8004c7a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c82:	1cbb      	adds	r3, r7, #2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	041a      	lsls	r2, r3, #16
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	1cb9      	adds	r1, r7, #2
 8004c92:	8809      	ldrh	r1, [r1, #0]
 8004c94:	400b      	ands	r3, r1
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b004      	add	sp, #16
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f000 fb76 	bl	80053a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d100      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x20>
 8004cc2:	e08e      	b.n	8004de2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004cc4:	4bc5      	ldr	r3, [pc, #788]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	220c      	movs	r2, #12
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d00e      	beq.n	8004cee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cd0:	4bc2      	ldr	r3, [pc, #776]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	220c      	movs	r2, #12
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d117      	bne.n	8004d0c <HAL_RCC_OscConfig+0x68>
 8004cdc:	4bbf      	ldr	r3, [pc, #764]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	23c0      	movs	r3, #192	; 0xc0
 8004ce2:	025b      	lsls	r3, r3, #9
 8004ce4:	401a      	ands	r2, r3
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	025b      	lsls	r3, r3, #9
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d10e      	bne.n	8004d0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cee:	4bbb      	ldr	r3, [pc, #748]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d100      	bne.n	8004cfc <HAL_RCC_OscConfig+0x58>
 8004cfa:	e071      	b.n	8004de0 <HAL_RCC_OscConfig+0x13c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d000      	beq.n	8004d06 <HAL_RCC_OscConfig+0x62>
 8004d04:	e06c      	b.n	8004de0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f000 fb4c 	bl	80053a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x80>
 8004d14:	4bb1      	ldr	r3, [pc, #708]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4bb0      	ldr	r3, [pc, #704]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d1a:	2180      	movs	r1, #128	; 0x80
 8004d1c:	0249      	lsls	r1, r1, #9
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e02f      	b.n	8004d84 <HAL_RCC_OscConfig+0xe0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10c      	bne.n	8004d46 <HAL_RCC_OscConfig+0xa2>
 8004d2c:	4bab      	ldr	r3, [pc, #684]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4baa      	ldr	r3, [pc, #680]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d32:	49ab      	ldr	r1, [pc, #684]	; (8004fe0 <HAL_RCC_OscConfig+0x33c>)
 8004d34:	400a      	ands	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	4ba8      	ldr	r3, [pc, #672]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4ba7      	ldr	r3, [pc, #668]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d3e:	49a9      	ldr	r1, [pc, #676]	; (8004fe4 <HAL_RCC_OscConfig+0x340>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e01e      	b.n	8004d84 <HAL_RCC_OscConfig+0xe0>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d10e      	bne.n	8004d6c <HAL_RCC_OscConfig+0xc8>
 8004d4e:	4ba3      	ldr	r3, [pc, #652]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4ba2      	ldr	r3, [pc, #648]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d54:	2180      	movs	r1, #128	; 0x80
 8004d56:	02c9      	lsls	r1, r1, #11
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	4b9f      	ldr	r3, [pc, #636]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b9e      	ldr	r3, [pc, #632]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	0249      	lsls	r1, r1, #9
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCC_OscConfig+0xe0>
 8004d6c:	4b9b      	ldr	r3, [pc, #620]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4b9a      	ldr	r3, [pc, #616]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d72:	499b      	ldr	r1, [pc, #620]	; (8004fe0 <HAL_RCC_OscConfig+0x33c>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	4b98      	ldr	r3, [pc, #608]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b97      	ldr	r3, [pc, #604]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004d7e:	4999      	ldr	r1, [pc, #612]	; (8004fe4 <HAL_RCC_OscConfig+0x340>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d014      	beq.n	8004db6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fe fc2c 	bl	80035e8 <HAL_GetTick>
 8004d90:	0003      	movs	r3, r0
 8004d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d96:	f7fe fc27 	bl	80035e8 <HAL_GetTick>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b64      	cmp	r3, #100	; 0x64
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e2fd      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da8:	4b8c      	ldr	r3, [pc, #560]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	029b      	lsls	r3, r3, #10
 8004db0:	4013      	ands	r3, r2
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0xf2>
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db6:	f7fe fc17 	bl	80035e8 <HAL_GetTick>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dc0:	f7fe fc12 	bl	80035e8 <HAL_GetTick>
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	; 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e2e8      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd2:	4b82      	ldr	r3, [pc, #520]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x11c>
 8004dde:	e000      	b.n	8004de2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2202      	movs	r2, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d100      	bne.n	8004dee <HAL_RCC_OscConfig+0x14a>
 8004dec:	e06c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004dee:	4b7b      	ldr	r3, [pc, #492]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	220c      	movs	r2, #12
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004df8:	4b78      	ldr	r3, [pc, #480]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	220c      	movs	r2, #12
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d11f      	bne.n	8004e44 <HAL_RCC_OscConfig+0x1a0>
 8004e04:	4b75      	ldr	r3, [pc, #468]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	23c0      	movs	r3, #192	; 0xc0
 8004e0a:	025b      	lsls	r3, r3, #9
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d116      	bne.n	8004e44 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e16:	4b71      	ldr	r3, [pc, #452]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_OscConfig+0x188>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e2bb      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2c:	4b6b      	ldr	r3, [pc, #428]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	22f8      	movs	r2, #248	; 0xf8
 8004e32:	4393      	bics	r3, r2
 8004e34:	0019      	movs	r1, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00da      	lsls	r2, r3, #3
 8004e3c:	4b67      	ldr	r3, [pc, #412]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	e041      	b.n	8004ec8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d024      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e4c:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b62      	ldr	r3, [pc, #392]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e52:	2101      	movs	r1, #1
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7fe fbc6 	bl	80035e8 <HAL_GetTick>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fe fbc1 	bl	80035e8 <HAL_GetTick>
 8004e66:	0002      	movs	r2, r0
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e297      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e74:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d0f1      	beq.n	8004e62 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b57      	ldr	r3, [pc, #348]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	22f8      	movs	r2, #248	; 0xf8
 8004e84:	4393      	bics	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	00da      	lsls	r2, r3, #3
 8004e8e:	4b53      	ldr	r3, [pc, #332]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	e018      	b.n	8004ec8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e96:	4b51      	ldr	r3, [pc, #324]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b50      	ldr	r3, [pc, #320]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	438a      	bics	r2, r1
 8004ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea2:	f7fe fba1 	bl	80035e8 <HAL_GetTick>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eac:	f7fe fb9c 	bl	80035e8 <HAL_GetTick>
 8004eb0:	0002      	movs	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e272      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ebe:	4b47      	ldr	r3, [pc, #284]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d1f1      	bne.n	8004eac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d036      	beq.n	8004f40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d019      	beq.n	8004f0e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ede:	4b3f      	ldr	r3, [pc, #252]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee6:	f7fe fb7f 	bl	80035e8 <HAL_GetTick>
 8004eea:	0003      	movs	r3, r0
 8004eec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ef0:	f7fe fb7a 	bl	80035e8 <HAL_GetTick>
 8004ef4:	0002      	movs	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e250      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f02:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2202      	movs	r2, #2
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d0f1      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x24c>
 8004f0c:	e018      	b.n	8004f40 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f0e:	4b33      	ldr	r3, [pc, #204]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f12:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f14:	2101      	movs	r1, #1
 8004f16:	438a      	bics	r2, r1
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1a:	f7fe fb65 	bl	80035e8 <HAL_GetTick>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f24:	f7fe fb60 	bl	80035e8 <HAL_GetTick>
 8004f28:	0002      	movs	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e236      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f36:	4b29      	ldr	r3, [pc, #164]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d1f1      	bne.n	8004f24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2204      	movs	r2, #4
 8004f46:	4013      	ands	r3, r2
 8004f48:	d100      	bne.n	8004f4c <HAL_RCC_OscConfig+0x2a8>
 8004f4a:	e0b5      	b.n	80050b8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4c:	201f      	movs	r0, #31
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f54:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	055b      	lsls	r3, r3, #21
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d110      	bne.n	8004f82 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	4b1d      	ldr	r3, [pc, #116]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	0549      	lsls	r1, r1, #21
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	61da      	str	r2, [r3, #28]
 8004f6e:	4b1b      	ldr	r3, [pc, #108]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004f70:	69da      	ldr	r2, [r3, #28]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	055b      	lsls	r3, r3, #21
 8004f76:	4013      	ands	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f7c:	183b      	adds	r3, r7, r0
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f82:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_RCC_OscConfig+0x344>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d11a      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_RCC_OscConfig+0x344>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_RCC_OscConfig+0x344>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	0049      	lsls	r1, r1, #1
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f9c:	f7fe fb24 	bl	80035e8 <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa6:	f7fe fb1f 	bl	80035e8 <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b64      	cmp	r3, #100	; 0x64
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1f5      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_RCC_OscConfig+0x344>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d10f      	bne.n	8004fec <HAL_RCC_OscConfig+0x348>
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	4b02      	ldr	r3, [pc, #8]	; (8004fdc <HAL_RCC_OscConfig+0x338>)
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	621a      	str	r2, [r3, #32]
 8004fd8:	e036      	b.n	8005048 <HAL_RCC_OscConfig+0x3a4>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	fffeffff 	.word	0xfffeffff
 8004fe4:	fffbffff 	.word	0xfffbffff
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10c      	bne.n	800500e <HAL_RCC_OscConfig+0x36a>
 8004ff4:	4bca      	ldr	r3, [pc, #808]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	4bc9      	ldr	r3, [pc, #804]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	438a      	bics	r2, r1
 8004ffe:	621a      	str	r2, [r3, #32]
 8005000:	4bc7      	ldr	r3, [pc, #796]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	4bc6      	ldr	r3, [pc, #792]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005006:	2104      	movs	r1, #4
 8005008:	438a      	bics	r2, r1
 800500a:	621a      	str	r2, [r3, #32]
 800500c:	e01c      	b.n	8005048 <HAL_RCC_OscConfig+0x3a4>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b05      	cmp	r3, #5
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x38c>
 8005016:	4bc2      	ldr	r3, [pc, #776]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	4bc1      	ldr	r3, [pc, #772]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800501c:	2104      	movs	r1, #4
 800501e:	430a      	orrs	r2, r1
 8005020:	621a      	str	r2, [r3, #32]
 8005022:	4bbf      	ldr	r3, [pc, #764]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	4bbe      	ldr	r3, [pc, #760]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005028:	2101      	movs	r1, #1
 800502a:	430a      	orrs	r2, r1
 800502c:	621a      	str	r2, [r3, #32]
 800502e:	e00b      	b.n	8005048 <HAL_RCC_OscConfig+0x3a4>
 8005030:	4bbb      	ldr	r3, [pc, #748]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	4bba      	ldr	r3, [pc, #744]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005036:	2101      	movs	r1, #1
 8005038:	438a      	bics	r2, r1
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	4bb8      	ldr	r3, [pc, #736]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	4bb7      	ldr	r3, [pc, #732]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005042:	2104      	movs	r1, #4
 8005044:	438a      	bics	r2, r1
 8005046:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d014      	beq.n	800507a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005050:	f7fe faca 	bl	80035e8 <HAL_GetTick>
 8005054:	0003      	movs	r3, r0
 8005056:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	e009      	b.n	800506e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fe fac5 	bl	80035e8 <HAL_GetTick>
 800505e:	0002      	movs	r2, r0
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	4aaf      	ldr	r2, [pc, #700]	; (8005324 <HAL_RCC_OscConfig+0x680>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e19a      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506e:	4bac      	ldr	r3, [pc, #688]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x3b6>
 8005078:	e013      	b.n	80050a2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507a:	f7fe fab5 	bl	80035e8 <HAL_GetTick>
 800507e:	0003      	movs	r3, r0
 8005080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005082:	e009      	b.n	8005098 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005084:	f7fe fab0 	bl	80035e8 <HAL_GetTick>
 8005088:	0002      	movs	r2, r0
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	4aa5      	ldr	r2, [pc, #660]	; (8005324 <HAL_RCC_OscConfig+0x680>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e185      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005098:	4ba1      	ldr	r3, [pc, #644]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	2202      	movs	r2, #2
 800509e:	4013      	ands	r3, r2
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050a2:	231f      	movs	r3, #31
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ac:	4b9c      	ldr	r3, [pc, #624]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	4b9b      	ldr	r3, [pc, #620]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80050b2:	499d      	ldr	r1, [pc, #628]	; (8005328 <HAL_RCC_OscConfig+0x684>)
 80050b4:	400a      	ands	r2, r1
 80050b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2210      	movs	r2, #16
 80050be:	4013      	ands	r3, r2
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d12a      	bne.n	8005120 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80050ca:	4b95      	ldr	r3, [pc, #596]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80050cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ce:	4b94      	ldr	r3, [pc, #592]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80050d0:	2104      	movs	r1, #4
 80050d2:	430a      	orrs	r2, r1
 80050d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80050d6:	4b92      	ldr	r3, [pc, #584]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80050d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050da:	4b91      	ldr	r3, [pc, #580]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80050dc:	2101      	movs	r1, #1
 80050de:	430a      	orrs	r2, r1
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050e2:	f7fe fa81 	bl	80035e8 <HAL_GetTick>
 80050e6:	0003      	movs	r3, r0
 80050e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80050ec:	f7fe fa7c 	bl	80035e8 <HAL_GetTick>
 80050f0:	0002      	movs	r2, r0
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e152      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80050fe:	4b88      	ldr	r3, [pc, #544]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	2202      	movs	r2, #2
 8005104:	4013      	ands	r3, r2
 8005106:	d0f1      	beq.n	80050ec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005108:	4b85      	ldr	r3, [pc, #532]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	22f8      	movs	r2, #248	; 0xf8
 800510e:	4393      	bics	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	00da      	lsls	r2, r3, #3
 8005118:	4b81      	ldr	r3, [pc, #516]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800511a:	430a      	orrs	r2, r1
 800511c:	635a      	str	r2, [r3, #52]	; 0x34
 800511e:	e034      	b.n	800518a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	3305      	adds	r3, #5
 8005126:	d111      	bne.n	800514c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005128:	4b7d      	ldr	r3, [pc, #500]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800512a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512c:	4b7c      	ldr	r3, [pc, #496]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800512e:	2104      	movs	r1, #4
 8005130:	438a      	bics	r2, r1
 8005132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005134:	4b7a      	ldr	r3, [pc, #488]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	22f8      	movs	r2, #248	; 0xf8
 800513a:	4393      	bics	r3, r2
 800513c:	0019      	movs	r1, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	00da      	lsls	r2, r3, #3
 8005144:	4b76      	ldr	r3, [pc, #472]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005146:	430a      	orrs	r2, r1
 8005148:	635a      	str	r2, [r3, #52]	; 0x34
 800514a:	e01e      	b.n	800518a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800514c:	4b74      	ldr	r3, [pc, #464]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	4b73      	ldr	r3, [pc, #460]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005152:	2104      	movs	r1, #4
 8005154:	430a      	orrs	r2, r1
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005158:	4b71      	ldr	r3, [pc, #452]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800515a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800515c:	4b70      	ldr	r3, [pc, #448]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800515e:	2101      	movs	r1, #1
 8005160:	438a      	bics	r2, r1
 8005162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005164:	f7fe fa40 	bl	80035e8 <HAL_GetTick>
 8005168:	0003      	movs	r3, r0
 800516a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800516e:	f7fe fa3b 	bl	80035e8 <HAL_GetTick>
 8005172:	0002      	movs	r2, r0
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e111      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005180:	4b67      	ldr	r3, [pc, #412]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005184:	2202      	movs	r2, #2
 8005186:	4013      	ands	r3, r2
 8005188:	d1f1      	bne.n	800516e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2220      	movs	r2, #32
 8005190:	4013      	ands	r3, r2
 8005192:	d05c      	beq.n	800524e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005194:	4b62      	ldr	r3, [pc, #392]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	220c      	movs	r2, #12
 800519a:	4013      	ands	r3, r2
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d00e      	beq.n	80051be <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80051a0:	4b5f      	ldr	r3, [pc, #380]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	220c      	movs	r2, #12
 80051a6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d114      	bne.n	80051d6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80051ac:	4b5c      	ldr	r3, [pc, #368]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	23c0      	movs	r3, #192	; 0xc0
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	401a      	ands	r2, r3
 80051b6:	23c0      	movs	r3, #192	; 0xc0
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d10b      	bne.n	80051d6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80051be:	4b58      	ldr	r3, [pc, #352]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80051c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	029b      	lsls	r3, r3, #10
 80051c6:	4013      	ands	r3, r2
 80051c8:	d040      	beq.n	800524c <HAL_RCC_OscConfig+0x5a8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d03c      	beq.n	800524c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e0e6      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01b      	beq.n	8005216 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80051de:	4b50      	ldr	r3, [pc, #320]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80051e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e2:	4b4f      	ldr	r3, [pc, #316]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80051e4:	2180      	movs	r1, #128	; 0x80
 80051e6:	0249      	lsls	r1, r1, #9
 80051e8:	430a      	orrs	r2, r1
 80051ea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ec:	f7fe f9fc 	bl	80035e8 <HAL_GetTick>
 80051f0:	0003      	movs	r3, r0
 80051f2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f6:	f7fe f9f7 	bl	80035e8 <HAL_GetTick>
 80051fa:	0002      	movs	r2, r0
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e0cd      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005208:	4b45      	ldr	r3, [pc, #276]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	029b      	lsls	r3, r3, #10
 8005210:	4013      	ands	r3, r2
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x552>
 8005214:	e01b      	b.n	800524e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005216:	4b42      	ldr	r3, [pc, #264]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800521a:	4b41      	ldr	r3, [pc, #260]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800521c:	4943      	ldr	r1, [pc, #268]	; (800532c <HAL_RCC_OscConfig+0x688>)
 800521e:	400a      	ands	r2, r1
 8005220:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fe f9e1 	bl	80035e8 <HAL_GetTick>
 8005226:	0003      	movs	r3, r0
 8005228:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800522c:	f7fe f9dc 	bl	80035e8 <HAL_GetTick>
 8005230:	0002      	movs	r2, r0
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e0b2      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800523e:	4b38      	ldr	r3, [pc, #224]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	4013      	ands	r3, r2
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x588>
 800524a:	e000      	b.n	800524e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800524c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d100      	bne.n	8005258 <HAL_RCC_OscConfig+0x5b4>
 8005256:	e0a4      	b.n	80053a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	220c      	movs	r2, #12
 800525e:	4013      	ands	r3, r2
 8005260:	2b08      	cmp	r3, #8
 8005262:	d100      	bne.n	8005266 <HAL_RCC_OscConfig+0x5c2>
 8005264:	e078      	b.n	8005358 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b02      	cmp	r3, #2
 800526c:	d14c      	bne.n	8005308 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526e:	4b2c      	ldr	r3, [pc, #176]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005274:	492e      	ldr	r1, [pc, #184]	; (8005330 <HAL_RCC_OscConfig+0x68c>)
 8005276:	400a      	ands	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fe f9b5 	bl	80035e8 <HAL_GetTick>
 800527e:	0003      	movs	r3, r0
 8005280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7fe f9b0 	bl	80035e8 <HAL_GetTick>
 8005288:	0002      	movs	r2, r0
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e086      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005296:	4b22      	ldr	r3, [pc, #136]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	049b      	lsls	r3, r3, #18
 800529e:	4013      	ands	r3, r2
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a2:	4b1f      	ldr	r3, [pc, #124]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	220f      	movs	r2, #15
 80052a8:	4393      	bics	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b0:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052b2:	430a      	orrs	r2, r1
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <HAL_RCC_OscConfig+0x690>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	431a      	orrs	r2, r3
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	0449      	lsls	r1, r1, #17
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052de:	f7fe f983 	bl	80035e8 <HAL_GetTick>
 80052e2:	0003      	movs	r3, r0
 80052e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fe f97e 	bl	80035e8 <HAL_GetTick>
 80052ec:	0002      	movs	r2, r0
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e054      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052fa:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	049b      	lsls	r3, r3, #18
 8005302:	4013      	ands	r3, r2
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x644>
 8005306:	e04c      	b.n	80053a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <HAL_RCC_OscConfig+0x67c>)
 800530e:	4908      	ldr	r1, [pc, #32]	; (8005330 <HAL_RCC_OscConfig+0x68c>)
 8005310:	400a      	ands	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005314:	f7fe f968 	bl	80035e8 <HAL_GetTick>
 8005318:	0003      	movs	r3, r0
 800531a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800531c:	e015      	b.n	800534a <HAL_RCC_OscConfig+0x6a6>
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	40021000 	.word	0x40021000
 8005324:	00001388 	.word	0x00001388
 8005328:	efffffff 	.word	0xefffffff
 800532c:	fffeffff 	.word	0xfffeffff
 8005330:	feffffff 	.word	0xfeffffff
 8005334:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005338:	f7fe f956 	bl	80035e8 <HAL_GetTick>
 800533c:	0002      	movs	r2, r0
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e02c      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800534a:	4b18      	ldr	r3, [pc, #96]	; (80053ac <HAL_RCC_OscConfig+0x708>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	2380      	movs	r3, #128	; 0x80
 8005350:	049b      	lsls	r3, r3, #18
 8005352:	4013      	ands	r3, r2
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x694>
 8005356:	e024      	b.n	80053a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e01f      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005364:	4b11      	ldr	r3, [pc, #68]	; (80053ac <HAL_RCC_OscConfig+0x708>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x708>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	23c0      	movs	r3, #192	; 0xc0
 8005374:	025b      	lsls	r3, r3, #9
 8005376:	401a      	ands	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	429a      	cmp	r2, r3
 800537e:	d10e      	bne.n	800539e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	220f      	movs	r2, #15
 8005384:	401a      	ands	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d107      	bne.n	800539e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	23f0      	movs	r3, #240	; 0xf0
 8005392:	039b      	lsls	r3, r3, #14
 8005394:	401a      	ands	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d001      	beq.n	80053a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b008      	add	sp, #32
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000

080053b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0bf      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c4:	4b61      	ldr	r3, [pc, #388]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2201      	movs	r2, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d911      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b5e      	ldr	r3, [pc, #376]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	4393      	bics	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	4b5b      	ldr	r3, [pc, #364]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e4:	4b59      	ldr	r3, [pc, #356]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	4013      	ands	r3, r2
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e0a6      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2202      	movs	r2, #2
 80053fc:	4013      	ands	r3, r2
 80053fe:	d015      	beq.n	800542c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2204      	movs	r2, #4
 8005406:	4013      	ands	r3, r2
 8005408:	d006      	beq.n	8005418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800540a:	4b51      	ldr	r3, [pc, #324]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005410:	21e0      	movs	r1, #224	; 0xe0
 8005412:	00c9      	lsls	r1, r1, #3
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005418:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	22f0      	movs	r2, #240	; 0xf0
 800541e:	4393      	bics	r3, r2
 8005420:	0019      	movs	r1, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	4b4a      	ldr	r3, [pc, #296]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	4013      	ands	r3, r2
 8005434:	d04c      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	4b44      	ldr	r3, [pc, #272]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	2380      	movs	r3, #128	; 0x80
 8005444:	029b      	lsls	r3, r3, #10
 8005446:	4013      	ands	r3, r2
 8005448:	d120      	bne.n	800548c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e07a      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	049b      	lsls	r3, r3, #18
 800545e:	4013      	ands	r3, r2
 8005460:	d114      	bne.n	800548c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06e      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b03      	cmp	r3, #3
 800546c:	d107      	bne.n	800547e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800546e:	4b38      	ldr	r3, [pc, #224]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	4013      	ands	r3, r2
 8005478:	d108      	bne.n	800548c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e062      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547e:	4b34      	ldr	r3, [pc, #208]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2202      	movs	r2, #2
 8005484:	4013      	ands	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e05b      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800548c:	4b30      	ldr	r3, [pc, #192]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2203      	movs	r2, #3
 8005492:	4393      	bics	r3, r2
 8005494:	0019      	movs	r1, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	4b2d      	ldr	r3, [pc, #180]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a0:	f7fe f8a2 	bl	80035e8 <HAL_GetTick>
 80054a4:	0003      	movs	r3, r0
 80054a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a8:	e009      	b.n	80054be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054aa:	f7fe f89d 	bl	80035e8 <HAL_GetTick>
 80054ae:	0002      	movs	r2, r0
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	4a27      	ldr	r2, [pc, #156]	; (8005554 <HAL_RCC_ClockConfig+0x1a4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e042      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	220c      	movs	r2, #12
 80054c4:	401a      	ands	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d1ec      	bne.n	80054aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054d0:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d211      	bcs.n	8005502 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	4393      	bics	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	4b18      	ldr	r3, [pc, #96]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f0:	4b16      	ldr	r3, [pc, #88]	; (800554c <HAL_RCC_ClockConfig+0x19c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	4013      	ands	r3, r2
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d001      	beq.n	8005502 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e020      	b.n	8005544 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2204      	movs	r2, #4
 8005508:	4013      	ands	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a11      	ldr	r2, [pc, #68]	; (8005558 <HAL_RCC_ClockConfig+0x1a8>)
 8005512:	4013      	ands	r3, r2
 8005514:	0019      	movs	r1, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005520:	f000 f820 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005524:	0001      	movs	r1, r0
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <HAL_RCC_ClockConfig+0x1a0>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	220f      	movs	r2, #15
 800552e:	4013      	ands	r3, r2
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <HAL_RCC_ClockConfig+0x1ac>)
 8005532:	5cd3      	ldrb	r3, [r2, r3]
 8005534:	000a      	movs	r2, r1
 8005536:	40da      	lsrs	r2, r3
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_RCC_ClockConfig+0x1b0>)
 800553a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800553c:	2003      	movs	r0, #3
 800553e:	f7fe f80d 	bl	800355c <HAL_InitTick>
  
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b004      	add	sp, #16
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40022000 	.word	0x40022000
 8005550:	40021000 	.word	0x40021000
 8005554:	00001388 	.word	0x00001388
 8005558:	fffff8ff 	.word	0xfffff8ff
 800555c:	0800837c 	.word	0x0800837c
 8005560:	2000000c 	.word	0x2000000c

08005564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	2300      	movs	r3, #0
 8005578:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800557e:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	220c      	movs	r2, #12
 8005588:	4013      	ands	r3, r2
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d046      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0xb8>
 800558e:	d848      	bhi.n	8005622 <HAL_RCC_GetSysClockFreq+0xbe>
 8005590:	2b04      	cmp	r3, #4
 8005592:	d002      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0x36>
 8005594:	2b08      	cmp	r3, #8
 8005596:	d003      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x3c>
 8005598:	e043      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_GetSysClockFreq+0xd4>)
 800559c:	613b      	str	r3, [r7, #16]
      break;
 800559e:	e043      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	0c9b      	lsrs	r3, r3, #18
 80055a4:	220f      	movs	r2, #15
 80055a6:	4013      	ands	r3, r2
 80055a8:	4a24      	ldr	r2, [pc, #144]	; (800563c <HAL_RCC_GetSysClockFreq+0xd8>)
 80055aa:	5cd3      	ldrb	r3, [r2, r3]
 80055ac:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80055ae:	4b21      	ldr	r3, [pc, #132]	; (8005634 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	220f      	movs	r2, #15
 80055b4:	4013      	ands	r3, r2
 80055b6:	4a22      	ldr	r2, [pc, #136]	; (8005640 <HAL_RCC_GetSysClockFreq+0xdc>)
 80055b8:	5cd3      	ldrb	r3, [r2, r3]
 80055ba:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	23c0      	movs	r3, #192	; 0xc0
 80055c0:	025b      	lsls	r3, r3, #9
 80055c2:	401a      	ands	r2, r3
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	025b      	lsls	r3, r3, #9
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d109      	bne.n	80055e0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	481a      	ldr	r0, [pc, #104]	; (8005638 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055d0:	f7fa fda2 	bl	8000118 <__udivsi3>
 80055d4:	0003      	movs	r3, r0
 80055d6:	001a      	movs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4353      	muls	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e01a      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	23c0      	movs	r3, #192	; 0xc0
 80055e4:	025b      	lsls	r3, r3, #9
 80055e6:	401a      	ands	r2, r3
 80055e8:	23c0      	movs	r3, #192	; 0xc0
 80055ea:	025b      	lsls	r3, r3, #9
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d109      	bne.n	8005604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	4814      	ldr	r0, [pc, #80]	; (8005644 <HAL_RCC_GetSysClockFreq+0xe0>)
 80055f4:	f7fa fd90 	bl	8000118 <__udivsi3>
 80055f8:	0003      	movs	r3, r0
 80055fa:	001a      	movs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4353      	muls	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e008      	b.n	8005616 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	480c      	ldr	r0, [pc, #48]	; (8005638 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005608:	f7fa fd86 	bl	8000118 <__udivsi3>
 800560c:	0003      	movs	r3, r0
 800560e:	001a      	movs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4353      	muls	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	613b      	str	r3, [r7, #16]
      break;
 800561a:	e005      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <HAL_RCC_GetSysClockFreq+0xe0>)
 800561e:	613b      	str	r3, [r7, #16]
      break;
 8005620:	e002      	b.n	8005628 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005624:	613b      	str	r3, [r7, #16]
      break;
 8005626:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005628:	693b      	ldr	r3, [r7, #16]
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b006      	add	sp, #24
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	40021000 	.word	0x40021000
 8005638:	007a1200 	.word	0x007a1200
 800563c:	0800838c 	.word	0x0800838c
 8005640:	0800839c 	.word	0x0800839c
 8005644:	02dc6c00 	.word	0x02dc6c00

08005648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e042      	b.n	80056e0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	223d      	movs	r2, #61	; 0x3d
 800565e:	5c9b      	ldrb	r3, [r3, r2]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d107      	bne.n	8005676 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	223c      	movs	r2, #60	; 0x3c
 800566a:	2100      	movs	r1, #0
 800566c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	0018      	movs	r0, r3
 8005672:	f7fd fe3d 	bl	80032f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	223d      	movs	r2, #61	; 0x3d
 800567a:	2102      	movs	r1, #2
 800567c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	0019      	movs	r1, r3
 8005688:	0010      	movs	r0, r2
 800568a:	f000 fab7 	bl	8005bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2246      	movs	r2, #70	; 0x46
 8005692:	2101      	movs	r1, #1
 8005694:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	223e      	movs	r2, #62	; 0x3e
 800569a:	2101      	movs	r1, #1
 800569c:	5499      	strb	r1, [r3, r2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	223f      	movs	r2, #63	; 0x3f
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2240      	movs	r2, #64	; 0x40
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2241      	movs	r2, #65	; 0x41
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2242      	movs	r2, #66	; 0x42
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2243      	movs	r2, #67	; 0x43
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2244      	movs	r2, #68	; 0x44
 80056ca:	2101      	movs	r1, #1
 80056cc:	5499      	strb	r1, [r3, r2]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2245      	movs	r2, #69	; 0x45
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	223d      	movs	r2, #61	; 0x3d
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b002      	add	sp, #8
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	223d      	movs	r2, #61	; 0x3d
 80056f4:	5c9b      	ldrb	r3, [r3, r2]
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d001      	beq.n	8005700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e03b      	b.n	8005778 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	223d      	movs	r2, #61	; 0x3d
 8005704:	2102      	movs	r1, #2
 8005706:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2101      	movs	r1, #1
 8005714:	430a      	orrs	r2, r1
 8005716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <HAL_TIM_Base_Start_IT+0x98>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00f      	beq.n	8005742 <HAL_TIM_Base_Start_IT+0x5a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	05db      	lsls	r3, r3, #23
 800572a:	429a      	cmp	r2, r3
 800572c:	d009      	beq.n	8005742 <HAL_TIM_Base_Start_IT+0x5a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a14      	ldr	r2, [pc, #80]	; (8005784 <HAL_TIM_Base_Start_IT+0x9c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_TIM_Base_Start_IT+0x5a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a12      	ldr	r2, [pc, #72]	; (8005788 <HAL_TIM_Base_Start_IT+0xa0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d111      	bne.n	8005766 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2207      	movs	r2, #7
 800574a:	4013      	ands	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b06      	cmp	r3, #6
 8005752:	d010      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2101      	movs	r1, #1
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005764:	e007      	b.n	8005776 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2101      	movs	r1, #1
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40000400 	.word	0x40000400
 8005788:	40014000 	.word	0x40014000

0800578c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	438a      	bics	r2, r1
 80057a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <HAL_TIM_Base_Stop_IT+0x54>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	d10d      	bne.n	80057cc <HAL_TIM_Base_Stop_IT+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <HAL_TIM_Base_Stop_IT+0x58>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_Base_Stop_IT+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2101      	movs	r1, #1
 80057c8:	438a      	bics	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	223d      	movs	r2, #61	; 0x3d
 80057d0:	2101      	movs	r1, #1
 80057d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	0018      	movs	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	b002      	add	sp, #8
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	00001111 	.word	0x00001111
 80057e4:	00000444 	.word	0x00000444

080057e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2202      	movs	r2, #2
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d124      	bne.n	8005848 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	2202      	movs	r2, #2
 8005806:	4013      	ands	r3, r2
 8005808:	2b02      	cmp	r3, #2
 800580a:	d11d      	bne.n	8005848 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2203      	movs	r2, #3
 8005812:	4252      	negs	r2, r2
 8005814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2203      	movs	r2, #3
 8005824:	4013      	ands	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	0018      	movs	r0, r3
 800582c:	f000 f9ce 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005830:	e007      	b.n	8005842 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	0018      	movs	r0, r3
 8005836:	f000 f9c1 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	0018      	movs	r0, r3
 800583e:	f000 f9cd 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2204      	movs	r2, #4
 8005850:	4013      	ands	r3, r2
 8005852:	2b04      	cmp	r3, #4
 8005854:	d125      	bne.n	80058a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2204      	movs	r2, #4
 800585e:	4013      	ands	r3, r2
 8005860:	2b04      	cmp	r3, #4
 8005862:	d11e      	bne.n	80058a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2205      	movs	r2, #5
 800586a:	4252      	negs	r2, r2
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	23c0      	movs	r3, #192	; 0xc0
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4013      	ands	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 f9a1 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800588a:	e007      	b.n	800589c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	0018      	movs	r0, r3
 8005890:	f000 f994 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0018      	movs	r0, r3
 8005898:	f000 f9a0 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2208      	movs	r2, #8
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d124      	bne.n	80058fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2208      	movs	r2, #8
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d11d      	bne.n	80058fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2209      	movs	r2, #9
 80058c4:	4252      	negs	r2, r2
 80058c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	2203      	movs	r2, #3
 80058d6:	4013      	ands	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f975 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 80058e2:	e007      	b.n	80058f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 f968 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f974 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2210      	movs	r2, #16
 8005902:	4013      	ands	r3, r2
 8005904:	2b10      	cmp	r3, #16
 8005906:	d125      	bne.n	8005954 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2210      	movs	r2, #16
 8005910:	4013      	ands	r3, r2
 8005912:	2b10      	cmp	r3, #16
 8005914:	d11e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2211      	movs	r2, #17
 800591c:	4252      	negs	r2, r2
 800591e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2208      	movs	r2, #8
 8005924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	23c0      	movs	r3, #192	; 0xc0
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4013      	ands	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	0018      	movs	r0, r3
 8005938:	f000 f948 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800593c:	e007      	b.n	800594e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0018      	movs	r0, r3
 8005942:	f000 f93b 	bl	8005bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	0018      	movs	r0, r3
 800594a:	f000 f947 	bl	8005bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2201      	movs	r2, #1
 800595c:	4013      	ands	r3, r2
 800595e:	2b01      	cmp	r3, #1
 8005960:	d10f      	bne.n	8005982 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	4013      	ands	r3, r2
 800596c:	2b01      	cmp	r3, #1
 800596e:	d108      	bne.n	8005982 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2202      	movs	r2, #2
 8005976:	4252      	negs	r2, r2
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0018      	movs	r0, r3
 800597e:	f7fd fb93 	bl	80030a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	4013      	ands	r3, r2
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d10f      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	4013      	ands	r3, r2
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d108      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2281      	movs	r2, #129	; 0x81
 80059a4:	4252      	negs	r2, r2
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 faa6 	bl	8005efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2240      	movs	r2, #64	; 0x40
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d10f      	bne.n	80059de <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2240      	movs	r2, #64	; 0x40
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d108      	bne.n	80059de <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2241      	movs	r2, #65	; 0x41
 80059d2:	4252      	negs	r2, r2
 80059d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	0018      	movs	r0, r3
 80059da:	f000 f907 	bl	8005bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2220      	movs	r2, #32
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d10f      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d108      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2221      	movs	r2, #33	; 0x21
 8005a00:	4252      	negs	r2, r2
 8005a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 fa70 	bl	8005eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b002      	add	sp, #8
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1e:	230f      	movs	r3, #15
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	223c      	movs	r2, #60	; 0x3c
 8005a2a:	5c9b      	ldrb	r3, [r3, r2]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIM_ConfigClockSource+0x20>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e0bc      	b.n	8005bae <HAL_TIM_ConfigClockSource+0x19a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	223c      	movs	r2, #60	; 0x3c
 8005a38:	2101      	movs	r1, #1
 8005a3a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	223d      	movs	r2, #61	; 0x3d
 8005a40:	2102      	movs	r1, #2
 8005a42:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2277      	movs	r2, #119	; 0x77
 8005a50:	4393      	bics	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4a58      	ldr	r2, [pc, #352]	; (8005bb8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	0192      	lsls	r2, r2, #6
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d040      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0xde>
 8005a70:	2280      	movs	r2, #128	; 0x80
 8005a72:	0192      	lsls	r2, r2, #6
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d900      	bls.n	8005a7a <HAL_TIM_ConfigClockSource+0x66>
 8005a78:	e088      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	0152      	lsls	r2, r2, #5
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d100      	bne.n	8005a84 <HAL_TIM_ConfigClockSource+0x70>
 8005a82:	e088      	b.n	8005b96 <HAL_TIM_ConfigClockSource+0x182>
 8005a84:	2280      	movs	r2, #128	; 0x80
 8005a86:	0152      	lsls	r2, r2, #5
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d900      	bls.n	8005a8e <HAL_TIM_ConfigClockSource+0x7a>
 8005a8c:	e07e      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005a8e:	2b70      	cmp	r3, #112	; 0x70
 8005a90:	d018      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0xb0>
 8005a92:	d900      	bls.n	8005a96 <HAL_TIM_ConfigClockSource+0x82>
 8005a94:	e07a      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005a96:	2b60      	cmp	r3, #96	; 0x60
 8005a98:	d04f      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x126>
 8005a9a:	d900      	bls.n	8005a9e <HAL_TIM_ConfigClockSource+0x8a>
 8005a9c:	e076      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005a9e:	2b50      	cmp	r3, #80	; 0x50
 8005aa0:	d03b      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x106>
 8005aa2:	d900      	bls.n	8005aa6 <HAL_TIM_ConfigClockSource+0x92>
 8005aa4:	e072      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d057      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x146>
 8005aaa:	d900      	bls.n	8005aae <HAL_TIM_ConfigClockSource+0x9a>
 8005aac:	e06e      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d063      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x166>
 8005ab2:	d86b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d060      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x166>
 8005ab8:	d868      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d05d      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x166>
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d05b      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x166>
 8005ac2:	e063      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ad4:	f000 f98c 	bl	8005df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2277      	movs	r2, #119	; 0x77
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
      break;
 8005af0:	e052      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	f000 f975 	bl	8005df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	01c9      	lsls	r1, r1, #7
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
      break;
 8005b18:	e03e      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	001a      	movs	r2, r3
 8005b28:	f000 f8e8 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2150      	movs	r1, #80	; 0x50
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 f942 	bl	8005dbc <TIM_ITRx_SetConfig>
      break;
 8005b38:	e02e      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b46:	001a      	movs	r2, r3
 8005b48:	f000 f906 	bl	8005d58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2160      	movs	r1, #96	; 0x60
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 f932 	bl	8005dbc <TIM_ITRx_SetConfig>
      break;
 8005b58:	e01e      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	001a      	movs	r2, r3
 8005b68:	f000 f8c8 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2140      	movs	r1, #64	; 0x40
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 f922 	bl	8005dbc <TIM_ITRx_SetConfig>
      break;
 8005b78:	e00e      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	0019      	movs	r1, r3
 8005b84:	0010      	movs	r0, r2
 8005b86:	f000 f919 	bl	8005dbc <TIM_ITRx_SetConfig>
      break;
 8005b8a:	e005      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005b8c:	230f      	movs	r3, #15
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
      break;
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005b96:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	223d      	movs	r2, #61	; 0x3d
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	223c      	movs	r2, #60	; 0x3c
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	5499      	strb	r1, [r3, r2]

  return status;
 8005ba8:	230f      	movs	r3, #15
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	781b      	ldrb	r3, [r3, #0]
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b004      	add	sp, #16
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	ffff00ff 	.word	0xffff00ff

08005bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd4:	46c0      	nop			; (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf4:	46c0      	nop			; (mov r8, r8)
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	b002      	add	sp, #8
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a34      	ldr	r2, [pc, #208]	; (8005ce0 <TIM_Base_SetConfig+0xe4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d008      	beq.n	8005c26 <TIM_Base_SetConfig+0x2a>
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	05db      	lsls	r3, r3, #23
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x2a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <TIM_Base_SetConfig+0xe8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2270      	movs	r2, #112	; 0x70
 8005c2a:	4393      	bics	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a29      	ldr	r2, [pc, #164]	; (8005ce0 <TIM_Base_SetConfig+0xe4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	05db      	lsls	r3, r3, #23
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d013      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <TIM_Base_SetConfig+0xe8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00f      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <TIM_Base_SetConfig+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a23      	ldr	r2, [pc, #140]	; (8005cec <TIM_Base_SetConfig+0xf0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a22      	ldr	r2, [pc, #136]	; (8005cf0 <TIM_Base_SetConfig+0xf4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d003      	beq.n	8005c72 <TIM_Base_SetConfig+0x76>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <TIM_Base_SetConfig+0xf8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d108      	bne.n	8005c84 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <TIM_Base_SetConfig+0xfc>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2280      	movs	r2, #128	; 0x80
 8005c88:	4393      	bics	r3, r2
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <TIM_Base_SetConfig+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0xce>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <TIM_Base_SetConfig+0xf0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0xce>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a0c      	ldr	r2, [pc, #48]	; (8005cf0 <TIM_Base_SetConfig+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0xce>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a0b      	ldr	r2, [pc, #44]	; (8005cf4 <TIM_Base_SetConfig+0xf8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d103      	bne.n	8005cd2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	615a      	str	r2, [r3, #20]
}
 8005cd8:	46c0      	nop			; (mov r8, r8)
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b004      	add	sp, #16
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40012c00 	.word	0x40012c00
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40002000 	.word	0x40002000
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800
 8005cf8:	fffffcff 	.word	0xfffffcff

08005cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	2201      	movs	r2, #1
 8005d14:	4393      	bics	r3, r2
 8005d16:	001a      	movs	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	22f0      	movs	r2, #240	; 0xf0
 8005d26:	4393      	bics	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	220a      	movs	r2, #10
 8005d38:	4393      	bics	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b006      	add	sp, #24
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	2210      	movs	r2, #16
 8005d6a:	4393      	bics	r3, r2
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4a0d      	ldr	r2, [pc, #52]	; (8005db8 <TIM_TI2_ConfigInputStage+0x60>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	22a0      	movs	r2, #160	; 0xa0
 8005d94:	4393      	bics	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b006      	add	sp, #24
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	ffff0fff 	.word	0xffff0fff

08005dbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2270      	movs	r2, #112	; 0x70
 8005dd0:	4393      	bics	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	2207      	movs	r2, #7
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	609a      	str	r2, [r3, #8]
}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b004      	add	sp, #16
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <TIM_ETR_SetConfig+0x3c>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b006      	add	sp, #24
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	ffff00ff 	.word	0xffff00ff

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	223c      	movs	r2, #60	; 0x3c
 8005e3e:	5c9b      	ldrb	r3, [r3, r2]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e047      	b.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	223c      	movs	r2, #60	; 0x3c
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	223d      	movs	r2, #61	; 0x3d
 8005e54:	2102      	movs	r1, #2
 8005e56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2270      	movs	r2, #112	; 0x70
 8005e6c:	4393      	bics	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00f      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	05db      	lsls	r3, r3, #23
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d009      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a11      	ldr	r2, [pc, #68]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2280      	movs	r2, #128	; 0x80
 8005eb0:	4393      	bics	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	223d      	movs	r2, #61	; 0x3d
 8005eca:	2101      	movs	r1, #1
 8005ecc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	223c      	movs	r2, #60	; 0x3c
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	0018      	movs	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b004      	add	sp, #16
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40014000 	.word	0x40014000

08005eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <std>:
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	0004      	movs	r4, r0
 8005f12:	6003      	str	r3, [r0, #0]
 8005f14:	6043      	str	r3, [r0, #4]
 8005f16:	6083      	str	r3, [r0, #8]
 8005f18:	8181      	strh	r1, [r0, #12]
 8005f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f1c:	81c2      	strh	r2, [r0, #14]
 8005f1e:	6103      	str	r3, [r0, #16]
 8005f20:	6143      	str	r3, [r0, #20]
 8005f22:	6183      	str	r3, [r0, #24]
 8005f24:	0019      	movs	r1, r3
 8005f26:	2208      	movs	r2, #8
 8005f28:	305c      	adds	r0, #92	; 0x5c
 8005f2a:	f000 f90f 	bl	800614c <memset>
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <std+0x50>)
 8005f30:	6224      	str	r4, [r4, #32]
 8005f32:	6263      	str	r3, [r4, #36]	; 0x24
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <std+0x54>)
 8005f36:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <std+0x58>)
 8005f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <std+0x5c>)
 8005f3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005f40:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <std+0x60>)
 8005f42:	429c      	cmp	r4, r3
 8005f44:	d005      	beq.n	8005f52 <std+0x46>
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <std+0x64>)
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d002      	beq.n	8005f52 <std+0x46>
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <std+0x68>)
 8005f4e:	429c      	cmp	r4, r3
 8005f50:	d103      	bne.n	8005f5a <std+0x4e>
 8005f52:	0020      	movs	r0, r4
 8005f54:	3058      	adds	r0, #88	; 0x58
 8005f56:	f000 f979 	bl	800624c <__retarget_lock_init_recursive>
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	080060b5 	.word	0x080060b5
 8005f60:	080060dd 	.word	0x080060dd
 8005f64:	08006115 	.word	0x08006115
 8005f68:	08006141 	.word	0x08006141
 8005f6c:	20000218 	.word	0x20000218
 8005f70:	20000280 	.word	0x20000280
 8005f74:	200002e8 	.word	0x200002e8

08005f78 <stdio_exit_handler>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4a03      	ldr	r2, [pc, #12]	; (8005f88 <stdio_exit_handler+0x10>)
 8005f7c:	4903      	ldr	r1, [pc, #12]	; (8005f8c <stdio_exit_handler+0x14>)
 8005f7e:	4804      	ldr	r0, [pc, #16]	; (8005f90 <stdio_exit_handler+0x18>)
 8005f80:	f000 f86c 	bl	800605c <_fwalk_sglue>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	20000018 	.word	0x20000018
 8005f8c:	08006aed 	.word	0x08006aed
 8005f90:	20000024 	.word	0x20000024

08005f94 <cleanup_stdio>:
 8005f94:	6841      	ldr	r1, [r0, #4]
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <cleanup_stdio+0x30>)
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	0004      	movs	r4, r0
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d001      	beq.n	8005fa4 <cleanup_stdio+0x10>
 8005fa0:	f000 fda4 	bl	8006aec <_fflush_r>
 8005fa4:	68a1      	ldr	r1, [r4, #8]
 8005fa6:	4b08      	ldr	r3, [pc, #32]	; (8005fc8 <cleanup_stdio+0x34>)
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	d002      	beq.n	8005fb2 <cleanup_stdio+0x1e>
 8005fac:	0020      	movs	r0, r4
 8005fae:	f000 fd9d 	bl	8006aec <_fflush_r>
 8005fb2:	68e1      	ldr	r1, [r4, #12]
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <cleanup_stdio+0x38>)
 8005fb6:	4299      	cmp	r1, r3
 8005fb8:	d002      	beq.n	8005fc0 <cleanup_stdio+0x2c>
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f000 fd96 	bl	8006aec <_fflush_r>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	20000218 	.word	0x20000218
 8005fc8:	20000280 	.word	0x20000280
 8005fcc:	200002e8 	.word	0x200002e8

08005fd0 <global_stdio_init.part.0>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <global_stdio_init.part.0+0x28>)
 8005fd4:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <global_stdio_init.part.0+0x2c>)
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	4809      	ldr	r0, [pc, #36]	; (8006000 <global_stdio_init.part.0+0x30>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f7ff ff95 	bl	8005f0c <std>
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	2109      	movs	r1, #9
 8005fe6:	4807      	ldr	r0, [pc, #28]	; (8006004 <global_stdio_init.part.0+0x34>)
 8005fe8:	f7ff ff90 	bl	8005f0c <std>
 8005fec:	2202      	movs	r2, #2
 8005fee:	2112      	movs	r1, #18
 8005ff0:	4805      	ldr	r0, [pc, #20]	; (8006008 <global_stdio_init.part.0+0x38>)
 8005ff2:	f7ff ff8b 	bl	8005f0c <std>
 8005ff6:	bd10      	pop	{r4, pc}
 8005ff8:	20000350 	.word	0x20000350
 8005ffc:	08005f79 	.word	0x08005f79
 8006000:	20000218 	.word	0x20000218
 8006004:	20000280 	.word	0x20000280
 8006008:	200002e8 	.word	0x200002e8

0800600c <__sfp_lock_acquire>:
 800600c:	b510      	push	{r4, lr}
 800600e:	4802      	ldr	r0, [pc, #8]	; (8006018 <__sfp_lock_acquire+0xc>)
 8006010:	f000 f91d 	bl	800624e <__retarget_lock_acquire_recursive>
 8006014:	bd10      	pop	{r4, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	20000359 	.word	0x20000359

0800601c <__sfp_lock_release>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4802      	ldr	r0, [pc, #8]	; (8006028 <__sfp_lock_release+0xc>)
 8006020:	f000 f916 	bl	8006250 <__retarget_lock_release_recursive>
 8006024:	bd10      	pop	{r4, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	20000359 	.word	0x20000359

0800602c <__sinit>:
 800602c:	b510      	push	{r4, lr}
 800602e:	0004      	movs	r4, r0
 8006030:	f7ff ffec 	bl	800600c <__sfp_lock_acquire>
 8006034:	6a23      	ldr	r3, [r4, #32]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <__sinit+0x14>
 800603a:	f7ff ffef 	bl	800601c <__sfp_lock_release>
 800603e:	bd10      	pop	{r4, pc}
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <__sinit+0x28>)
 8006042:	6223      	str	r3, [r4, #32]
 8006044:	4b04      	ldr	r3, [pc, #16]	; (8006058 <__sinit+0x2c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f6      	bne.n	800603a <__sinit+0xe>
 800604c:	f7ff ffc0 	bl	8005fd0 <global_stdio_init.part.0>
 8006050:	e7f3      	b.n	800603a <__sinit+0xe>
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	08005f95 	.word	0x08005f95
 8006058:	20000350 	.word	0x20000350

0800605c <_fwalk_sglue>:
 800605c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800605e:	0014      	movs	r4, r2
 8006060:	2600      	movs	r6, #0
 8006062:	9000      	str	r0, [sp, #0]
 8006064:	9101      	str	r1, [sp, #4]
 8006066:	68a5      	ldr	r5, [r4, #8]
 8006068:	6867      	ldr	r7, [r4, #4]
 800606a:	3f01      	subs	r7, #1
 800606c:	d504      	bpl.n	8006078 <_fwalk_sglue+0x1c>
 800606e:	6824      	ldr	r4, [r4, #0]
 8006070:	2c00      	cmp	r4, #0
 8006072:	d1f8      	bne.n	8006066 <_fwalk_sglue+0xa>
 8006074:	0030      	movs	r0, r6
 8006076:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006078:	89ab      	ldrh	r3, [r5, #12]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d908      	bls.n	8006090 <_fwalk_sglue+0x34>
 800607e:	220e      	movs	r2, #14
 8006080:	5eab      	ldrsh	r3, [r5, r2]
 8006082:	3301      	adds	r3, #1
 8006084:	d004      	beq.n	8006090 <_fwalk_sglue+0x34>
 8006086:	0029      	movs	r1, r5
 8006088:	9800      	ldr	r0, [sp, #0]
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	4798      	blx	r3
 800608e:	4306      	orrs	r6, r0
 8006090:	3568      	adds	r5, #104	; 0x68
 8006092:	e7ea      	b.n	800606a <_fwalk_sglue+0xe>

08006094 <iprintf>:
 8006094:	b40f      	push	{r0, r1, r2, r3}
 8006096:	b507      	push	{r0, r1, r2, lr}
 8006098:	4905      	ldr	r1, [pc, #20]	; (80060b0 <iprintf+0x1c>)
 800609a:	ab04      	add	r3, sp, #16
 800609c:	6808      	ldr	r0, [r1, #0]
 800609e:	cb04      	ldmia	r3!, {r2}
 80060a0:	6881      	ldr	r1, [r0, #8]
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	f000 f9fc 	bl	80064a0 <_vfiprintf_r>
 80060a8:	b003      	add	sp, #12
 80060aa:	bc08      	pop	{r3}
 80060ac:	b004      	add	sp, #16
 80060ae:	4718      	bx	r3
 80060b0:	20000070 	.word	0x20000070

080060b4 <__sread>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	000c      	movs	r4, r1
 80060b8:	250e      	movs	r5, #14
 80060ba:	5f49      	ldrsh	r1, [r1, r5]
 80060bc:	f000 f874 	bl	80061a8 <_read_r>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	db03      	blt.n	80060cc <__sread+0x18>
 80060c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80060c6:	181b      	adds	r3, r3, r0
 80060c8:	6563      	str	r3, [r4, #84]	; 0x54
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	4a02      	ldr	r2, [pc, #8]	; (80060d8 <__sread+0x24>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	e7f9      	b.n	80060ca <__sread+0x16>
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	ffffefff 	.word	0xffffefff

080060dc <__swrite>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	001f      	movs	r7, r3
 80060e0:	898b      	ldrh	r3, [r1, #12]
 80060e2:	0005      	movs	r5, r0
 80060e4:	000c      	movs	r4, r1
 80060e6:	0016      	movs	r6, r2
 80060e8:	05db      	lsls	r3, r3, #23
 80060ea:	d505      	bpl.n	80060f8 <__swrite+0x1c>
 80060ec:	230e      	movs	r3, #14
 80060ee:	5ec9      	ldrsh	r1, [r1, r3]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2302      	movs	r3, #2
 80060f4:	f000 f844 	bl	8006180 <_lseek_r>
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	4a05      	ldr	r2, [pc, #20]	; (8006110 <__swrite+0x34>)
 80060fc:	0028      	movs	r0, r5
 80060fe:	4013      	ands	r3, r2
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	0032      	movs	r2, r6
 8006104:	230e      	movs	r3, #14
 8006106:	5ee1      	ldrsh	r1, [r4, r3]
 8006108:	003b      	movs	r3, r7
 800610a:	f000 f861 	bl	80061d0 <_write_r>
 800610e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006110:	ffffefff 	.word	0xffffefff

08006114 <__sseek>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	000c      	movs	r4, r1
 8006118:	250e      	movs	r5, #14
 800611a:	5f49      	ldrsh	r1, [r1, r5]
 800611c:	f000 f830 	bl	8006180 <_lseek_r>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	1c42      	adds	r2, r0, #1
 8006124:	d103      	bne.n	800612e <__sseek+0x1a>
 8006126:	4a05      	ldr	r2, [pc, #20]	; (800613c <__sseek+0x28>)
 8006128:	4013      	ands	r3, r2
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	bd70      	pop	{r4, r5, r6, pc}
 800612e:	2280      	movs	r2, #128	; 0x80
 8006130:	0152      	lsls	r2, r2, #5
 8006132:	4313      	orrs	r3, r2
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	6560      	str	r0, [r4, #84]	; 0x54
 8006138:	e7f8      	b.n	800612c <__sseek+0x18>
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	ffffefff 	.word	0xffffefff

08006140 <__sclose>:
 8006140:	b510      	push	{r4, lr}
 8006142:	230e      	movs	r3, #14
 8006144:	5ec9      	ldrsh	r1, [r1, r3]
 8006146:	f000 f809 	bl	800615c <_close_r>
 800614a:	bd10      	pop	{r4, pc}

0800614c <memset>:
 800614c:	0003      	movs	r3, r0
 800614e:	1882      	adds	r2, r0, r2
 8006150:	4293      	cmp	r3, r2
 8006152:	d100      	bne.n	8006156 <memset+0xa>
 8006154:	4770      	bx	lr
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	e7f9      	b.n	8006150 <memset+0x4>

0800615c <_close_r>:
 800615c:	2300      	movs	r3, #0
 800615e:	b570      	push	{r4, r5, r6, lr}
 8006160:	4d06      	ldr	r5, [pc, #24]	; (800617c <_close_r+0x20>)
 8006162:	0004      	movs	r4, r0
 8006164:	0008      	movs	r0, r1
 8006166:	602b      	str	r3, [r5, #0]
 8006168:	f7fd f951 	bl	800340e <_close>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d103      	bne.n	8006178 <_close_r+0x1c>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d000      	beq.n	8006178 <_close_r+0x1c>
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20000354 	.word	0x20000354

08006180 <_lseek_r>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	0004      	movs	r4, r0
 8006184:	0008      	movs	r0, r1
 8006186:	0011      	movs	r1, r2
 8006188:	001a      	movs	r2, r3
 800618a:	2300      	movs	r3, #0
 800618c:	4d05      	ldr	r5, [pc, #20]	; (80061a4 <_lseek_r+0x24>)
 800618e:	602b      	str	r3, [r5, #0]
 8006190:	f7fd f95e 	bl	8003450 <_lseek>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d103      	bne.n	80061a0 <_lseek_r+0x20>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d000      	beq.n	80061a0 <_lseek_r+0x20>
 800619e:	6023      	str	r3, [r4, #0]
 80061a0:	bd70      	pop	{r4, r5, r6, pc}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	20000354 	.word	0x20000354

080061a8 <_read_r>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	0004      	movs	r4, r0
 80061ac:	0008      	movs	r0, r1
 80061ae:	0011      	movs	r1, r2
 80061b0:	001a      	movs	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	4d05      	ldr	r5, [pc, #20]	; (80061cc <_read_r+0x24>)
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fd f8f0 	bl	800339c <_read>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d103      	bne.n	80061c8 <_read_r+0x20>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d000      	beq.n	80061c8 <_read_r+0x20>
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	20000354 	.word	0x20000354

080061d0 <_write_r>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	0004      	movs	r4, r0
 80061d4:	0008      	movs	r0, r1
 80061d6:	0011      	movs	r1, r2
 80061d8:	001a      	movs	r2, r3
 80061da:	2300      	movs	r3, #0
 80061dc:	4d05      	ldr	r5, [pc, #20]	; (80061f4 <_write_r+0x24>)
 80061de:	602b      	str	r3, [r5, #0]
 80061e0:	f7fd f8f9 	bl	80033d6 <_write>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	d103      	bne.n	80061f0 <_write_r+0x20>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d000      	beq.n	80061f0 <_write_r+0x20>
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	bd70      	pop	{r4, r5, r6, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	20000354 	.word	0x20000354

080061f8 <__errno>:
 80061f8:	4b01      	ldr	r3, [pc, #4]	; (8006200 <__errno+0x8>)
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	4770      	bx	lr
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	20000070 	.word	0x20000070

08006204 <__libc_init_array>:
 8006204:	b570      	push	{r4, r5, r6, lr}
 8006206:	2600      	movs	r6, #0
 8006208:	4c0c      	ldr	r4, [pc, #48]	; (800623c <__libc_init_array+0x38>)
 800620a:	4d0d      	ldr	r5, [pc, #52]	; (8006240 <__libc_init_array+0x3c>)
 800620c:	1b64      	subs	r4, r4, r5
 800620e:	10a4      	asrs	r4, r4, #2
 8006210:	42a6      	cmp	r6, r4
 8006212:	d109      	bne.n	8006228 <__libc_init_array+0x24>
 8006214:	2600      	movs	r6, #0
 8006216:	f002 f87d 	bl	8008314 <_init>
 800621a:	4c0a      	ldr	r4, [pc, #40]	; (8006244 <__libc_init_array+0x40>)
 800621c:	4d0a      	ldr	r5, [pc, #40]	; (8006248 <__libc_init_array+0x44>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	42a6      	cmp	r6, r4
 8006224:	d105      	bne.n	8006232 <__libc_init_array+0x2e>
 8006226:	bd70      	pop	{r4, r5, r6, pc}
 8006228:	00b3      	lsls	r3, r6, #2
 800622a:	58eb      	ldr	r3, [r5, r3]
 800622c:	4798      	blx	r3
 800622e:	3601      	adds	r6, #1
 8006230:	e7ee      	b.n	8006210 <__libc_init_array+0xc>
 8006232:	00b3      	lsls	r3, r6, #2
 8006234:	58eb      	ldr	r3, [r5, r3]
 8006236:	4798      	blx	r3
 8006238:	3601      	adds	r6, #1
 800623a:	e7f2      	b.n	8006222 <__libc_init_array+0x1e>
 800623c:	08008440 	.word	0x08008440
 8006240:	08008440 	.word	0x08008440
 8006244:	08008444 	.word	0x08008444
 8006248:	08008440 	.word	0x08008440

0800624c <__retarget_lock_init_recursive>:
 800624c:	4770      	bx	lr

0800624e <__retarget_lock_acquire_recursive>:
 800624e:	4770      	bx	lr

08006250 <__retarget_lock_release_recursive>:
 8006250:	4770      	bx	lr
	...

08006254 <_free_r>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	0005      	movs	r5, r0
 8006258:	2900      	cmp	r1, #0
 800625a:	d010      	beq.n	800627e <_free_r+0x2a>
 800625c:	1f0c      	subs	r4, r1, #4
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da00      	bge.n	8006266 <_free_r+0x12>
 8006264:	18e4      	adds	r4, r4, r3
 8006266:	0028      	movs	r0, r5
 8006268:	f000 f8e2 	bl	8006430 <__malloc_lock>
 800626c:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <_free_r+0x90>)
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <_free_r+0x2c>
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6014      	str	r4, [r2, #0]
 8006278:	0028      	movs	r0, r5
 800627a:	f000 f8e1 	bl	8006440 <__malloc_unlock>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	42a3      	cmp	r3, r4
 8006282:	d908      	bls.n	8006296 <_free_r+0x42>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	d1f3      	bne.n	8006274 <_free_r+0x20>
 800628c:	6819      	ldr	r1, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	1809      	adds	r1, r1, r0
 8006292:	6021      	str	r1, [r4, #0]
 8006294:	e7ee      	b.n	8006274 <_free_r+0x20>
 8006296:	001a      	movs	r2, r3
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <_free_r+0x4e>
 800629e:	42a3      	cmp	r3, r4
 80062a0:	d9f9      	bls.n	8006296 <_free_r+0x42>
 80062a2:	6811      	ldr	r1, [r2, #0]
 80062a4:	1850      	adds	r0, r2, r1
 80062a6:	42a0      	cmp	r0, r4
 80062a8:	d10b      	bne.n	80062c2 <_free_r+0x6e>
 80062aa:	6820      	ldr	r0, [r4, #0]
 80062ac:	1809      	adds	r1, r1, r0
 80062ae:	1850      	adds	r0, r2, r1
 80062b0:	6011      	str	r1, [r2, #0]
 80062b2:	4283      	cmp	r3, r0
 80062b4:	d1e0      	bne.n	8006278 <_free_r+0x24>
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	1841      	adds	r1, r0, r1
 80062bc:	6011      	str	r1, [r2, #0]
 80062be:	6053      	str	r3, [r2, #4]
 80062c0:	e7da      	b.n	8006278 <_free_r+0x24>
 80062c2:	42a0      	cmp	r0, r4
 80062c4:	d902      	bls.n	80062cc <_free_r+0x78>
 80062c6:	230c      	movs	r3, #12
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	e7d5      	b.n	8006278 <_free_r+0x24>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	1821      	adds	r1, r4, r0
 80062d0:	428b      	cmp	r3, r1
 80062d2:	d103      	bne.n	80062dc <_free_r+0x88>
 80062d4:	6819      	ldr	r1, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	1809      	adds	r1, r1, r0
 80062da:	6021      	str	r1, [r4, #0]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	6054      	str	r4, [r2, #4]
 80062e0:	e7ca      	b.n	8006278 <_free_r+0x24>
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	2000035c 	.word	0x2000035c

080062e8 <sbrk_aligned>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4e0f      	ldr	r6, [pc, #60]	; (8006328 <sbrk_aligned+0x40>)
 80062ec:	000d      	movs	r5, r1
 80062ee:	6831      	ldr	r1, [r6, #0]
 80062f0:	0004      	movs	r4, r0
 80062f2:	2900      	cmp	r1, #0
 80062f4:	d102      	bne.n	80062fc <sbrk_aligned+0x14>
 80062f6:	f000 fccb 	bl	8006c90 <_sbrk_r>
 80062fa:	6030      	str	r0, [r6, #0]
 80062fc:	0029      	movs	r1, r5
 80062fe:	0020      	movs	r0, r4
 8006300:	f000 fcc6 	bl	8006c90 <_sbrk_r>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d00a      	beq.n	800631e <sbrk_aligned+0x36>
 8006308:	2303      	movs	r3, #3
 800630a:	1cc5      	adds	r5, r0, #3
 800630c:	439d      	bics	r5, r3
 800630e:	42a8      	cmp	r0, r5
 8006310:	d007      	beq.n	8006322 <sbrk_aligned+0x3a>
 8006312:	1a29      	subs	r1, r5, r0
 8006314:	0020      	movs	r0, r4
 8006316:	f000 fcbb 	bl	8006c90 <_sbrk_r>
 800631a:	3001      	adds	r0, #1
 800631c:	d101      	bne.n	8006322 <sbrk_aligned+0x3a>
 800631e:	2501      	movs	r5, #1
 8006320:	426d      	negs	r5, r5
 8006322:	0028      	movs	r0, r5
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	20000360 	.word	0x20000360

0800632c <_malloc_r>:
 800632c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800632e:	2203      	movs	r2, #3
 8006330:	1ccb      	adds	r3, r1, #3
 8006332:	4393      	bics	r3, r2
 8006334:	3308      	adds	r3, #8
 8006336:	0006      	movs	r6, r0
 8006338:	001f      	movs	r7, r3
 800633a:	2b0c      	cmp	r3, #12
 800633c:	d238      	bcs.n	80063b0 <_malloc_r+0x84>
 800633e:	270c      	movs	r7, #12
 8006340:	42b9      	cmp	r1, r7
 8006342:	d837      	bhi.n	80063b4 <_malloc_r+0x88>
 8006344:	0030      	movs	r0, r6
 8006346:	f000 f873 	bl	8006430 <__malloc_lock>
 800634a:	4b38      	ldr	r3, [pc, #224]	; (800642c <_malloc_r+0x100>)
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	001c      	movs	r4, r3
 8006352:	2c00      	cmp	r4, #0
 8006354:	d133      	bne.n	80063be <_malloc_r+0x92>
 8006356:	0039      	movs	r1, r7
 8006358:	0030      	movs	r0, r6
 800635a:	f7ff ffc5 	bl	80062e8 <sbrk_aligned>
 800635e:	0004      	movs	r4, r0
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d15e      	bne.n	8006422 <_malloc_r+0xf6>
 8006364:	9b00      	ldr	r3, [sp, #0]
 8006366:	681c      	ldr	r4, [r3, #0]
 8006368:	0025      	movs	r5, r4
 800636a:	2d00      	cmp	r5, #0
 800636c:	d14e      	bne.n	800640c <_malloc_r+0xe0>
 800636e:	2c00      	cmp	r4, #0
 8006370:	d051      	beq.n	8006416 <_malloc_r+0xea>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0029      	movs	r1, r5
 8006376:	18e3      	adds	r3, r4, r3
 8006378:	0030      	movs	r0, r6
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	f000 fc88 	bl	8006c90 <_sbrk_r>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	4283      	cmp	r3, r0
 8006384:	d147      	bne.n	8006416 <_malloc_r+0xea>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	0030      	movs	r0, r6
 800638a:	1aff      	subs	r7, r7, r3
 800638c:	0039      	movs	r1, r7
 800638e:	f7ff ffab 	bl	80062e8 <sbrk_aligned>
 8006392:	3001      	adds	r0, #1
 8006394:	d03f      	beq.n	8006416 <_malloc_r+0xea>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	19db      	adds	r3, r3, r7
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	9b00      	ldr	r3, [sp, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d040      	beq.n	8006426 <_malloc_r+0xfa>
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	42a2      	cmp	r2, r4
 80063a8:	d133      	bne.n	8006412 <_malloc_r+0xe6>
 80063aa:	2200      	movs	r2, #0
 80063ac:	605a      	str	r2, [r3, #4]
 80063ae:	e014      	b.n	80063da <_malloc_r+0xae>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dac5      	bge.n	8006340 <_malloc_r+0x14>
 80063b4:	230c      	movs	r3, #12
 80063b6:	2500      	movs	r5, #0
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	0028      	movs	r0, r5
 80063bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063be:	6821      	ldr	r1, [r4, #0]
 80063c0:	1bc9      	subs	r1, r1, r7
 80063c2:	d420      	bmi.n	8006406 <_malloc_r+0xda>
 80063c4:	290b      	cmp	r1, #11
 80063c6:	d918      	bls.n	80063fa <_malloc_r+0xce>
 80063c8:	19e2      	adds	r2, r4, r7
 80063ca:	6027      	str	r7, [r4, #0]
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d112      	bne.n	80063f6 <_malloc_r+0xca>
 80063d0:	9b00      	ldr	r3, [sp, #0]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	6011      	str	r1, [r2, #0]
 80063d8:	6053      	str	r3, [r2, #4]
 80063da:	0030      	movs	r0, r6
 80063dc:	0025      	movs	r5, r4
 80063de:	f000 f82f 	bl	8006440 <__malloc_unlock>
 80063e2:	2207      	movs	r2, #7
 80063e4:	350b      	adds	r5, #11
 80063e6:	1d23      	adds	r3, r4, #4
 80063e8:	4395      	bics	r5, r2
 80063ea:	1aea      	subs	r2, r5, r3
 80063ec:	429d      	cmp	r5, r3
 80063ee:	d0e4      	beq.n	80063ba <_malloc_r+0x8e>
 80063f0:	1b5b      	subs	r3, r3, r5
 80063f2:	50a3      	str	r3, [r4, r2]
 80063f4:	e7e1      	b.n	80063ba <_malloc_r+0x8e>
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	e7ec      	b.n	80063d4 <_malloc_r+0xa8>
 80063fa:	6862      	ldr	r2, [r4, #4]
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	d1d5      	bne.n	80063ac <_malloc_r+0x80>
 8006400:	9b00      	ldr	r3, [sp, #0]
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e7e9      	b.n	80063da <_malloc_r+0xae>
 8006406:	0023      	movs	r3, r4
 8006408:	6864      	ldr	r4, [r4, #4]
 800640a:	e7a2      	b.n	8006352 <_malloc_r+0x26>
 800640c:	002c      	movs	r4, r5
 800640e:	686d      	ldr	r5, [r5, #4]
 8006410:	e7ab      	b.n	800636a <_malloc_r+0x3e>
 8006412:	0013      	movs	r3, r2
 8006414:	e7c4      	b.n	80063a0 <_malloc_r+0x74>
 8006416:	230c      	movs	r3, #12
 8006418:	0030      	movs	r0, r6
 800641a:	6033      	str	r3, [r6, #0]
 800641c:	f000 f810 	bl	8006440 <__malloc_unlock>
 8006420:	e7cb      	b.n	80063ba <_malloc_r+0x8e>
 8006422:	6027      	str	r7, [r4, #0]
 8006424:	e7d9      	b.n	80063da <_malloc_r+0xae>
 8006426:	605b      	str	r3, [r3, #4]
 8006428:	deff      	udf	#255	; 0xff
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	2000035c 	.word	0x2000035c

08006430 <__malloc_lock>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4802      	ldr	r0, [pc, #8]	; (800643c <__malloc_lock+0xc>)
 8006434:	f7ff ff0b 	bl	800624e <__retarget_lock_acquire_recursive>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	20000358 	.word	0x20000358

08006440 <__malloc_unlock>:
 8006440:	b510      	push	{r4, lr}
 8006442:	4802      	ldr	r0, [pc, #8]	; (800644c <__malloc_unlock+0xc>)
 8006444:	f7ff ff04 	bl	8006250 <__retarget_lock_release_recursive>
 8006448:	bd10      	pop	{r4, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	20000358 	.word	0x20000358

08006450 <__sfputc_r>:
 8006450:	6893      	ldr	r3, [r2, #8]
 8006452:	b510      	push	{r4, lr}
 8006454:	3b01      	subs	r3, #1
 8006456:	6093      	str	r3, [r2, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da04      	bge.n	8006466 <__sfputc_r+0x16>
 800645c:	6994      	ldr	r4, [r2, #24]
 800645e:	42a3      	cmp	r3, r4
 8006460:	db07      	blt.n	8006472 <__sfputc_r+0x22>
 8006462:	290a      	cmp	r1, #10
 8006464:	d005      	beq.n	8006472 <__sfputc_r+0x22>
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	1c58      	adds	r0, r3, #1
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	7019      	strb	r1, [r3, #0]
 800646e:	0008      	movs	r0, r1
 8006470:	bd10      	pop	{r4, pc}
 8006472:	f000 fb66 	bl	8006b42 <__swbuf_r>
 8006476:	0001      	movs	r1, r0
 8006478:	e7f9      	b.n	800646e <__sfputc_r+0x1e>

0800647a <__sfputs_r>:
 800647a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647c:	0006      	movs	r6, r0
 800647e:	000f      	movs	r7, r1
 8006480:	0014      	movs	r4, r2
 8006482:	18d5      	adds	r5, r2, r3
 8006484:	42ac      	cmp	r4, r5
 8006486:	d101      	bne.n	800648c <__sfputs_r+0x12>
 8006488:	2000      	movs	r0, #0
 800648a:	e007      	b.n	800649c <__sfputs_r+0x22>
 800648c:	7821      	ldrb	r1, [r4, #0]
 800648e:	003a      	movs	r2, r7
 8006490:	0030      	movs	r0, r6
 8006492:	f7ff ffdd 	bl	8006450 <__sfputc_r>
 8006496:	3401      	adds	r4, #1
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d1f3      	bne.n	8006484 <__sfputs_r+0xa>
 800649c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064a0 <_vfiprintf_r>:
 80064a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a2:	b0a1      	sub	sp, #132	; 0x84
 80064a4:	000f      	movs	r7, r1
 80064a6:	0015      	movs	r5, r2
 80064a8:	001e      	movs	r6, r3
 80064aa:	9003      	str	r0, [sp, #12]
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d004      	beq.n	80064ba <_vfiprintf_r+0x1a>
 80064b0:	6a03      	ldr	r3, [r0, #32]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <_vfiprintf_r+0x1a>
 80064b6:	f7ff fdb9 	bl	800602c <__sinit>
 80064ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064bc:	07db      	lsls	r3, r3, #31
 80064be:	d405      	bmi.n	80064cc <_vfiprintf_r+0x2c>
 80064c0:	89bb      	ldrh	r3, [r7, #12]
 80064c2:	059b      	lsls	r3, r3, #22
 80064c4:	d402      	bmi.n	80064cc <_vfiprintf_r+0x2c>
 80064c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80064c8:	f7ff fec1 	bl	800624e <__retarget_lock_acquire_recursive>
 80064cc:	89bb      	ldrh	r3, [r7, #12]
 80064ce:	071b      	lsls	r3, r3, #28
 80064d0:	d502      	bpl.n	80064d8 <_vfiprintf_r+0x38>
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d113      	bne.n	8006500 <_vfiprintf_r+0x60>
 80064d8:	0039      	movs	r1, r7
 80064da:	9803      	ldr	r0, [sp, #12]
 80064dc:	f000 fb74 	bl	8006bc8 <__swsetup_r>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d00d      	beq.n	8006500 <_vfiprintf_r+0x60>
 80064e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e6:	07db      	lsls	r3, r3, #31
 80064e8:	d503      	bpl.n	80064f2 <_vfiprintf_r+0x52>
 80064ea:	2001      	movs	r0, #1
 80064ec:	4240      	negs	r0, r0
 80064ee:	b021      	add	sp, #132	; 0x84
 80064f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f2:	89bb      	ldrh	r3, [r7, #12]
 80064f4:	059b      	lsls	r3, r3, #22
 80064f6:	d4f8      	bmi.n	80064ea <_vfiprintf_r+0x4a>
 80064f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80064fa:	f7ff fea9 	bl	8006250 <__retarget_lock_release_recursive>
 80064fe:	e7f4      	b.n	80064ea <_vfiprintf_r+0x4a>
 8006500:	2300      	movs	r3, #0
 8006502:	ac08      	add	r4, sp, #32
 8006504:	6163      	str	r3, [r4, #20]
 8006506:	3320      	adds	r3, #32
 8006508:	7663      	strb	r3, [r4, #25]
 800650a:	3310      	adds	r3, #16
 800650c:	76a3      	strb	r3, [r4, #26]
 800650e:	9607      	str	r6, [sp, #28]
 8006510:	002e      	movs	r6, r5
 8006512:	7833      	ldrb	r3, [r6, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <_vfiprintf_r+0x7c>
 8006518:	2b25      	cmp	r3, #37	; 0x25
 800651a:	d148      	bne.n	80065ae <_vfiprintf_r+0x10e>
 800651c:	1b73      	subs	r3, r6, r5
 800651e:	9305      	str	r3, [sp, #20]
 8006520:	42ae      	cmp	r6, r5
 8006522:	d00b      	beq.n	800653c <_vfiprintf_r+0x9c>
 8006524:	002a      	movs	r2, r5
 8006526:	0039      	movs	r1, r7
 8006528:	9803      	ldr	r0, [sp, #12]
 800652a:	f7ff ffa6 	bl	800647a <__sfputs_r>
 800652e:	3001      	adds	r0, #1
 8006530:	d100      	bne.n	8006534 <_vfiprintf_r+0x94>
 8006532:	e0af      	b.n	8006694 <_vfiprintf_r+0x1f4>
 8006534:	6963      	ldr	r3, [r4, #20]
 8006536:	9a05      	ldr	r2, [sp, #20]
 8006538:	189b      	adds	r3, r3, r2
 800653a:	6163      	str	r3, [r4, #20]
 800653c:	7833      	ldrb	r3, [r6, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d100      	bne.n	8006544 <_vfiprintf_r+0xa4>
 8006542:	e0a7      	b.n	8006694 <_vfiprintf_r+0x1f4>
 8006544:	2201      	movs	r2, #1
 8006546:	2300      	movs	r3, #0
 8006548:	4252      	negs	r2, r2
 800654a:	6062      	str	r2, [r4, #4]
 800654c:	a904      	add	r1, sp, #16
 800654e:	3254      	adds	r2, #84	; 0x54
 8006550:	1852      	adds	r2, r2, r1
 8006552:	1c75      	adds	r5, r6, #1
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	60e3      	str	r3, [r4, #12]
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	7013      	strb	r3, [r2, #0]
 800655c:	65a3      	str	r3, [r4, #88]	; 0x58
 800655e:	4b59      	ldr	r3, [pc, #356]	; (80066c4 <_vfiprintf_r+0x224>)
 8006560:	2205      	movs	r2, #5
 8006562:	0018      	movs	r0, r3
 8006564:	7829      	ldrb	r1, [r5, #0]
 8006566:	9305      	str	r3, [sp, #20]
 8006568:	f000 fba4 	bl	8006cb4 <memchr>
 800656c:	1c6e      	adds	r6, r5, #1
 800656e:	2800      	cmp	r0, #0
 8006570:	d11f      	bne.n	80065b2 <_vfiprintf_r+0x112>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	06d3      	lsls	r3, r2, #27
 8006576:	d504      	bpl.n	8006582 <_vfiprintf_r+0xe2>
 8006578:	2353      	movs	r3, #83	; 0x53
 800657a:	a904      	add	r1, sp, #16
 800657c:	185b      	adds	r3, r3, r1
 800657e:	2120      	movs	r1, #32
 8006580:	7019      	strb	r1, [r3, #0]
 8006582:	0713      	lsls	r3, r2, #28
 8006584:	d504      	bpl.n	8006590 <_vfiprintf_r+0xf0>
 8006586:	2353      	movs	r3, #83	; 0x53
 8006588:	a904      	add	r1, sp, #16
 800658a:	185b      	adds	r3, r3, r1
 800658c:	212b      	movs	r1, #43	; 0x2b
 800658e:	7019      	strb	r1, [r3, #0]
 8006590:	782b      	ldrb	r3, [r5, #0]
 8006592:	2b2a      	cmp	r3, #42	; 0x2a
 8006594:	d016      	beq.n	80065c4 <_vfiprintf_r+0x124>
 8006596:	002e      	movs	r6, r5
 8006598:	2100      	movs	r1, #0
 800659a:	200a      	movs	r0, #10
 800659c:	68e3      	ldr	r3, [r4, #12]
 800659e:	7832      	ldrb	r2, [r6, #0]
 80065a0:	1c75      	adds	r5, r6, #1
 80065a2:	3a30      	subs	r2, #48	; 0x30
 80065a4:	2a09      	cmp	r2, #9
 80065a6:	d94e      	bls.n	8006646 <_vfiprintf_r+0x1a6>
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d111      	bne.n	80065d0 <_vfiprintf_r+0x130>
 80065ac:	e017      	b.n	80065de <_vfiprintf_r+0x13e>
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7af      	b.n	8006512 <_vfiprintf_r+0x72>
 80065b2:	9b05      	ldr	r3, [sp, #20]
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	1ac0      	subs	r0, r0, r3
 80065b8:	2301      	movs	r3, #1
 80065ba:	4083      	lsls	r3, r0
 80065bc:	4313      	orrs	r3, r2
 80065be:	0035      	movs	r5, r6
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	e7cc      	b.n	800655e <_vfiprintf_r+0xbe>
 80065c4:	9b07      	ldr	r3, [sp, #28]
 80065c6:	1d19      	adds	r1, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	9107      	str	r1, [sp, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	db01      	blt.n	80065d4 <_vfiprintf_r+0x134>
 80065d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d2:	e004      	b.n	80065de <_vfiprintf_r+0x13e>
 80065d4:	425b      	negs	r3, r3
 80065d6:	60e3      	str	r3, [r4, #12]
 80065d8:	2302      	movs	r3, #2
 80065da:	4313      	orrs	r3, r2
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	7833      	ldrb	r3, [r6, #0]
 80065e0:	2b2e      	cmp	r3, #46	; 0x2e
 80065e2:	d10a      	bne.n	80065fa <_vfiprintf_r+0x15a>
 80065e4:	7873      	ldrb	r3, [r6, #1]
 80065e6:	2b2a      	cmp	r3, #42	; 0x2a
 80065e8:	d135      	bne.n	8006656 <_vfiprintf_r+0x1b6>
 80065ea:	9b07      	ldr	r3, [sp, #28]
 80065ec:	3602      	adds	r6, #2
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	9207      	str	r2, [sp, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	db2b      	blt.n	8006650 <_vfiprintf_r+0x1b0>
 80065f8:	9309      	str	r3, [sp, #36]	; 0x24
 80065fa:	4d33      	ldr	r5, [pc, #204]	; (80066c8 <_vfiprintf_r+0x228>)
 80065fc:	2203      	movs	r2, #3
 80065fe:	0028      	movs	r0, r5
 8006600:	7831      	ldrb	r1, [r6, #0]
 8006602:	f000 fb57 	bl	8006cb4 <memchr>
 8006606:	2800      	cmp	r0, #0
 8006608:	d006      	beq.n	8006618 <_vfiprintf_r+0x178>
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	1b40      	subs	r0, r0, r5
 800660e:	4083      	lsls	r3, r0
 8006610:	6822      	ldr	r2, [r4, #0]
 8006612:	3601      	adds	r6, #1
 8006614:	4313      	orrs	r3, r2
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	7831      	ldrb	r1, [r6, #0]
 800661a:	2206      	movs	r2, #6
 800661c:	482b      	ldr	r0, [pc, #172]	; (80066cc <_vfiprintf_r+0x22c>)
 800661e:	1c75      	adds	r5, r6, #1
 8006620:	7621      	strb	r1, [r4, #24]
 8006622:	f000 fb47 	bl	8006cb4 <memchr>
 8006626:	2800      	cmp	r0, #0
 8006628:	d043      	beq.n	80066b2 <_vfiprintf_r+0x212>
 800662a:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <_vfiprintf_r+0x230>)
 800662c:	2b00      	cmp	r3, #0
 800662e:	d125      	bne.n	800667c <_vfiprintf_r+0x1dc>
 8006630:	2207      	movs	r2, #7
 8006632:	9b07      	ldr	r3, [sp, #28]
 8006634:	3307      	adds	r3, #7
 8006636:	4393      	bics	r3, r2
 8006638:	3308      	adds	r3, #8
 800663a:	9307      	str	r3, [sp, #28]
 800663c:	6963      	ldr	r3, [r4, #20]
 800663e:	9a04      	ldr	r2, [sp, #16]
 8006640:	189b      	adds	r3, r3, r2
 8006642:	6163      	str	r3, [r4, #20]
 8006644:	e764      	b.n	8006510 <_vfiprintf_r+0x70>
 8006646:	4343      	muls	r3, r0
 8006648:	002e      	movs	r6, r5
 800664a:	2101      	movs	r1, #1
 800664c:	189b      	adds	r3, r3, r2
 800664e:	e7a6      	b.n	800659e <_vfiprintf_r+0xfe>
 8006650:	2301      	movs	r3, #1
 8006652:	425b      	negs	r3, r3
 8006654:	e7d0      	b.n	80065f8 <_vfiprintf_r+0x158>
 8006656:	2300      	movs	r3, #0
 8006658:	200a      	movs	r0, #10
 800665a:	001a      	movs	r2, r3
 800665c:	3601      	adds	r6, #1
 800665e:	6063      	str	r3, [r4, #4]
 8006660:	7831      	ldrb	r1, [r6, #0]
 8006662:	1c75      	adds	r5, r6, #1
 8006664:	3930      	subs	r1, #48	; 0x30
 8006666:	2909      	cmp	r1, #9
 8006668:	d903      	bls.n	8006672 <_vfiprintf_r+0x1d2>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c5      	beq.n	80065fa <_vfiprintf_r+0x15a>
 800666e:	9209      	str	r2, [sp, #36]	; 0x24
 8006670:	e7c3      	b.n	80065fa <_vfiprintf_r+0x15a>
 8006672:	4342      	muls	r2, r0
 8006674:	002e      	movs	r6, r5
 8006676:	2301      	movs	r3, #1
 8006678:	1852      	adds	r2, r2, r1
 800667a:	e7f1      	b.n	8006660 <_vfiprintf_r+0x1c0>
 800667c:	aa07      	add	r2, sp, #28
 800667e:	9200      	str	r2, [sp, #0]
 8006680:	0021      	movs	r1, r4
 8006682:	003a      	movs	r2, r7
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <_vfiprintf_r+0x234>)
 8006686:	9803      	ldr	r0, [sp, #12]
 8006688:	e000      	b.n	800668c <_vfiprintf_r+0x1ec>
 800668a:	bf00      	nop
 800668c:	9004      	str	r0, [sp, #16]
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	3301      	adds	r3, #1
 8006692:	d1d3      	bne.n	800663c <_vfiprintf_r+0x19c>
 8006694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006696:	07db      	lsls	r3, r3, #31
 8006698:	d405      	bmi.n	80066a6 <_vfiprintf_r+0x206>
 800669a:	89bb      	ldrh	r3, [r7, #12]
 800669c:	059b      	lsls	r3, r3, #22
 800669e:	d402      	bmi.n	80066a6 <_vfiprintf_r+0x206>
 80066a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80066a2:	f7ff fdd5 	bl	8006250 <__retarget_lock_release_recursive>
 80066a6:	89bb      	ldrh	r3, [r7, #12]
 80066a8:	065b      	lsls	r3, r3, #25
 80066aa:	d500      	bpl.n	80066ae <_vfiprintf_r+0x20e>
 80066ac:	e71d      	b.n	80064ea <_vfiprintf_r+0x4a>
 80066ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80066b0:	e71d      	b.n	80064ee <_vfiprintf_r+0x4e>
 80066b2:	aa07      	add	r2, sp, #28
 80066b4:	9200      	str	r2, [sp, #0]
 80066b6:	0021      	movs	r1, r4
 80066b8:	003a      	movs	r2, r7
 80066ba:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <_vfiprintf_r+0x234>)
 80066bc:	9803      	ldr	r0, [sp, #12]
 80066be:	f000 f87b 	bl	80067b8 <_printf_i>
 80066c2:	e7e3      	b.n	800668c <_vfiprintf_r+0x1ec>
 80066c4:	080083ac 	.word	0x080083ac
 80066c8:	080083b2 	.word	0x080083b2
 80066cc:	080083b6 	.word	0x080083b6
 80066d0:	00000000 	.word	0x00000000
 80066d4:	0800647b 	.word	0x0800647b

080066d8 <_printf_common>:
 80066d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066da:	0016      	movs	r6, r2
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	688a      	ldr	r2, [r1, #8]
 80066e0:	690b      	ldr	r3, [r1, #16]
 80066e2:	000c      	movs	r4, r1
 80066e4:	9000      	str	r0, [sp, #0]
 80066e6:	4293      	cmp	r3, r2
 80066e8:	da00      	bge.n	80066ec <_printf_common+0x14>
 80066ea:	0013      	movs	r3, r2
 80066ec:	0022      	movs	r2, r4
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	3243      	adds	r2, #67	; 0x43
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	d001      	beq.n	80066fc <_printf_common+0x24>
 80066f8:	3301      	adds	r3, #1
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	069b      	lsls	r3, r3, #26
 8006700:	d502      	bpl.n	8006708 <_printf_common+0x30>
 8006702:	6833      	ldr	r3, [r6, #0]
 8006704:	3302      	adds	r3, #2
 8006706:	6033      	str	r3, [r6, #0]
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	2306      	movs	r3, #6
 800670c:	0015      	movs	r5, r2
 800670e:	401d      	ands	r5, r3
 8006710:	421a      	tst	r2, r3
 8006712:	d027      	beq.n	8006764 <_printf_common+0x8c>
 8006714:	0023      	movs	r3, r4
 8006716:	3343      	adds	r3, #67	; 0x43
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	1e5a      	subs	r2, r3, #1
 800671c:	4193      	sbcs	r3, r2
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	0692      	lsls	r2, r2, #26
 8006722:	d430      	bmi.n	8006786 <_printf_common+0xae>
 8006724:	0022      	movs	r2, r4
 8006726:	9901      	ldr	r1, [sp, #4]
 8006728:	9800      	ldr	r0, [sp, #0]
 800672a:	9d08      	ldr	r5, [sp, #32]
 800672c:	3243      	adds	r2, #67	; 0x43
 800672e:	47a8      	blx	r5
 8006730:	3001      	adds	r0, #1
 8006732:	d025      	beq.n	8006780 <_printf_common+0xa8>
 8006734:	2206      	movs	r2, #6
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	2500      	movs	r5, #0
 800673a:	4013      	ands	r3, r2
 800673c:	2b04      	cmp	r3, #4
 800673e:	d105      	bne.n	800674c <_printf_common+0x74>
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	68e5      	ldr	r5, [r4, #12]
 8006744:	1aed      	subs	r5, r5, r3
 8006746:	43eb      	mvns	r3, r5
 8006748:	17db      	asrs	r3, r3, #31
 800674a:	401d      	ands	r5, r3
 800674c:	68a3      	ldr	r3, [r4, #8]
 800674e:	6922      	ldr	r2, [r4, #16]
 8006750:	4293      	cmp	r3, r2
 8006752:	dd01      	ble.n	8006758 <_printf_common+0x80>
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	18ed      	adds	r5, r5, r3
 8006758:	2600      	movs	r6, #0
 800675a:	42b5      	cmp	r5, r6
 800675c:	d120      	bne.n	80067a0 <_printf_common+0xc8>
 800675e:	2000      	movs	r0, #0
 8006760:	e010      	b.n	8006784 <_printf_common+0xac>
 8006762:	3501      	adds	r5, #1
 8006764:	68e3      	ldr	r3, [r4, #12]
 8006766:	6832      	ldr	r2, [r6, #0]
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	42ab      	cmp	r3, r5
 800676c:	ddd2      	ble.n	8006714 <_printf_common+0x3c>
 800676e:	0022      	movs	r2, r4
 8006770:	2301      	movs	r3, #1
 8006772:	9901      	ldr	r1, [sp, #4]
 8006774:	9800      	ldr	r0, [sp, #0]
 8006776:	9f08      	ldr	r7, [sp, #32]
 8006778:	3219      	adds	r2, #25
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	d1f0      	bne.n	8006762 <_printf_common+0x8a>
 8006780:	2001      	movs	r0, #1
 8006782:	4240      	negs	r0, r0
 8006784:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006786:	2030      	movs	r0, #48	; 0x30
 8006788:	18e1      	adds	r1, r4, r3
 800678a:	3143      	adds	r1, #67	; 0x43
 800678c:	7008      	strb	r0, [r1, #0]
 800678e:	0021      	movs	r1, r4
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	3145      	adds	r1, #69	; 0x45
 8006794:	7809      	ldrb	r1, [r1, #0]
 8006796:	18a2      	adds	r2, r4, r2
 8006798:	3243      	adds	r2, #67	; 0x43
 800679a:	3302      	adds	r3, #2
 800679c:	7011      	strb	r1, [r2, #0]
 800679e:	e7c1      	b.n	8006724 <_printf_common+0x4c>
 80067a0:	0022      	movs	r2, r4
 80067a2:	2301      	movs	r3, #1
 80067a4:	9901      	ldr	r1, [sp, #4]
 80067a6:	9800      	ldr	r0, [sp, #0]
 80067a8:	9f08      	ldr	r7, [sp, #32]
 80067aa:	321a      	adds	r2, #26
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	d0e6      	beq.n	8006780 <_printf_common+0xa8>
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7d1      	b.n	800675a <_printf_common+0x82>
	...

080067b8 <_printf_i>:
 80067b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ba:	b08b      	sub	sp, #44	; 0x2c
 80067bc:	9206      	str	r2, [sp, #24]
 80067be:	000a      	movs	r2, r1
 80067c0:	3243      	adds	r2, #67	; 0x43
 80067c2:	9307      	str	r3, [sp, #28]
 80067c4:	9005      	str	r0, [sp, #20]
 80067c6:	9204      	str	r2, [sp, #16]
 80067c8:	7e0a      	ldrb	r2, [r1, #24]
 80067ca:	000c      	movs	r4, r1
 80067cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ce:	2a78      	cmp	r2, #120	; 0x78
 80067d0:	d809      	bhi.n	80067e6 <_printf_i+0x2e>
 80067d2:	2a62      	cmp	r2, #98	; 0x62
 80067d4:	d80b      	bhi.n	80067ee <_printf_i+0x36>
 80067d6:	2a00      	cmp	r2, #0
 80067d8:	d100      	bne.n	80067dc <_printf_i+0x24>
 80067da:	e0be      	b.n	800695a <_printf_i+0x1a2>
 80067dc:	497c      	ldr	r1, [pc, #496]	; (80069d0 <_printf_i+0x218>)
 80067de:	9103      	str	r1, [sp, #12]
 80067e0:	2a58      	cmp	r2, #88	; 0x58
 80067e2:	d100      	bne.n	80067e6 <_printf_i+0x2e>
 80067e4:	e093      	b.n	800690e <_printf_i+0x156>
 80067e6:	0026      	movs	r6, r4
 80067e8:	3642      	adds	r6, #66	; 0x42
 80067ea:	7032      	strb	r2, [r6, #0]
 80067ec:	e022      	b.n	8006834 <_printf_i+0x7c>
 80067ee:	0010      	movs	r0, r2
 80067f0:	3863      	subs	r0, #99	; 0x63
 80067f2:	2815      	cmp	r0, #21
 80067f4:	d8f7      	bhi.n	80067e6 <_printf_i+0x2e>
 80067f6:	f7f9 fc85 	bl	8000104 <__gnu_thumb1_case_shi>
 80067fa:	0016      	.short	0x0016
 80067fc:	fff6001f 	.word	0xfff6001f
 8006800:	fff6fff6 	.word	0xfff6fff6
 8006804:	001ffff6 	.word	0x001ffff6
 8006808:	fff6fff6 	.word	0xfff6fff6
 800680c:	fff6fff6 	.word	0xfff6fff6
 8006810:	003600a3 	.word	0x003600a3
 8006814:	fff60083 	.word	0xfff60083
 8006818:	00b4fff6 	.word	0x00b4fff6
 800681c:	0036fff6 	.word	0x0036fff6
 8006820:	fff6fff6 	.word	0xfff6fff6
 8006824:	0087      	.short	0x0087
 8006826:	0026      	movs	r6, r4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	3642      	adds	r6, #66	; 0x42
 800682c:	1d11      	adds	r1, r2, #4
 800682e:	6019      	str	r1, [r3, #0]
 8006830:	6813      	ldr	r3, [r2, #0]
 8006832:	7033      	strb	r3, [r6, #0]
 8006834:	2301      	movs	r3, #1
 8006836:	e0a2      	b.n	800697e <_printf_i+0x1c6>
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	6809      	ldr	r1, [r1, #0]
 800683c:	1d02      	adds	r2, r0, #4
 800683e:	060d      	lsls	r5, r1, #24
 8006840:	d50b      	bpl.n	800685a <_printf_i+0xa2>
 8006842:	6805      	ldr	r5, [r0, #0]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	2d00      	cmp	r5, #0
 8006848:	da03      	bge.n	8006852 <_printf_i+0x9a>
 800684a:	232d      	movs	r3, #45	; 0x2d
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	426d      	negs	r5, r5
 8006850:	7013      	strb	r3, [r2, #0]
 8006852:	4b5f      	ldr	r3, [pc, #380]	; (80069d0 <_printf_i+0x218>)
 8006854:	270a      	movs	r7, #10
 8006856:	9303      	str	r3, [sp, #12]
 8006858:	e01b      	b.n	8006892 <_printf_i+0xda>
 800685a:	6805      	ldr	r5, [r0, #0]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	0649      	lsls	r1, r1, #25
 8006860:	d5f1      	bpl.n	8006846 <_printf_i+0x8e>
 8006862:	b22d      	sxth	r5, r5
 8006864:	e7ef      	b.n	8006846 <_printf_i+0x8e>
 8006866:	680d      	ldr	r5, [r1, #0]
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	1d08      	adds	r0, r1, #4
 800686c:	6018      	str	r0, [r3, #0]
 800686e:	062e      	lsls	r6, r5, #24
 8006870:	d501      	bpl.n	8006876 <_printf_i+0xbe>
 8006872:	680d      	ldr	r5, [r1, #0]
 8006874:	e003      	b.n	800687e <_printf_i+0xc6>
 8006876:	066d      	lsls	r5, r5, #25
 8006878:	d5fb      	bpl.n	8006872 <_printf_i+0xba>
 800687a:	680d      	ldr	r5, [r1, #0]
 800687c:	b2ad      	uxth	r5, r5
 800687e:	4b54      	ldr	r3, [pc, #336]	; (80069d0 <_printf_i+0x218>)
 8006880:	2708      	movs	r7, #8
 8006882:	9303      	str	r3, [sp, #12]
 8006884:	2a6f      	cmp	r2, #111	; 0x6f
 8006886:	d000      	beq.n	800688a <_printf_i+0xd2>
 8006888:	3702      	adds	r7, #2
 800688a:	0023      	movs	r3, r4
 800688c:	2200      	movs	r2, #0
 800688e:	3343      	adds	r3, #67	; 0x43
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	db03      	blt.n	80068a2 <_printf_i+0xea>
 800689a:	2104      	movs	r1, #4
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	438a      	bics	r2, r1
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	2d00      	cmp	r5, #0
 80068a4:	d102      	bne.n	80068ac <_printf_i+0xf4>
 80068a6:	9e04      	ldr	r6, [sp, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00c      	beq.n	80068c6 <_printf_i+0x10e>
 80068ac:	9e04      	ldr	r6, [sp, #16]
 80068ae:	0028      	movs	r0, r5
 80068b0:	0039      	movs	r1, r7
 80068b2:	f7f9 fcb7 	bl	8000224 <__aeabi_uidivmod>
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	3e01      	subs	r6, #1
 80068ba:	5c5b      	ldrb	r3, [r3, r1]
 80068bc:	7033      	strb	r3, [r6, #0]
 80068be:	002b      	movs	r3, r5
 80068c0:	0005      	movs	r5, r0
 80068c2:	429f      	cmp	r7, r3
 80068c4:	d9f3      	bls.n	80068ae <_printf_i+0xf6>
 80068c6:	2f08      	cmp	r7, #8
 80068c8:	d109      	bne.n	80068de <_printf_i+0x126>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	07db      	lsls	r3, r3, #31
 80068ce:	d506      	bpl.n	80068de <_printf_i+0x126>
 80068d0:	6862      	ldr	r2, [r4, #4]
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	dc02      	bgt.n	80068de <_printf_i+0x126>
 80068d8:	2330      	movs	r3, #48	; 0x30
 80068da:	3e01      	subs	r6, #1
 80068dc:	7033      	strb	r3, [r6, #0]
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	1b9b      	subs	r3, r3, r6
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	0021      	movs	r1, r4
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	9805      	ldr	r0, [sp, #20]
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	aa09      	add	r2, sp, #36	; 0x24
 80068f0:	f7ff fef2 	bl	80066d8 <_printf_common>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d147      	bne.n	8006988 <_printf_i+0x1d0>
 80068f8:	2001      	movs	r0, #1
 80068fa:	4240      	negs	r0, r0
 80068fc:	b00b      	add	sp, #44	; 0x2c
 80068fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006900:	2220      	movs	r2, #32
 8006902:	6809      	ldr	r1, [r1, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	2278      	movs	r2, #120	; 0x78
 800690a:	4932      	ldr	r1, [pc, #200]	; (80069d4 <_printf_i+0x21c>)
 800690c:	9103      	str	r1, [sp, #12]
 800690e:	0021      	movs	r1, r4
 8006910:	3145      	adds	r1, #69	; 0x45
 8006912:	700a      	strb	r2, [r1, #0]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	c920      	ldmia	r1!, {r5}
 800691a:	0610      	lsls	r0, r2, #24
 800691c:	d402      	bmi.n	8006924 <_printf_i+0x16c>
 800691e:	0650      	lsls	r0, r2, #25
 8006920:	d500      	bpl.n	8006924 <_printf_i+0x16c>
 8006922:	b2ad      	uxth	r5, r5
 8006924:	6019      	str	r1, [r3, #0]
 8006926:	07d3      	lsls	r3, r2, #31
 8006928:	d502      	bpl.n	8006930 <_printf_i+0x178>
 800692a:	2320      	movs	r3, #32
 800692c:	4313      	orrs	r3, r2
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	2710      	movs	r7, #16
 8006932:	2d00      	cmp	r5, #0
 8006934:	d1a9      	bne.n	800688a <_printf_i+0xd2>
 8006936:	2220      	movs	r2, #32
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	4393      	bics	r3, r2
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	e7a4      	b.n	800688a <_printf_i+0xd2>
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	680d      	ldr	r5, [r1, #0]
 8006944:	1d10      	adds	r0, r2, #4
 8006946:	6949      	ldr	r1, [r1, #20]
 8006948:	6018      	str	r0, [r3, #0]
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	062e      	lsls	r6, r5, #24
 800694e:	d501      	bpl.n	8006954 <_printf_i+0x19c>
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	e002      	b.n	800695a <_printf_i+0x1a2>
 8006954:	066d      	lsls	r5, r5, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0x198>
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	2300      	movs	r3, #0
 800695c:	9e04      	ldr	r6, [sp, #16]
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	e7c0      	b.n	80068e4 <_printf_i+0x12c>
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	1d11      	adds	r1, r2, #4
 8006966:	6019      	str	r1, [r3, #0]
 8006968:	6816      	ldr	r6, [r2, #0]
 800696a:	2100      	movs	r1, #0
 800696c:	0030      	movs	r0, r6
 800696e:	6862      	ldr	r2, [r4, #4]
 8006970:	f000 f9a0 	bl	8006cb4 <memchr>
 8006974:	2800      	cmp	r0, #0
 8006976:	d001      	beq.n	800697c <_printf_i+0x1c4>
 8006978:	1b80      	subs	r0, r0, r6
 800697a:	6060      	str	r0, [r4, #4]
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	2300      	movs	r3, #0
 8006982:	9a04      	ldr	r2, [sp, #16]
 8006984:	7013      	strb	r3, [r2, #0]
 8006986:	e7ad      	b.n	80068e4 <_printf_i+0x12c>
 8006988:	0032      	movs	r2, r6
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	9906      	ldr	r1, [sp, #24]
 800698e:	9805      	ldr	r0, [sp, #20]
 8006990:	9d07      	ldr	r5, [sp, #28]
 8006992:	47a8      	blx	r5
 8006994:	3001      	adds	r0, #1
 8006996:	d0af      	beq.n	80068f8 <_printf_i+0x140>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	079b      	lsls	r3, r3, #30
 800699c:	d415      	bmi.n	80069ca <_printf_i+0x212>
 800699e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a0:	68e0      	ldr	r0, [r4, #12]
 80069a2:	4298      	cmp	r0, r3
 80069a4:	daaa      	bge.n	80068fc <_printf_i+0x144>
 80069a6:	0018      	movs	r0, r3
 80069a8:	e7a8      	b.n	80068fc <_printf_i+0x144>
 80069aa:	0022      	movs	r2, r4
 80069ac:	2301      	movs	r3, #1
 80069ae:	9906      	ldr	r1, [sp, #24]
 80069b0:	9805      	ldr	r0, [sp, #20]
 80069b2:	9e07      	ldr	r6, [sp, #28]
 80069b4:	3219      	adds	r2, #25
 80069b6:	47b0      	blx	r6
 80069b8:	3001      	adds	r0, #1
 80069ba:	d09d      	beq.n	80068f8 <_printf_i+0x140>
 80069bc:	3501      	adds	r5, #1
 80069be:	68e3      	ldr	r3, [r4, #12]
 80069c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	42ab      	cmp	r3, r5
 80069c6:	dcf0      	bgt.n	80069aa <_printf_i+0x1f2>
 80069c8:	e7e9      	b.n	800699e <_printf_i+0x1e6>
 80069ca:	2500      	movs	r5, #0
 80069cc:	e7f7      	b.n	80069be <_printf_i+0x206>
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	080083bd 	.word	0x080083bd
 80069d4:	080083ce 	.word	0x080083ce

080069d8 <__sflush_r>:
 80069d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069da:	898b      	ldrh	r3, [r1, #12]
 80069dc:	0005      	movs	r5, r0
 80069de:	000c      	movs	r4, r1
 80069e0:	071a      	lsls	r2, r3, #28
 80069e2:	d45c      	bmi.n	8006a9e <__sflush_r+0xc6>
 80069e4:	684a      	ldr	r2, [r1, #4]
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	dc04      	bgt.n	80069f4 <__sflush_r+0x1c>
 80069ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	dc01      	bgt.n	80069f4 <__sflush_r+0x1c>
 80069f0:	2000      	movs	r0, #0
 80069f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	d0fa      	beq.n	80069f0 <__sflush_r+0x18>
 80069fa:	2200      	movs	r2, #0
 80069fc:	2080      	movs	r0, #128	; 0x80
 80069fe:	682e      	ldr	r6, [r5, #0]
 8006a00:	602a      	str	r2, [r5, #0]
 8006a02:	001a      	movs	r2, r3
 8006a04:	0140      	lsls	r0, r0, #5
 8006a06:	6a21      	ldr	r1, [r4, #32]
 8006a08:	4002      	ands	r2, r0
 8006a0a:	4203      	tst	r3, r0
 8006a0c:	d034      	beq.n	8006a78 <__sflush_r+0xa0>
 8006a0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	075b      	lsls	r3, r3, #29
 8006a14:	d506      	bpl.n	8006a24 <__sflush_r+0x4c>
 8006a16:	6863      	ldr	r3, [r4, #4]
 8006a18:	1ac0      	subs	r0, r0, r3
 8006a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <__sflush_r+0x4c>
 8006a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a22:	1ac0      	subs	r0, r0, r3
 8006a24:	0002      	movs	r2, r0
 8006a26:	2300      	movs	r3, #0
 8006a28:	0028      	movs	r0, r5
 8006a2a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	47b8      	blx	r7
 8006a30:	89a2      	ldrh	r2, [r4, #12]
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	d106      	bne.n	8006a44 <__sflush_r+0x6c>
 8006a36:	6829      	ldr	r1, [r5, #0]
 8006a38:	291d      	cmp	r1, #29
 8006a3a:	d82c      	bhi.n	8006a96 <__sflush_r+0xbe>
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	; (8006ae8 <__sflush_r+0x110>)
 8006a3e:	410b      	asrs	r3, r1
 8006a40:	07db      	lsls	r3, r3, #31
 8006a42:	d428      	bmi.n	8006a96 <__sflush_r+0xbe>
 8006a44:	2300      	movs	r3, #0
 8006a46:	6063      	str	r3, [r4, #4]
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	04d2      	lsls	r2, r2, #19
 8006a4e:	d505      	bpl.n	8006a5c <__sflush_r+0x84>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <__sflush_r+0x82>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d100      	bne.n	8006a5c <__sflush_r+0x84>
 8006a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a5e:	602e      	str	r6, [r5, #0]
 8006a60:	2900      	cmp	r1, #0
 8006a62:	d0c5      	beq.n	80069f0 <__sflush_r+0x18>
 8006a64:	0023      	movs	r3, r4
 8006a66:	3344      	adds	r3, #68	; 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__sflush_r+0x9a>
 8006a6c:	0028      	movs	r0, r5
 8006a6e:	f7ff fbf1 	bl	8006254 <_free_r>
 8006a72:	2000      	movs	r0, #0
 8006a74:	6360      	str	r0, [r4, #52]	; 0x34
 8006a76:	e7bc      	b.n	80069f2 <__sflush_r+0x1a>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	0028      	movs	r0, r5
 8006a7c:	47b8      	blx	r7
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d1c6      	bne.n	8006a10 <__sflush_r+0x38>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0c3      	beq.n	8006a10 <__sflush_r+0x38>
 8006a88:	2b1d      	cmp	r3, #29
 8006a8a:	d001      	beq.n	8006a90 <__sflush_r+0xb8>
 8006a8c:	2b16      	cmp	r3, #22
 8006a8e:	d101      	bne.n	8006a94 <__sflush_r+0xbc>
 8006a90:	602e      	str	r6, [r5, #0]
 8006a92:	e7ad      	b.n	80069f0 <__sflush_r+0x18>
 8006a94:	89a2      	ldrh	r2, [r4, #12]
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	e7a9      	b.n	80069f2 <__sflush_r+0x1a>
 8006a9e:	690e      	ldr	r6, [r1, #16]
 8006aa0:	2e00      	cmp	r6, #0
 8006aa2:	d0a5      	beq.n	80069f0 <__sflush_r+0x18>
 8006aa4:	680f      	ldr	r7, [r1, #0]
 8006aa6:	600e      	str	r6, [r1, #0]
 8006aa8:	1bba      	subs	r2, r7, r6
 8006aaa:	9201      	str	r2, [sp, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	079b      	lsls	r3, r3, #30
 8006ab0:	d100      	bne.n	8006ab4 <__sflush_r+0xdc>
 8006ab2:	694a      	ldr	r2, [r1, #20]
 8006ab4:	60a2      	str	r2, [r4, #8]
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dd99      	ble.n	80069f0 <__sflush_r+0x18>
 8006abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006abe:	0032      	movs	r2, r6
 8006ac0:	001f      	movs	r7, r3
 8006ac2:	0028      	movs	r0, r5
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	6a21      	ldr	r1, [r4, #32]
 8006ac8:	47b8      	blx	r7
 8006aca:	2800      	cmp	r0, #0
 8006acc:	dc06      	bgt.n	8006adc <__sflush_r+0x104>
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	89a2      	ldrh	r2, [r4, #12]
 8006ad4:	4240      	negs	r0, r0
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	e78a      	b.n	80069f2 <__sflush_r+0x1a>
 8006adc:	9b01      	ldr	r3, [sp, #4]
 8006ade:	1836      	adds	r6, r6, r0
 8006ae0:	1a1b      	subs	r3, r3, r0
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	e7e7      	b.n	8006ab6 <__sflush_r+0xde>
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	dfbffffe 	.word	0xdfbffffe

08006aec <_fflush_r>:
 8006aec:	690b      	ldr	r3, [r1, #16]
 8006aee:	b570      	push	{r4, r5, r6, lr}
 8006af0:	0005      	movs	r5, r0
 8006af2:	000c      	movs	r4, r1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <_fflush_r+0x12>
 8006af8:	2500      	movs	r5, #0
 8006afa:	0028      	movs	r0, r5
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d004      	beq.n	8006b0c <_fflush_r+0x20>
 8006b02:	6a03      	ldr	r3, [r0, #32]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <_fflush_r+0x20>
 8006b08:	f7ff fa90 	bl	800602c <__sinit>
 8006b0c:	220c      	movs	r2, #12
 8006b0e:	5ea3      	ldrsh	r3, [r4, r2]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f1      	beq.n	8006af8 <_fflush_r+0xc>
 8006b14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b16:	07d2      	lsls	r2, r2, #31
 8006b18:	d404      	bmi.n	8006b24 <_fflush_r+0x38>
 8006b1a:	059b      	lsls	r3, r3, #22
 8006b1c:	d402      	bmi.n	8006b24 <_fflush_r+0x38>
 8006b1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b20:	f7ff fb95 	bl	800624e <__retarget_lock_acquire_recursive>
 8006b24:	0028      	movs	r0, r5
 8006b26:	0021      	movs	r1, r4
 8006b28:	f7ff ff56 	bl	80069d8 <__sflush_r>
 8006b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b2e:	0005      	movs	r5, r0
 8006b30:	07db      	lsls	r3, r3, #31
 8006b32:	d4e2      	bmi.n	8006afa <_fflush_r+0xe>
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	059b      	lsls	r3, r3, #22
 8006b38:	d4df      	bmi.n	8006afa <_fflush_r+0xe>
 8006b3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3c:	f7ff fb88 	bl	8006250 <__retarget_lock_release_recursive>
 8006b40:	e7db      	b.n	8006afa <_fflush_r+0xe>

08006b42 <__swbuf_r>:
 8006b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b44:	0006      	movs	r6, r0
 8006b46:	000d      	movs	r5, r1
 8006b48:	0014      	movs	r4, r2
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d004      	beq.n	8006b58 <__swbuf_r+0x16>
 8006b4e:	6a03      	ldr	r3, [r0, #32]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <__swbuf_r+0x16>
 8006b54:	f7ff fa6a 	bl	800602c <__sinit>
 8006b58:	69a3      	ldr	r3, [r4, #24]
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	071b      	lsls	r3, r3, #28
 8006b60:	d528      	bpl.n	8006bb4 <__swbuf_r+0x72>
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d025      	beq.n	8006bb4 <__swbuf_r+0x72>
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	6820      	ldr	r0, [r4, #0]
 8006b6c:	b2ef      	uxtb	r7, r5
 8006b6e:	1ac0      	subs	r0, r0, r3
 8006b70:	6963      	ldr	r3, [r4, #20]
 8006b72:	b2ed      	uxtb	r5, r5
 8006b74:	4283      	cmp	r3, r0
 8006b76:	dc05      	bgt.n	8006b84 <__swbuf_r+0x42>
 8006b78:	0021      	movs	r1, r4
 8006b7a:	0030      	movs	r0, r6
 8006b7c:	f7ff ffb6 	bl	8006aec <_fflush_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d11d      	bne.n	8006bc0 <__swbuf_r+0x7e>
 8006b84:	68a3      	ldr	r3, [r4, #8]
 8006b86:	3001      	adds	r0, #1
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	60a3      	str	r3, [r4, #8]
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	6022      	str	r2, [r4, #0]
 8006b92:	701f      	strb	r7, [r3, #0]
 8006b94:	6963      	ldr	r3, [r4, #20]
 8006b96:	4283      	cmp	r3, r0
 8006b98:	d004      	beq.n	8006ba4 <__swbuf_r+0x62>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	07db      	lsls	r3, r3, #31
 8006b9e:	d507      	bpl.n	8006bb0 <__swbuf_r+0x6e>
 8006ba0:	2d0a      	cmp	r5, #10
 8006ba2:	d105      	bne.n	8006bb0 <__swbuf_r+0x6e>
 8006ba4:	0021      	movs	r1, r4
 8006ba6:	0030      	movs	r0, r6
 8006ba8:	f7ff ffa0 	bl	8006aec <_fflush_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d107      	bne.n	8006bc0 <__swbuf_r+0x7e>
 8006bb0:	0028      	movs	r0, r5
 8006bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb4:	0021      	movs	r1, r4
 8006bb6:	0030      	movs	r0, r6
 8006bb8:	f000 f806 	bl	8006bc8 <__swsetup_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d0d3      	beq.n	8006b68 <__swbuf_r+0x26>
 8006bc0:	2501      	movs	r5, #1
 8006bc2:	426d      	negs	r5, r5
 8006bc4:	e7f4      	b.n	8006bb0 <__swbuf_r+0x6e>
	...

08006bc8 <__swsetup_r>:
 8006bc8:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <__swsetup_r+0xc4>)
 8006bca:	b570      	push	{r4, r5, r6, lr}
 8006bcc:	0005      	movs	r5, r0
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	000c      	movs	r4, r1
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d004      	beq.n	8006be0 <__swsetup_r+0x18>
 8006bd6:	6a03      	ldr	r3, [r0, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <__swsetup_r+0x18>
 8006bdc:	f7ff fa26 	bl	800602c <__sinit>
 8006be0:	230c      	movs	r3, #12
 8006be2:	5ee2      	ldrsh	r2, [r4, r3]
 8006be4:	b293      	uxth	r3, r2
 8006be6:	0711      	lsls	r1, r2, #28
 8006be8:	d423      	bmi.n	8006c32 <__swsetup_r+0x6a>
 8006bea:	06d9      	lsls	r1, r3, #27
 8006bec:	d407      	bmi.n	8006bfe <__swsetup_r+0x36>
 8006bee:	2309      	movs	r3, #9
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	3337      	adds	r3, #55	; 0x37
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	4240      	negs	r0, r0
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	075b      	lsls	r3, r3, #29
 8006c00:	d513      	bpl.n	8006c2a <__swsetup_r+0x62>
 8006c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d008      	beq.n	8006c1a <__swsetup_r+0x52>
 8006c08:	0023      	movs	r3, r4
 8006c0a:	3344      	adds	r3, #68	; 0x44
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	d002      	beq.n	8006c16 <__swsetup_r+0x4e>
 8006c10:	0028      	movs	r0, r5
 8006c12:	f7ff fb1f 	bl	8006254 <_free_r>
 8006c16:	2300      	movs	r3, #0
 8006c18:	6363      	str	r3, [r4, #52]	; 0x34
 8006c1a:	2224      	movs	r2, #36	; 0x24
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	4393      	bics	r3, r2
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	2300      	movs	r3, #0
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	89a2      	ldrh	r2, [r4, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <__swsetup_r+0x88>
 8006c38:	21a0      	movs	r1, #160	; 0xa0
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	0089      	lsls	r1, r1, #2
 8006c40:	0092      	lsls	r2, r2, #2
 8006c42:	400b      	ands	r3, r1
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <__swsetup_r+0x88>
 8006c48:	0021      	movs	r1, r4
 8006c4a:	0028      	movs	r0, r5
 8006c4c:	f000 f866 	bl	8006d1c <__smakebuf_r>
 8006c50:	220c      	movs	r2, #12
 8006c52:	5ea3      	ldrsh	r3, [r4, r2]
 8006c54:	2001      	movs	r0, #1
 8006c56:	001a      	movs	r2, r3
 8006c58:	b299      	uxth	r1, r3
 8006c5a:	4002      	ands	r2, r0
 8006c5c:	4203      	tst	r3, r0
 8006c5e:	d00f      	beq.n	8006c80 <__swsetup_r+0xb8>
 8006c60:	2200      	movs	r2, #0
 8006c62:	60a2      	str	r2, [r4, #8]
 8006c64:	6962      	ldr	r2, [r4, #20]
 8006c66:	4252      	negs	r2, r2
 8006c68:	61a2      	str	r2, [r4, #24]
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	6922      	ldr	r2, [r4, #16]
 8006c6e:	4282      	cmp	r2, r0
 8006c70:	d1c4      	bne.n	8006bfc <__swsetup_r+0x34>
 8006c72:	0609      	lsls	r1, r1, #24
 8006c74:	d5c2      	bpl.n	8006bfc <__swsetup_r+0x34>
 8006c76:	2240      	movs	r2, #64	; 0x40
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	3801      	subs	r0, #1
 8006c7e:	e7bd      	b.n	8006bfc <__swsetup_r+0x34>
 8006c80:	0788      	lsls	r0, r1, #30
 8006c82:	d400      	bmi.n	8006c86 <__swsetup_r+0xbe>
 8006c84:	6962      	ldr	r2, [r4, #20]
 8006c86:	60a2      	str	r2, [r4, #8]
 8006c88:	e7ef      	b.n	8006c6a <__swsetup_r+0xa2>
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	20000070 	.word	0x20000070

08006c90 <_sbrk_r>:
 8006c90:	2300      	movs	r3, #0
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	4d06      	ldr	r5, [pc, #24]	; (8006cb0 <_sbrk_r+0x20>)
 8006c96:	0004      	movs	r4, r0
 8006c98:	0008      	movs	r0, r1
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	f7fc fbe4 	bl	8003468 <_sbrk>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d103      	bne.n	8006cac <_sbrk_r+0x1c>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d000      	beq.n	8006cac <_sbrk_r+0x1c>
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	bd70      	pop	{r4, r5, r6, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	20000354 	.word	0x20000354

08006cb4 <memchr>:
 8006cb4:	b2c9      	uxtb	r1, r1
 8006cb6:	1882      	adds	r2, r0, r2
 8006cb8:	4290      	cmp	r0, r2
 8006cba:	d101      	bne.n	8006cc0 <memchr+0xc>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4770      	bx	lr
 8006cc0:	7803      	ldrb	r3, [r0, #0]
 8006cc2:	428b      	cmp	r3, r1
 8006cc4:	d0fb      	beq.n	8006cbe <memchr+0xa>
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	e7f6      	b.n	8006cb8 <memchr+0x4>
	...

08006ccc <__swhatbuf_r>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	000e      	movs	r6, r1
 8006cd0:	001d      	movs	r5, r3
 8006cd2:	230e      	movs	r3, #14
 8006cd4:	5ec9      	ldrsh	r1, [r1, r3]
 8006cd6:	0014      	movs	r4, r2
 8006cd8:	b096      	sub	sp, #88	; 0x58
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	da0c      	bge.n	8006cf8 <__swhatbuf_r+0x2c>
 8006cde:	89b2      	ldrh	r2, [r6, #12]
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	0011      	movs	r1, r2
 8006ce4:	4019      	ands	r1, r3
 8006ce6:	421a      	tst	r2, r3
 8006ce8:	d013      	beq.n	8006d12 <__swhatbuf_r+0x46>
 8006cea:	2100      	movs	r1, #0
 8006cec:	3b40      	subs	r3, #64	; 0x40
 8006cee:	2000      	movs	r0, #0
 8006cf0:	6029      	str	r1, [r5, #0]
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	b016      	add	sp, #88	; 0x58
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	466a      	mov	r2, sp
 8006cfa:	f000 f84d 	bl	8006d98 <_fstat_r>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	dbed      	blt.n	8006cde <__swhatbuf_r+0x12>
 8006d02:	23f0      	movs	r3, #240	; 0xf0
 8006d04:	9901      	ldr	r1, [sp, #4]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	4019      	ands	r1, r3
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <__swhatbuf_r+0x4c>)
 8006d0c:	18c9      	adds	r1, r1, r3
 8006d0e:	424b      	negs	r3, r1
 8006d10:	4159      	adcs	r1, r3
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	e7ea      	b.n	8006cee <__swhatbuf_r+0x22>
 8006d18:	ffffe000 	.word	0xffffe000

08006d1c <__smakebuf_r>:
 8006d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d1e:	2602      	movs	r6, #2
 8006d20:	898b      	ldrh	r3, [r1, #12]
 8006d22:	0005      	movs	r5, r0
 8006d24:	000c      	movs	r4, r1
 8006d26:	4233      	tst	r3, r6
 8006d28:	d006      	beq.n	8006d38 <__smakebuf_r+0x1c>
 8006d2a:	0023      	movs	r3, r4
 8006d2c:	3347      	adds	r3, #71	; 0x47
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	2301      	movs	r3, #1
 8006d34:	6163      	str	r3, [r4, #20]
 8006d36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006d38:	466a      	mov	r2, sp
 8006d3a:	ab01      	add	r3, sp, #4
 8006d3c:	f7ff ffc6 	bl	8006ccc <__swhatbuf_r>
 8006d40:	9900      	ldr	r1, [sp, #0]
 8006d42:	0007      	movs	r7, r0
 8006d44:	0028      	movs	r0, r5
 8006d46:	f7ff faf1 	bl	800632c <_malloc_r>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d108      	bne.n	8006d60 <__smakebuf_r+0x44>
 8006d4e:	220c      	movs	r2, #12
 8006d50:	5ea3      	ldrsh	r3, [r4, r2]
 8006d52:	059a      	lsls	r2, r3, #22
 8006d54:	d4ef      	bmi.n	8006d36 <__smakebuf_r+0x1a>
 8006d56:	2203      	movs	r2, #3
 8006d58:	4393      	bics	r3, r2
 8006d5a:	431e      	orrs	r6, r3
 8006d5c:	81a6      	strh	r6, [r4, #12]
 8006d5e:	e7e4      	b.n	8006d2a <__smakebuf_r+0xe>
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	89a2      	ldrh	r2, [r4, #12]
 8006d64:	6020      	str	r0, [r4, #0]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	9b00      	ldr	r3, [sp, #0]
 8006d6c:	6120      	str	r0, [r4, #16]
 8006d6e:	6163      	str	r3, [r4, #20]
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <__smakebuf_r+0x74>
 8006d76:	0028      	movs	r0, r5
 8006d78:	230e      	movs	r3, #14
 8006d7a:	5ee1      	ldrsh	r1, [r4, r3]
 8006d7c:	f000 f81e 	bl	8006dbc <_isatty_r>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d005      	beq.n	8006d90 <__smakebuf_r+0x74>
 8006d84:	2303      	movs	r3, #3
 8006d86:	89a2      	ldrh	r2, [r4, #12]
 8006d88:	439a      	bics	r2, r3
 8006d8a:	3b02      	subs	r3, #2
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	433b      	orrs	r3, r7
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	e7ce      	b.n	8006d36 <__smakebuf_r+0x1a>

08006d98 <_fstat_r>:
 8006d98:	2300      	movs	r3, #0
 8006d9a:	b570      	push	{r4, r5, r6, lr}
 8006d9c:	4d06      	ldr	r5, [pc, #24]	; (8006db8 <_fstat_r+0x20>)
 8006d9e:	0004      	movs	r4, r0
 8006da0:	0008      	movs	r0, r1
 8006da2:	0011      	movs	r1, r2
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	f7fc fb3c 	bl	8003422 <_fstat>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d103      	bne.n	8006db6 <_fstat_r+0x1e>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d000      	beq.n	8006db6 <_fstat_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	20000354 	.word	0x20000354

08006dbc <_isatty_r>:
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	b570      	push	{r4, r5, r6, lr}
 8006dc0:	4d06      	ldr	r5, [pc, #24]	; (8006ddc <_isatty_r+0x20>)
 8006dc2:	0004      	movs	r4, r0
 8006dc4:	0008      	movs	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fc fb39 	bl	800343e <_isatty>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_isatty_r+0x1c>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d000      	beq.n	8006dd8 <_isatty_r+0x1c>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	20000354 	.word	0x20000354

08006de0 <exp>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	0004      	movs	r4, r0
 8006de4:	000d      	movs	r5, r1
 8006de6:	f000 f8e5 	bl	8006fb4 <__ieee754_exp>
 8006dea:	0006      	movs	r6, r0
 8006dec:	000f      	movs	r7, r1
 8006dee:	0020      	movs	r0, r4
 8006df0:	0029      	movs	r1, r5
 8006df2:	f000 f8d1 	bl	8006f98 <finite>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d00d      	beq.n	8006e16 <exp+0x36>
 8006dfa:	0020      	movs	r0, r4
 8006dfc:	0029      	movs	r1, r5
 8006dfe:	4a0f      	ldr	r2, [pc, #60]	; (8006e3c <exp+0x5c>)
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <exp+0x60>)
 8006e02:	f7f9 fb29 	bl	8000458 <__aeabi_dcmpgt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d008      	beq.n	8006e1c <exp+0x3c>
 8006e0a:	f7ff f9f5 	bl	80061f8 <__errno>
 8006e0e:	2322      	movs	r3, #34	; 0x22
 8006e10:	2600      	movs	r6, #0
 8006e12:	4f0c      	ldr	r7, [pc, #48]	; (8006e44 <exp+0x64>)
 8006e14:	6003      	str	r3, [r0, #0]
 8006e16:	0030      	movs	r0, r6
 8006e18:	0039      	movs	r1, r7
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1c:	0020      	movs	r0, r4
 8006e1e:	0029      	movs	r1, r5
 8006e20:	4a09      	ldr	r2, [pc, #36]	; (8006e48 <exp+0x68>)
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <exp+0x6c>)
 8006e24:	f7f9 fb04 	bl	8000430 <__aeabi_dcmplt>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d0f4      	beq.n	8006e16 <exp+0x36>
 8006e2c:	f7ff f9e4 	bl	80061f8 <__errno>
 8006e30:	2322      	movs	r3, #34	; 0x22
 8006e32:	2600      	movs	r6, #0
 8006e34:	2700      	movs	r7, #0
 8006e36:	6003      	str	r3, [r0, #0]
 8006e38:	e7ed      	b.n	8006e16 <exp+0x36>
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	fefa39ef 	.word	0xfefa39ef
 8006e40:	40862e42 	.word	0x40862e42
 8006e44:	7ff00000 	.word	0x7ff00000
 8006e48:	d52d3051 	.word	0xd52d3051
 8006e4c:	c0874910 	.word	0xc0874910

08006e50 <log>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	0004      	movs	r4, r0
 8006e54:	000d      	movs	r5, r1
 8006e56:	f000 fa17 	bl	8007288 <__ieee754_log>
 8006e5a:	0022      	movs	r2, r4
 8006e5c:	0006      	movs	r6, r0
 8006e5e:	000f      	movs	r7, r1
 8006e60:	002b      	movs	r3, r5
 8006e62:	0020      	movs	r0, r4
 8006e64:	0029      	movs	r1, r5
 8006e66:	f7fb fa67 	bl	8002338 <__aeabi_dcmpun>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d115      	bne.n	8006e9a <log+0x4a>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2300      	movs	r3, #0
 8006e72:	0020      	movs	r0, r4
 8006e74:	0029      	movs	r1, r5
 8006e76:	f7f9 faef 	bl	8000458 <__aeabi_dcmpgt>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d10d      	bne.n	8006e9a <log+0x4a>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2300      	movs	r3, #0
 8006e82:	0020      	movs	r0, r4
 8006e84:	0029      	movs	r1, r5
 8006e86:	f7f9 facd 	bl	8000424 <__aeabi_dcmpeq>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d008      	beq.n	8006ea0 <log+0x50>
 8006e8e:	f7ff f9b3 	bl	80061f8 <__errno>
 8006e92:	2322      	movs	r3, #34	; 0x22
 8006e94:	2600      	movs	r6, #0
 8006e96:	4f07      	ldr	r7, [pc, #28]	; (8006eb4 <log+0x64>)
 8006e98:	6003      	str	r3, [r0, #0]
 8006e9a:	0030      	movs	r0, r6
 8006e9c:	0039      	movs	r1, r7
 8006e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea0:	f7ff f9aa 	bl	80061f8 <__errno>
 8006ea4:	2321      	movs	r3, #33	; 0x21
 8006ea6:	6003      	str	r3, [r0, #0]
 8006ea8:	4803      	ldr	r0, [pc, #12]	; (8006eb8 <log+0x68>)
 8006eaa:	f000 f87d 	bl	8006fa8 <nan>
 8006eae:	0006      	movs	r6, r0
 8006eb0:	000f      	movs	r7, r1
 8006eb2:	e7f2      	b.n	8006e9a <log+0x4a>
 8006eb4:	fff00000 	.word	0xfff00000
 8006eb8:	080083b1 	.word	0x080083b1

08006ebc <pow>:
 8006ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ebe:	0014      	movs	r4, r2
 8006ec0:	001d      	movs	r5, r3
 8006ec2:	9000      	str	r0, [sp, #0]
 8006ec4:	9101      	str	r1, [sp, #4]
 8006ec6:	f000 fb8f 	bl	80075e8 <__ieee754_pow>
 8006eca:	0022      	movs	r2, r4
 8006ecc:	0006      	movs	r6, r0
 8006ece:	000f      	movs	r7, r1
 8006ed0:	002b      	movs	r3, r5
 8006ed2:	0020      	movs	r0, r4
 8006ed4:	0029      	movs	r1, r5
 8006ed6:	f7fb fa2f 	bl	8002338 <__aeabi_dcmpun>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d13f      	bne.n	8006f5e <pow+0xa2>
 8006ede:	9800      	ldr	r0, [sp, #0]
 8006ee0:	9901      	ldr	r1, [sp, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f7f9 fa9d 	bl	8000424 <__aeabi_dcmpeq>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d019      	beq.n	8006f22 <pow+0x66>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	0029      	movs	r1, r5
 8006ef6:	f7f9 fa95 	bl	8000424 <__aeabi_dcmpeq>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d146      	bne.n	8006f8c <pow+0xd0>
 8006efe:	0020      	movs	r0, r4
 8006f00:	0029      	movs	r1, r5
 8006f02:	f000 f849 	bl	8006f98 <finite>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d029      	beq.n	8006f5e <pow+0xa2>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	0020      	movs	r0, r4
 8006f10:	0029      	movs	r1, r5
 8006f12:	f7f9 fa8d 	bl	8000430 <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d021      	beq.n	8006f5e <pow+0xa2>
 8006f1a:	f7ff f96d 	bl	80061f8 <__errno>
 8006f1e:	2322      	movs	r3, #34	; 0x22
 8006f20:	e01c      	b.n	8006f5c <pow+0xa0>
 8006f22:	0030      	movs	r0, r6
 8006f24:	0039      	movs	r1, r7
 8006f26:	f000 f837 	bl	8006f98 <finite>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d11b      	bne.n	8006f66 <pow+0xaa>
 8006f2e:	9800      	ldr	r0, [sp, #0]
 8006f30:	9901      	ldr	r1, [sp, #4]
 8006f32:	f000 f831 	bl	8006f98 <finite>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d015      	beq.n	8006f66 <pow+0xaa>
 8006f3a:	0020      	movs	r0, r4
 8006f3c:	0029      	movs	r1, r5
 8006f3e:	f000 f82b 	bl	8006f98 <finite>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d00f      	beq.n	8006f66 <pow+0xaa>
 8006f46:	0032      	movs	r2, r6
 8006f48:	003b      	movs	r3, r7
 8006f4a:	0030      	movs	r0, r6
 8006f4c:	0039      	movs	r1, r7
 8006f4e:	f7fb f9f3 	bl	8002338 <__aeabi_dcmpun>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d0e1      	beq.n	8006f1a <pow+0x5e>
 8006f56:	f7ff f94f 	bl	80061f8 <__errno>
 8006f5a:	2321      	movs	r3, #33	; 0x21
 8006f5c:	6003      	str	r3, [r0, #0]
 8006f5e:	0030      	movs	r0, r6
 8006f60:	0039      	movs	r1, r7
 8006f62:	b003      	add	sp, #12
 8006f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	0030      	movs	r0, r6
 8006f6c:	0039      	movs	r1, r7
 8006f6e:	f7f9 fa59 	bl	8000424 <__aeabi_dcmpeq>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0f3      	beq.n	8006f5e <pow+0xa2>
 8006f76:	9800      	ldr	r0, [sp, #0]
 8006f78:	9901      	ldr	r1, [sp, #4]
 8006f7a:	f000 f80d 	bl	8006f98 <finite>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d0ed      	beq.n	8006f5e <pow+0xa2>
 8006f82:	0020      	movs	r0, r4
 8006f84:	0029      	movs	r1, r5
 8006f86:	f000 f807 	bl	8006f98 <finite>
 8006f8a:	e7c4      	b.n	8006f16 <pow+0x5a>
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	4f01      	ldr	r7, [pc, #4]	; (8006f94 <pow+0xd8>)
 8006f90:	e7e5      	b.n	8006f5e <pow+0xa2>
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	3ff00000 	.word	0x3ff00000

08006f98 <finite>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <finite+0xc>)
 8006f9a:	0048      	lsls	r0, r1, #1
 8006f9c:	0840      	lsrs	r0, r0, #1
 8006f9e:	18c0      	adds	r0, r0, r3
 8006fa0:	0fc0      	lsrs	r0, r0, #31
 8006fa2:	4770      	bx	lr
 8006fa4:	80100000 	.word	0x80100000

08006fa8 <nan>:
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4901      	ldr	r1, [pc, #4]	; (8006fb0 <nan+0x8>)
 8006fac:	4770      	bx	lr
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	7ff80000 	.word	0x7ff80000

08006fb4 <__ieee754_exp>:
 8006fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb6:	004b      	lsls	r3, r1, #1
 8006fb8:	000c      	movs	r4, r1
 8006fba:	0fce      	lsrs	r6, r1, #31
 8006fbc:	4992      	ldr	r1, [pc, #584]	; (8007208 <__ieee754_exp+0x254>)
 8006fbe:	0005      	movs	r5, r0
 8006fc0:	b089      	sub	sp, #36	; 0x24
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	428b      	cmp	r3, r1
 8006fc6:	d92f      	bls.n	8007028 <__ieee754_exp+0x74>
 8006fc8:	4990      	ldr	r1, [pc, #576]	; (800720c <__ieee754_exp+0x258>)
 8006fca:	428b      	cmp	r3, r1
 8006fcc:	d912      	bls.n	8006ff4 <__ieee754_exp+0x40>
 8006fce:	0323      	lsls	r3, r4, #12
 8006fd0:	0b1b      	lsrs	r3, r3, #12
 8006fd2:	4303      	orrs	r3, r0
 8006fd4:	d006      	beq.n	8006fe4 <__ieee754_exp+0x30>
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	0023      	movs	r3, r4
 8006fda:	0028      	movs	r0, r5
 8006fdc:	0021      	movs	r1, r4
 8006fde:	f7f9 fc0d 	bl	80007fc <__aeabi_dadd>
 8006fe2:	e011      	b.n	8007008 <__ieee754_exp+0x54>
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	d001      	beq.n	8006fec <__ieee754_exp+0x38>
 8006fe8:	2500      	movs	r5, #0
 8006fea:	002c      	movs	r4, r5
 8006fec:	0028      	movs	r0, r5
 8006fee:	0021      	movs	r1, r4
 8006ff0:	b009      	add	sp, #36	; 0x24
 8006ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff4:	0021      	movs	r1, r4
 8006ff6:	4a86      	ldr	r2, [pc, #536]	; (8007210 <__ieee754_exp+0x25c>)
 8006ff8:	4b86      	ldr	r3, [pc, #536]	; (8007214 <__ieee754_exp+0x260>)
 8006ffa:	f7f9 fa2d 	bl	8000458 <__aeabi_dcmpgt>
 8006ffe:	1e07      	subs	r7, r0, #0
 8007000:	d005      	beq.n	800700e <__ieee754_exp+0x5a>
 8007002:	2000      	movs	r0, #0
 8007004:	f001 f892 	bl	800812c <__math_oflow>
 8007008:	0005      	movs	r5, r0
 800700a:	000c      	movs	r4, r1
 800700c:	e7ee      	b.n	8006fec <__ieee754_exp+0x38>
 800700e:	0028      	movs	r0, r5
 8007010:	0021      	movs	r1, r4
 8007012:	4a81      	ldr	r2, [pc, #516]	; (8007218 <__ieee754_exp+0x264>)
 8007014:	4b81      	ldr	r3, [pc, #516]	; (800721c <__ieee754_exp+0x268>)
 8007016:	f7f9 fa0b 	bl	8000430 <__aeabi_dcmplt>
 800701a:	2800      	cmp	r0, #0
 800701c:	d100      	bne.n	8007020 <__ieee754_exp+0x6c>
 800701e:	e07d      	b.n	800711c <__ieee754_exp+0x168>
 8007020:	0038      	movs	r0, r7
 8007022:	f001 f87c 	bl	800811e <__math_uflow>
 8007026:	e7ef      	b.n	8007008 <__ieee754_exp+0x54>
 8007028:	4a7d      	ldr	r2, [pc, #500]	; (8007220 <__ieee754_exp+0x26c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d800      	bhi.n	8007030 <__ieee754_exp+0x7c>
 800702e:	e09e      	b.n	800716e <__ieee754_exp+0x1ba>
 8007030:	4a7c      	ldr	r2, [pc, #496]	; (8007224 <__ieee754_exp+0x270>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d872      	bhi.n	800711c <__ieee754_exp+0x168>
 8007036:	4b7c      	ldr	r3, [pc, #496]	; (8007228 <__ieee754_exp+0x274>)
 8007038:	00f7      	lsls	r7, r6, #3
 800703a:	19db      	adds	r3, r3, r7
 800703c:	0021      	movs	r1, r4
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f7fa fdf7 	bl	8001c34 <__aeabi_dsub>
 8007046:	4b79      	ldr	r3, [pc, #484]	; (800722c <__ieee754_exp+0x278>)
 8007048:	9002      	str	r0, [sp, #8]
 800704a:	9103      	str	r1, [sp, #12]
 800704c:	19db      	adds	r3, r3, r7
 800704e:	685c      	ldr	r4, [r3, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	9405      	str	r4, [sp, #20]
 8007056:	2301      	movs	r3, #1
 8007058:	1b9b      	subs	r3, r3, r6
 800705a:	1b9b      	subs	r3, r3, r6
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	9a04      	ldr	r2, [sp, #16]
 8007060:	9b05      	ldr	r3, [sp, #20]
 8007062:	9802      	ldr	r0, [sp, #8]
 8007064:	9903      	ldr	r1, [sp, #12]
 8007066:	f7fa fde5 	bl	8001c34 <__aeabi_dsub>
 800706a:	0005      	movs	r5, r0
 800706c:	000c      	movs	r4, r1
 800706e:	002a      	movs	r2, r5
 8007070:	0023      	movs	r3, r4
 8007072:	0028      	movs	r0, r5
 8007074:	0021      	movs	r1, r4
 8007076:	f7fa fb1b 	bl	80016b0 <__aeabi_dmul>
 800707a:	0006      	movs	r6, r0
 800707c:	000f      	movs	r7, r1
 800707e:	4a6c      	ldr	r2, [pc, #432]	; (8007230 <__ieee754_exp+0x27c>)
 8007080:	4b6c      	ldr	r3, [pc, #432]	; (8007234 <__ieee754_exp+0x280>)
 8007082:	f7fa fb15 	bl	80016b0 <__aeabi_dmul>
 8007086:	4a6c      	ldr	r2, [pc, #432]	; (8007238 <__ieee754_exp+0x284>)
 8007088:	4b6c      	ldr	r3, [pc, #432]	; (800723c <__ieee754_exp+0x288>)
 800708a:	f7fa fdd3 	bl	8001c34 <__aeabi_dsub>
 800708e:	0032      	movs	r2, r6
 8007090:	003b      	movs	r3, r7
 8007092:	f7fa fb0d 	bl	80016b0 <__aeabi_dmul>
 8007096:	4a6a      	ldr	r2, [pc, #424]	; (8007240 <__ieee754_exp+0x28c>)
 8007098:	4b6a      	ldr	r3, [pc, #424]	; (8007244 <__ieee754_exp+0x290>)
 800709a:	f7f9 fbaf 	bl	80007fc <__aeabi_dadd>
 800709e:	0032      	movs	r2, r6
 80070a0:	003b      	movs	r3, r7
 80070a2:	f7fa fb05 	bl	80016b0 <__aeabi_dmul>
 80070a6:	4a68      	ldr	r2, [pc, #416]	; (8007248 <__ieee754_exp+0x294>)
 80070a8:	4b68      	ldr	r3, [pc, #416]	; (800724c <__ieee754_exp+0x298>)
 80070aa:	f7fa fdc3 	bl	8001c34 <__aeabi_dsub>
 80070ae:	0032      	movs	r2, r6
 80070b0:	003b      	movs	r3, r7
 80070b2:	f7fa fafd 	bl	80016b0 <__aeabi_dmul>
 80070b6:	4a66      	ldr	r2, [pc, #408]	; (8007250 <__ieee754_exp+0x29c>)
 80070b8:	4b66      	ldr	r3, [pc, #408]	; (8007254 <__ieee754_exp+0x2a0>)
 80070ba:	f7f9 fb9f 	bl	80007fc <__aeabi_dadd>
 80070be:	0032      	movs	r2, r6
 80070c0:	003b      	movs	r3, r7
 80070c2:	f7fa faf5 	bl	80016b0 <__aeabi_dmul>
 80070c6:	0002      	movs	r2, r0
 80070c8:	000b      	movs	r3, r1
 80070ca:	0028      	movs	r0, r5
 80070cc:	0021      	movs	r1, r4
 80070ce:	f7fa fdb1 	bl	8001c34 <__aeabi_dsub>
 80070d2:	000b      	movs	r3, r1
 80070d4:	0002      	movs	r2, r0
 80070d6:	0006      	movs	r6, r0
 80070d8:	000f      	movs	r7, r1
 80070da:	0028      	movs	r0, r5
 80070dc:	0021      	movs	r1, r4
 80070de:	f7fa fae7 	bl	80016b0 <__aeabi_dmul>
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	9006      	str	r0, [sp, #24]
 80070e6:	9107      	str	r1, [sp, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d156      	bne.n	800719a <__ieee754_exp+0x1e6>
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	2200      	movs	r2, #0
 80070f0:	0030      	movs	r0, r6
 80070f2:	0039      	movs	r1, r7
 80070f4:	05db      	lsls	r3, r3, #23
 80070f6:	f7fa fd9d 	bl	8001c34 <__aeabi_dsub>
 80070fa:	0002      	movs	r2, r0
 80070fc:	000b      	movs	r3, r1
 80070fe:	9806      	ldr	r0, [sp, #24]
 8007100:	9907      	ldr	r1, [sp, #28]
 8007102:	f7f9 fedb 	bl	8000ebc <__aeabi_ddiv>
 8007106:	002a      	movs	r2, r5
 8007108:	0023      	movs	r3, r4
 800710a:	f7fa fd93 	bl	8001c34 <__aeabi_dsub>
 800710e:	0002      	movs	r2, r0
 8007110:	000b      	movs	r3, r1
 8007112:	2000      	movs	r0, #0
 8007114:	4950      	ldr	r1, [pc, #320]	; (8007258 <__ieee754_exp+0x2a4>)
 8007116:	f7fa fd8d 	bl	8001c34 <__aeabi_dsub>
 800711a:	e775      	b.n	8007008 <__ieee754_exp+0x54>
 800711c:	4b4f      	ldr	r3, [pc, #316]	; (800725c <__ieee754_exp+0x2a8>)
 800711e:	00f6      	lsls	r6, r6, #3
 8007120:	199e      	adds	r6, r3, r6
 8007122:	4a4f      	ldr	r2, [pc, #316]	; (8007260 <__ieee754_exp+0x2ac>)
 8007124:	4b4f      	ldr	r3, [pc, #316]	; (8007264 <__ieee754_exp+0x2b0>)
 8007126:	0028      	movs	r0, r5
 8007128:	0021      	movs	r1, r4
 800712a:	f7fa fac1 	bl	80016b0 <__aeabi_dmul>
 800712e:	6832      	ldr	r2, [r6, #0]
 8007130:	6873      	ldr	r3, [r6, #4]
 8007132:	f7f9 fb63 	bl	80007fc <__aeabi_dadd>
 8007136:	f7fb f91d 	bl	8002374 <__aeabi_d2iz>
 800713a:	9001      	str	r0, [sp, #4]
 800713c:	f7fb f950 	bl	80023e0 <__aeabi_i2d>
 8007140:	4a49      	ldr	r2, [pc, #292]	; (8007268 <__ieee754_exp+0x2b4>)
 8007142:	4b4a      	ldr	r3, [pc, #296]	; (800726c <__ieee754_exp+0x2b8>)
 8007144:	0006      	movs	r6, r0
 8007146:	000f      	movs	r7, r1
 8007148:	f7fa fab2 	bl	80016b0 <__aeabi_dmul>
 800714c:	0002      	movs	r2, r0
 800714e:	000b      	movs	r3, r1
 8007150:	0028      	movs	r0, r5
 8007152:	0021      	movs	r1, r4
 8007154:	f7fa fd6e 	bl	8001c34 <__aeabi_dsub>
 8007158:	4a45      	ldr	r2, [pc, #276]	; (8007270 <__ieee754_exp+0x2bc>)
 800715a:	9002      	str	r0, [sp, #8]
 800715c:	9103      	str	r1, [sp, #12]
 800715e:	4b45      	ldr	r3, [pc, #276]	; (8007274 <__ieee754_exp+0x2c0>)
 8007160:	0030      	movs	r0, r6
 8007162:	0039      	movs	r1, r7
 8007164:	f7fa faa4 	bl	80016b0 <__aeabi_dmul>
 8007168:	9004      	str	r0, [sp, #16]
 800716a:	9105      	str	r1, [sp, #20]
 800716c:	e777      	b.n	800705e <__ieee754_exp+0xaa>
 800716e:	4a42      	ldr	r2, [pc, #264]	; (8007278 <__ieee754_exp+0x2c4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d80d      	bhi.n	8007190 <__ieee754_exp+0x1dc>
 8007174:	4a41      	ldr	r2, [pc, #260]	; (800727c <__ieee754_exp+0x2c8>)
 8007176:	4b42      	ldr	r3, [pc, #264]	; (8007280 <__ieee754_exp+0x2cc>)
 8007178:	0021      	movs	r1, r4
 800717a:	f7f9 fb3f 	bl	80007fc <__aeabi_dadd>
 800717e:	2200      	movs	r2, #0
 8007180:	4b35      	ldr	r3, [pc, #212]	; (8007258 <__ieee754_exp+0x2a4>)
 8007182:	f7f9 f969 	bl	8000458 <__aeabi_dcmpgt>
 8007186:	2800      	cmp	r0, #0
 8007188:	d005      	beq.n	8007196 <__ieee754_exp+0x1e2>
 800718a:	2200      	movs	r2, #0
 800718c:	4b32      	ldr	r3, [pc, #200]	; (8007258 <__ieee754_exp+0x2a4>)
 800718e:	e724      	b.n	8006fda <__ieee754_exp+0x26>
 8007190:	2300      	movs	r3, #0
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	e76b      	b.n	800706e <__ieee754_exp+0xba>
 8007196:	9001      	str	r0, [sp, #4]
 8007198:	e769      	b.n	800706e <__ieee754_exp+0xba>
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	0032      	movs	r2, r6
 800719e:	003b      	movs	r3, r7
 80071a0:	2000      	movs	r0, #0
 80071a2:	05c9      	lsls	r1, r1, #23
 80071a4:	f7fa fd46 	bl	8001c34 <__aeabi_dsub>
 80071a8:	0002      	movs	r2, r0
 80071aa:	000b      	movs	r3, r1
 80071ac:	9806      	ldr	r0, [sp, #24]
 80071ae:	9907      	ldr	r1, [sp, #28]
 80071b0:	f7f9 fe84 	bl	8000ebc <__aeabi_ddiv>
 80071b4:	0002      	movs	r2, r0
 80071b6:	000b      	movs	r3, r1
 80071b8:	9804      	ldr	r0, [sp, #16]
 80071ba:	9905      	ldr	r1, [sp, #20]
 80071bc:	f7fa fd3a 	bl	8001c34 <__aeabi_dsub>
 80071c0:	9a02      	ldr	r2, [sp, #8]
 80071c2:	9b03      	ldr	r3, [sp, #12]
 80071c4:	f7fa fd36 	bl	8001c34 <__aeabi_dsub>
 80071c8:	0002      	movs	r2, r0
 80071ca:	000b      	movs	r3, r1
 80071cc:	2000      	movs	r0, #0
 80071ce:	4922      	ldr	r1, [pc, #136]	; (8007258 <__ieee754_exp+0x2a4>)
 80071d0:	f7fa fd30 	bl	8001c34 <__aeabi_dsub>
 80071d4:	4b2b      	ldr	r3, [pc, #172]	; (8007284 <__ieee754_exp+0x2d0>)
 80071d6:	9a01      	ldr	r2, [sp, #4]
 80071d8:	0004      	movs	r4, r0
 80071da:	000d      	movs	r5, r1
 80071dc:	429a      	cmp	r2, r3
 80071de:	db05      	blt.n	80071ec <__ieee754_exp+0x238>
 80071e0:	9901      	ldr	r1, [sp, #4]
 80071e2:	0509      	lsls	r1, r1, #20
 80071e4:	194b      	adds	r3, r1, r5
 80071e6:	0025      	movs	r5, r4
 80071e8:	001c      	movs	r4, r3
 80071ea:	e6ff      	b.n	8006fec <__ieee754_exp+0x38>
 80071ec:	22fa      	movs	r2, #250	; 0xfa
 80071ee:	0092      	lsls	r2, r2, #2
 80071f0:	4694      	mov	ip, r2
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	4463      	add	r3, ip
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	1859      	adds	r1, r3, r1
 80071fc:	23b8      	movs	r3, #184	; 0xb8
 80071fe:	045b      	lsls	r3, r3, #17
 8007200:	f7fa fa56 	bl	80016b0 <__aeabi_dmul>
 8007204:	e700      	b.n	8007008 <__ieee754_exp+0x54>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	40862e41 	.word	0x40862e41
 800720c:	7fefffff 	.word	0x7fefffff
 8007210:	fefa39ef 	.word	0xfefa39ef
 8007214:	40862e42 	.word	0x40862e42
 8007218:	d52d3051 	.word	0xd52d3051
 800721c:	c0874910 	.word	0xc0874910
 8007220:	3fd62e42 	.word	0x3fd62e42
 8007224:	3ff0a2b1 	.word	0x3ff0a2b1
 8007228:	080083f0 	.word	0x080083f0
 800722c:	08008400 	.word	0x08008400
 8007230:	72bea4d0 	.word	0x72bea4d0
 8007234:	3e663769 	.word	0x3e663769
 8007238:	c5d26bf1 	.word	0xc5d26bf1
 800723c:	3ebbbd41 	.word	0x3ebbbd41
 8007240:	af25de2c 	.word	0xaf25de2c
 8007244:	3f11566a 	.word	0x3f11566a
 8007248:	16bebd93 	.word	0x16bebd93
 800724c:	3f66c16c 	.word	0x3f66c16c
 8007250:	5555553e 	.word	0x5555553e
 8007254:	3fc55555 	.word	0x3fc55555
 8007258:	3ff00000 	.word	0x3ff00000
 800725c:	080083e0 	.word	0x080083e0
 8007260:	652b82fe 	.word	0x652b82fe
 8007264:	3ff71547 	.word	0x3ff71547
 8007268:	fee00000 	.word	0xfee00000
 800726c:	3fe62e42 	.word	0x3fe62e42
 8007270:	35793c76 	.word	0x35793c76
 8007274:	3dea39ef 	.word	0x3dea39ef
 8007278:	3defffff 	.word	0x3defffff
 800727c:	8800759c 	.word	0x8800759c
 8007280:	7e37e43c 	.word	0x7e37e43c
 8007284:	fffffc03 	.word	0xfffffc03

08007288 <__ieee754_log>:
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800728c:	000b      	movs	r3, r1
 800728e:	b08d      	sub	sp, #52	; 0x34
 8007290:	0352      	lsls	r2, r2, #13
 8007292:	4291      	cmp	r1, r2
 8007294:	da22      	bge.n	80072dc <__ieee754_log+0x54>
 8007296:	004a      	lsls	r2, r1, #1
 8007298:	0852      	lsrs	r2, r2, #1
 800729a:	4302      	orrs	r2, r0
 800729c:	d107      	bne.n	80072ae <__ieee754_log+0x26>
 800729e:	2200      	movs	r2, #0
 80072a0:	2300      	movs	r3, #0
 80072a2:	2000      	movs	r0, #0
 80072a4:	49b3      	ldr	r1, [pc, #716]	; (8007574 <__ieee754_log+0x2ec>)
 80072a6:	f7f9 fe09 	bl	8000ebc <__aeabi_ddiv>
 80072aa:	b00d      	add	sp, #52	; 0x34
 80072ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ae:	2900      	cmp	r1, #0
 80072b0:	da05      	bge.n	80072be <__ieee754_log+0x36>
 80072b2:	0002      	movs	r2, r0
 80072b4:	f7fa fcbe 	bl	8001c34 <__aeabi_dsub>
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	e7f3      	b.n	80072a6 <__ieee754_log+0x1e>
 80072be:	4bae      	ldr	r3, [pc, #696]	; (8007578 <__ieee754_log+0x2f0>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	f7fa f9f5 	bl	80016b0 <__aeabi_dmul>
 80072c6:	2436      	movs	r4, #54	; 0x36
 80072c8:	000b      	movs	r3, r1
 80072ca:	4264      	negs	r4, r4
 80072cc:	4aab      	ldr	r2, [pc, #684]	; (800757c <__ieee754_log+0x2f4>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	dd06      	ble.n	80072e0 <__ieee754_log+0x58>
 80072d2:	0002      	movs	r2, r0
 80072d4:	000b      	movs	r3, r1
 80072d6:	f7f9 fa91 	bl	80007fc <__aeabi_dadd>
 80072da:	e7e6      	b.n	80072aa <__ieee754_log+0x22>
 80072dc:	2400      	movs	r4, #0
 80072de:	e7f5      	b.n	80072cc <__ieee754_log+0x44>
 80072e0:	4da7      	ldr	r5, [pc, #668]	; (8007580 <__ieee754_log+0x2f8>)
 80072e2:	151a      	asrs	r2, r3, #20
 80072e4:	1952      	adds	r2, r2, r5
 80072e6:	1912      	adds	r2, r2, r4
 80072e8:	031b      	lsls	r3, r3, #12
 80072ea:	4ca6      	ldr	r4, [pc, #664]	; (8007584 <__ieee754_log+0x2fc>)
 80072ec:	0b1b      	lsrs	r3, r3, #12
 80072ee:	9302      	str	r3, [sp, #8]
 80072f0:	191b      	adds	r3, r3, r4
 80072f2:	2480      	movs	r4, #128	; 0x80
 80072f4:	0364      	lsls	r4, r4, #13
 80072f6:	4023      	ands	r3, r4
 80072f8:	4ca3      	ldr	r4, [pc, #652]	; (8007588 <__ieee754_log+0x300>)
 80072fa:	9d02      	ldr	r5, [sp, #8]
 80072fc:	405c      	eors	r4, r3
 80072fe:	151b      	asrs	r3, r3, #20
 8007300:	189b      	adds	r3, r3, r2
 8007302:	4325      	orrs	r5, r4
 8007304:	2200      	movs	r2, #0
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	0029      	movs	r1, r5
 800730a:	4b9f      	ldr	r3, [pc, #636]	; (8007588 <__ieee754_log+0x300>)
 800730c:	f7fa fc92 	bl	8001c34 <__aeabi_dsub>
 8007310:	9b02      	ldr	r3, [sp, #8]
 8007312:	0006      	movs	r6, r0
 8007314:	3302      	adds	r3, #2
 8007316:	031b      	lsls	r3, r3, #12
 8007318:	000f      	movs	r7, r1
 800731a:	2200      	movs	r2, #0
 800731c:	0b1b      	lsrs	r3, r3, #12
 800731e:	2b02      	cmp	r3, #2
 8007320:	dc64      	bgt.n	80073ec <__ieee754_log+0x164>
 8007322:	2300      	movs	r3, #0
 8007324:	f7f9 f87e 	bl	8000424 <__aeabi_dcmpeq>
 8007328:	2800      	cmp	r0, #0
 800732a:	d019      	beq.n	8007360 <__ieee754_log+0xd8>
 800732c:	9b00      	ldr	r3, [sp, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d100      	bne.n	8007334 <__ieee754_log+0xac>
 8007332:	e11c      	b.n	800756e <__ieee754_log+0x2e6>
 8007334:	0018      	movs	r0, r3
 8007336:	f7fb f853 	bl	80023e0 <__aeabi_i2d>
 800733a:	4a94      	ldr	r2, [pc, #592]	; (800758c <__ieee754_log+0x304>)
 800733c:	4b94      	ldr	r3, [pc, #592]	; (8007590 <__ieee754_log+0x308>)
 800733e:	0004      	movs	r4, r0
 8007340:	000d      	movs	r5, r1
 8007342:	f7fa f9b5 	bl	80016b0 <__aeabi_dmul>
 8007346:	4a93      	ldr	r2, [pc, #588]	; (8007594 <__ieee754_log+0x30c>)
 8007348:	0006      	movs	r6, r0
 800734a:	000f      	movs	r7, r1
 800734c:	4b92      	ldr	r3, [pc, #584]	; (8007598 <__ieee754_log+0x310>)
 800734e:	0020      	movs	r0, r4
 8007350:	0029      	movs	r1, r5
 8007352:	f7fa f9ad 	bl	80016b0 <__aeabi_dmul>
 8007356:	0002      	movs	r2, r0
 8007358:	000b      	movs	r3, r1
 800735a:	0030      	movs	r0, r6
 800735c:	0039      	movs	r1, r7
 800735e:	e7ba      	b.n	80072d6 <__ieee754_log+0x4e>
 8007360:	4a8e      	ldr	r2, [pc, #568]	; (800759c <__ieee754_log+0x314>)
 8007362:	4b8f      	ldr	r3, [pc, #572]	; (80075a0 <__ieee754_log+0x318>)
 8007364:	0030      	movs	r0, r6
 8007366:	0039      	movs	r1, r7
 8007368:	f7fa f9a2 	bl	80016b0 <__aeabi_dmul>
 800736c:	0002      	movs	r2, r0
 800736e:	000b      	movs	r3, r1
 8007370:	2000      	movs	r0, #0
 8007372:	498c      	ldr	r1, [pc, #560]	; (80075a4 <__ieee754_log+0x31c>)
 8007374:	f7fa fc5e 	bl	8001c34 <__aeabi_dsub>
 8007378:	0032      	movs	r2, r6
 800737a:	0004      	movs	r4, r0
 800737c:	000d      	movs	r5, r1
 800737e:	003b      	movs	r3, r7
 8007380:	0030      	movs	r0, r6
 8007382:	0039      	movs	r1, r7
 8007384:	f7fa f994 	bl	80016b0 <__aeabi_dmul>
 8007388:	000b      	movs	r3, r1
 800738a:	0002      	movs	r2, r0
 800738c:	0029      	movs	r1, r5
 800738e:	0020      	movs	r0, r4
 8007390:	f7fa f98e 	bl	80016b0 <__aeabi_dmul>
 8007394:	9b00      	ldr	r3, [sp, #0]
 8007396:	9002      	str	r0, [sp, #8]
 8007398:	9103      	str	r1, [sp, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <__ieee754_log+0x124>
 800739e:	0002      	movs	r2, r0
 80073a0:	000b      	movs	r3, r1
 80073a2:	0030      	movs	r0, r6
 80073a4:	0039      	movs	r1, r7
 80073a6:	f7fa fc45 	bl	8001c34 <__aeabi_dsub>
 80073aa:	e77e      	b.n	80072aa <__ieee754_log+0x22>
 80073ac:	9800      	ldr	r0, [sp, #0]
 80073ae:	f7fb f817 	bl	80023e0 <__aeabi_i2d>
 80073b2:	4a76      	ldr	r2, [pc, #472]	; (800758c <__ieee754_log+0x304>)
 80073b4:	4b76      	ldr	r3, [pc, #472]	; (8007590 <__ieee754_log+0x308>)
 80073b6:	0004      	movs	r4, r0
 80073b8:	000d      	movs	r5, r1
 80073ba:	f7fa f979 	bl	80016b0 <__aeabi_dmul>
 80073be:	4a75      	ldr	r2, [pc, #468]	; (8007594 <__ieee754_log+0x30c>)
 80073c0:	9000      	str	r0, [sp, #0]
 80073c2:	9101      	str	r1, [sp, #4]
 80073c4:	4b74      	ldr	r3, [pc, #464]	; (8007598 <__ieee754_log+0x310>)
 80073c6:	0020      	movs	r0, r4
 80073c8:	0029      	movs	r1, r5
 80073ca:	f7fa f971 	bl	80016b0 <__aeabi_dmul>
 80073ce:	0002      	movs	r2, r0
 80073d0:	000b      	movs	r3, r1
 80073d2:	9802      	ldr	r0, [sp, #8]
 80073d4:	9903      	ldr	r1, [sp, #12]
 80073d6:	f7fa fc2d 	bl	8001c34 <__aeabi_dsub>
 80073da:	0032      	movs	r2, r6
 80073dc:	003b      	movs	r3, r7
 80073de:	f7fa fc29 	bl	8001c34 <__aeabi_dsub>
 80073e2:	0002      	movs	r2, r0
 80073e4:	000b      	movs	r3, r1
 80073e6:	9800      	ldr	r0, [sp, #0]
 80073e8:	9901      	ldr	r1, [sp, #4]
 80073ea:	e7dc      	b.n	80073a6 <__ieee754_log+0x11e>
 80073ec:	2380      	movs	r3, #128	; 0x80
 80073ee:	05db      	lsls	r3, r3, #23
 80073f0:	f7f9 fa04 	bl	80007fc <__aeabi_dadd>
 80073f4:	0002      	movs	r2, r0
 80073f6:	000b      	movs	r3, r1
 80073f8:	0030      	movs	r0, r6
 80073fa:	0039      	movs	r1, r7
 80073fc:	f7f9 fd5e 	bl	8000ebc <__aeabi_ddiv>
 8007400:	9004      	str	r0, [sp, #16]
 8007402:	9105      	str	r1, [sp, #20]
 8007404:	9800      	ldr	r0, [sp, #0]
 8007406:	f7fa ffeb 	bl	80023e0 <__aeabi_i2d>
 800740a:	9a04      	ldr	r2, [sp, #16]
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	9006      	str	r0, [sp, #24]
 8007410:	9107      	str	r1, [sp, #28]
 8007412:	0010      	movs	r0, r2
 8007414:	0019      	movs	r1, r3
 8007416:	f7fa f94b 	bl	80016b0 <__aeabi_dmul>
 800741a:	4a63      	ldr	r2, [pc, #396]	; (80075a8 <__ieee754_log+0x320>)
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	4694      	mov	ip, r2
 8007420:	4463      	add	r3, ip
 8007422:	0002      	movs	r2, r0
 8007424:	930b      	str	r3, [sp, #44]	; 0x2c
 8007426:	000b      	movs	r3, r1
 8007428:	9008      	str	r0, [sp, #32]
 800742a:	9109      	str	r1, [sp, #36]	; 0x24
 800742c:	f7fa f940 	bl	80016b0 <__aeabi_dmul>
 8007430:	0004      	movs	r4, r0
 8007432:	000d      	movs	r5, r1
 8007434:	4a5d      	ldr	r2, [pc, #372]	; (80075ac <__ieee754_log+0x324>)
 8007436:	4b5e      	ldr	r3, [pc, #376]	; (80075b0 <__ieee754_log+0x328>)
 8007438:	f7fa f93a 	bl	80016b0 <__aeabi_dmul>
 800743c:	4a5d      	ldr	r2, [pc, #372]	; (80075b4 <__ieee754_log+0x32c>)
 800743e:	4b5e      	ldr	r3, [pc, #376]	; (80075b8 <__ieee754_log+0x330>)
 8007440:	f7f9 f9dc 	bl	80007fc <__aeabi_dadd>
 8007444:	0022      	movs	r2, r4
 8007446:	002b      	movs	r3, r5
 8007448:	f7fa f932 	bl	80016b0 <__aeabi_dmul>
 800744c:	4a5b      	ldr	r2, [pc, #364]	; (80075bc <__ieee754_log+0x334>)
 800744e:	4b5c      	ldr	r3, [pc, #368]	; (80075c0 <__ieee754_log+0x338>)
 8007450:	f7f9 f9d4 	bl	80007fc <__aeabi_dadd>
 8007454:	0022      	movs	r2, r4
 8007456:	002b      	movs	r3, r5
 8007458:	f7fa f92a 	bl	80016b0 <__aeabi_dmul>
 800745c:	4a59      	ldr	r2, [pc, #356]	; (80075c4 <__ieee754_log+0x33c>)
 800745e:	4b5a      	ldr	r3, [pc, #360]	; (80075c8 <__ieee754_log+0x340>)
 8007460:	f7f9 f9cc 	bl	80007fc <__aeabi_dadd>
 8007464:	9a08      	ldr	r2, [sp, #32]
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	f7fa f922 	bl	80016b0 <__aeabi_dmul>
 800746c:	4a57      	ldr	r2, [pc, #348]	; (80075cc <__ieee754_log+0x344>)
 800746e:	9008      	str	r0, [sp, #32]
 8007470:	9109      	str	r1, [sp, #36]	; 0x24
 8007472:	4b57      	ldr	r3, [pc, #348]	; (80075d0 <__ieee754_log+0x348>)
 8007474:	0020      	movs	r0, r4
 8007476:	0029      	movs	r1, r5
 8007478:	f7fa f91a 	bl	80016b0 <__aeabi_dmul>
 800747c:	4a55      	ldr	r2, [pc, #340]	; (80075d4 <__ieee754_log+0x34c>)
 800747e:	4b56      	ldr	r3, [pc, #344]	; (80075d8 <__ieee754_log+0x350>)
 8007480:	f7f9 f9bc 	bl	80007fc <__aeabi_dadd>
 8007484:	0022      	movs	r2, r4
 8007486:	002b      	movs	r3, r5
 8007488:	f7fa f912 	bl	80016b0 <__aeabi_dmul>
 800748c:	4a53      	ldr	r2, [pc, #332]	; (80075dc <__ieee754_log+0x354>)
 800748e:	4b54      	ldr	r3, [pc, #336]	; (80075e0 <__ieee754_log+0x358>)
 8007490:	f7f9 f9b4 	bl	80007fc <__aeabi_dadd>
 8007494:	0022      	movs	r2, r4
 8007496:	002b      	movs	r3, r5
 8007498:	f7fa f90a 	bl	80016b0 <__aeabi_dmul>
 800749c:	0002      	movs	r2, r0
 800749e:	000b      	movs	r3, r1
 80074a0:	9808      	ldr	r0, [sp, #32]
 80074a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074a4:	f7f9 f9aa 	bl	80007fc <__aeabi_dadd>
 80074a8:	9a02      	ldr	r2, [sp, #8]
 80074aa:	4b4e      	ldr	r3, [pc, #312]	; (80075e4 <__ieee754_log+0x35c>)
 80074ac:	0004      	movs	r4, r0
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074b2:	000d      	movs	r5, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dd34      	ble.n	8007524 <__ieee754_log+0x29c>
 80074ba:	2200      	movs	r2, #0
 80074bc:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <__ieee754_log+0x31c>)
 80074be:	0030      	movs	r0, r6
 80074c0:	0039      	movs	r1, r7
 80074c2:	f7fa f8f5 	bl	80016b0 <__aeabi_dmul>
 80074c6:	0032      	movs	r2, r6
 80074c8:	003b      	movs	r3, r7
 80074ca:	f7fa f8f1 	bl	80016b0 <__aeabi_dmul>
 80074ce:	0002      	movs	r2, r0
 80074d0:	000b      	movs	r3, r1
 80074d2:	9002      	str	r0, [sp, #8]
 80074d4:	9103      	str	r1, [sp, #12]
 80074d6:	0020      	movs	r0, r4
 80074d8:	0029      	movs	r1, r5
 80074da:	f7f9 f98f 	bl	80007fc <__aeabi_dadd>
 80074de:	9a04      	ldr	r2, [sp, #16]
 80074e0:	9b05      	ldr	r3, [sp, #20]
 80074e2:	f7fa f8e5 	bl	80016b0 <__aeabi_dmul>
 80074e6:	9b00      	ldr	r3, [sp, #0]
 80074e8:	0004      	movs	r4, r0
 80074ea:	000d      	movs	r5, r1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <__ieee754_log+0x276>
 80074f0:	0002      	movs	r2, r0
 80074f2:	000b      	movs	r3, r1
 80074f4:	9802      	ldr	r0, [sp, #8]
 80074f6:	9903      	ldr	r1, [sp, #12]
 80074f8:	f7fa fb9c 	bl	8001c34 <__aeabi_dsub>
 80074fc:	e74f      	b.n	800739e <__ieee754_log+0x116>
 80074fe:	4a23      	ldr	r2, [pc, #140]	; (800758c <__ieee754_log+0x304>)
 8007500:	4b23      	ldr	r3, [pc, #140]	; (8007590 <__ieee754_log+0x308>)
 8007502:	9806      	ldr	r0, [sp, #24]
 8007504:	9907      	ldr	r1, [sp, #28]
 8007506:	f7fa f8d3 	bl	80016b0 <__aeabi_dmul>
 800750a:	4a22      	ldr	r2, [pc, #136]	; (8007594 <__ieee754_log+0x30c>)
 800750c:	9000      	str	r0, [sp, #0]
 800750e:	9101      	str	r1, [sp, #4]
 8007510:	9806      	ldr	r0, [sp, #24]
 8007512:	9907      	ldr	r1, [sp, #28]
 8007514:	4b20      	ldr	r3, [pc, #128]	; (8007598 <__ieee754_log+0x310>)
 8007516:	f7fa f8cb 	bl	80016b0 <__aeabi_dmul>
 800751a:	0022      	movs	r2, r4
 800751c:	002b      	movs	r3, r5
 800751e:	f7f9 f96d 	bl	80007fc <__aeabi_dadd>
 8007522:	e754      	b.n	80073ce <__ieee754_log+0x146>
 8007524:	0002      	movs	r2, r0
 8007526:	000b      	movs	r3, r1
 8007528:	0030      	movs	r0, r6
 800752a:	0039      	movs	r1, r7
 800752c:	f7fa fb82 	bl	8001c34 <__aeabi_dsub>
 8007530:	9a04      	ldr	r2, [sp, #16]
 8007532:	9b05      	ldr	r3, [sp, #20]
 8007534:	f7fa f8bc 	bl	80016b0 <__aeabi_dmul>
 8007538:	9b00      	ldr	r3, [sp, #0]
 800753a:	0004      	movs	r4, r0
 800753c:	000d      	movs	r5, r1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <__ieee754_log+0x2c0>
 8007542:	0002      	movs	r2, r0
 8007544:	000b      	movs	r3, r1
 8007546:	e72c      	b.n	80073a2 <__ieee754_log+0x11a>
 8007548:	4a10      	ldr	r2, [pc, #64]	; (800758c <__ieee754_log+0x304>)
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <__ieee754_log+0x308>)
 800754c:	9806      	ldr	r0, [sp, #24]
 800754e:	9907      	ldr	r1, [sp, #28]
 8007550:	f7fa f8ae 	bl	80016b0 <__aeabi_dmul>
 8007554:	4a0f      	ldr	r2, [pc, #60]	; (8007594 <__ieee754_log+0x30c>)
 8007556:	9000      	str	r0, [sp, #0]
 8007558:	9101      	str	r1, [sp, #4]
 800755a:	9806      	ldr	r0, [sp, #24]
 800755c:	9907      	ldr	r1, [sp, #28]
 800755e:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <__ieee754_log+0x310>)
 8007560:	f7fa f8a6 	bl	80016b0 <__aeabi_dmul>
 8007564:	0002      	movs	r2, r0
 8007566:	000b      	movs	r3, r1
 8007568:	0020      	movs	r0, r4
 800756a:	0029      	movs	r1, r5
 800756c:	e733      	b.n	80073d6 <__ieee754_log+0x14e>
 800756e:	2000      	movs	r0, #0
 8007570:	2100      	movs	r1, #0
 8007572:	e69a      	b.n	80072aa <__ieee754_log+0x22>
 8007574:	c3500000 	.word	0xc3500000
 8007578:	43500000 	.word	0x43500000
 800757c:	7fefffff 	.word	0x7fefffff
 8007580:	fffffc01 	.word	0xfffffc01
 8007584:	00095f64 	.word	0x00095f64
 8007588:	3ff00000 	.word	0x3ff00000
 800758c:	fee00000 	.word	0xfee00000
 8007590:	3fe62e42 	.word	0x3fe62e42
 8007594:	35793c76 	.word	0x35793c76
 8007598:	3dea39ef 	.word	0x3dea39ef
 800759c:	55555555 	.word	0x55555555
 80075a0:	3fd55555 	.word	0x3fd55555
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	fff9eb86 	.word	0xfff9eb86
 80075ac:	df3e5244 	.word	0xdf3e5244
 80075b0:	3fc2f112 	.word	0x3fc2f112
 80075b4:	96cb03de 	.word	0x96cb03de
 80075b8:	3fc74664 	.word	0x3fc74664
 80075bc:	94229359 	.word	0x94229359
 80075c0:	3fd24924 	.word	0x3fd24924
 80075c4:	55555593 	.word	0x55555593
 80075c8:	3fe55555 	.word	0x3fe55555
 80075cc:	d078c69f 	.word	0xd078c69f
 80075d0:	3fc39a09 	.word	0x3fc39a09
 80075d4:	1d8e78af 	.word	0x1d8e78af
 80075d8:	3fcc71c5 	.word	0x3fcc71c5
 80075dc:	9997fa04 	.word	0x9997fa04
 80075e0:	3fd99999 	.word	0x3fd99999
 80075e4:	0006b851 	.word	0x0006b851

080075e8 <__ieee754_pow>:
 80075e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ea:	b095      	sub	sp, #84	; 0x54
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	9b03      	ldr	r3, [sp, #12]
 80075f2:	9a03      	ldr	r2, [sp, #12]
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	0056      	lsls	r6, r2, #1
 80075fa:	001a      	movs	r2, r3
 80075fc:	0876      	lsrs	r6, r6, #1
 80075fe:	0007      	movs	r7, r0
 8007600:	000d      	movs	r5, r1
 8007602:	4332      	orrs	r2, r6
 8007604:	d119      	bne.n	800763a <__ieee754_pow+0x52>
 8007606:	2180      	movs	r1, #128	; 0x80
 8007608:	0309      	lsls	r1, r1, #12
 800760a:	4069      	eors	r1, r5
 800760c:	0002      	movs	r2, r0
 800760e:	000b      	movs	r3, r1
 8007610:	1892      	adds	r2, r2, r2
 8007612:	415b      	adcs	r3, r3
 8007614:	4989      	ldr	r1, [pc, #548]	; (800783c <__ieee754_pow+0x254>)
 8007616:	428b      	cmp	r3, r1
 8007618:	d806      	bhi.n	8007628 <__ieee754_pow+0x40>
 800761a:	d001      	beq.n	8007620 <__ieee754_pow+0x38>
 800761c:	f000 fcb6 	bl	8007f8c <__ieee754_pow+0x9a4>
 8007620:	2a00      	cmp	r2, #0
 8007622:	d101      	bne.n	8007628 <__ieee754_pow+0x40>
 8007624:	f000 fcb2 	bl	8007f8c <__ieee754_pow+0x9a4>
 8007628:	9a02      	ldr	r2, [sp, #8]
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	0038      	movs	r0, r7
 800762e:	0029      	movs	r1, r5
 8007630:	f7f9 f8e4 	bl	80007fc <__aeabi_dadd>
 8007634:	9000      	str	r0, [sp, #0]
 8007636:	9101      	str	r1, [sp, #4]
 8007638:	e0ad      	b.n	8007796 <__ieee754_pow+0x1ae>
 800763a:	4a81      	ldr	r2, [pc, #516]	; (8007840 <__ieee754_pow+0x258>)
 800763c:	004c      	lsls	r4, r1, #1
 800763e:	9108      	str	r1, [sp, #32]
 8007640:	9000      	str	r0, [sp, #0]
 8007642:	0864      	lsrs	r4, r4, #1
 8007644:	4294      	cmp	r4, r2
 8007646:	dc08      	bgt.n	800765a <__ieee754_pow+0x72>
 8007648:	d101      	bne.n	800764e <__ieee754_pow+0x66>
 800764a:	2800      	cmp	r0, #0
 800764c:	d1ec      	bne.n	8007628 <__ieee754_pow+0x40>
 800764e:	4a7c      	ldr	r2, [pc, #496]	; (8007840 <__ieee754_pow+0x258>)
 8007650:	4296      	cmp	r6, r2
 8007652:	dc02      	bgt.n	800765a <__ieee754_pow+0x72>
 8007654:	d10c      	bne.n	8007670 <__ieee754_pow+0x88>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <__ieee754_pow+0x88>
 800765a:	4b7a      	ldr	r3, [pc, #488]	; (8007844 <__ieee754_pow+0x25c>)
 800765c:	18eb      	adds	r3, r5, r3
 800765e:	433b      	orrs	r3, r7
 8007660:	d1e2      	bne.n	8007628 <__ieee754_pow+0x40>
 8007662:	2180      	movs	r1, #128	; 0x80
 8007664:	9803      	ldr	r0, [sp, #12]
 8007666:	0309      	lsls	r1, r1, #12
 8007668:	4048      	eors	r0, r1
 800766a:	0003      	movs	r3, r0
 800766c:	9a02      	ldr	r2, [sp, #8]
 800766e:	e7cf      	b.n	8007610 <__ieee754_pow+0x28>
 8007670:	2200      	movs	r2, #0
 8007672:	9206      	str	r2, [sp, #24]
 8007674:	2d00      	cmp	r5, #0
 8007676:	da69      	bge.n	800774c <__ieee754_pow+0x164>
 8007678:	4a73      	ldr	r2, [pc, #460]	; (8007848 <__ieee754_pow+0x260>)
 800767a:	4296      	cmp	r6, r2
 800767c:	dc64      	bgt.n	8007748 <__ieee754_pow+0x160>
 800767e:	4a73      	ldr	r2, [pc, #460]	; (800784c <__ieee754_pow+0x264>)
 8007680:	4296      	cmp	r6, r2
 8007682:	dd11      	ble.n	80076a8 <__ieee754_pow+0xc0>
 8007684:	4972      	ldr	r1, [pc, #456]	; (8007850 <__ieee754_pow+0x268>)
 8007686:	1532      	asrs	r2, r6, #20
 8007688:	1852      	adds	r2, r2, r1
 800768a:	2a14      	cmp	r2, #20
 800768c:	dd3c      	ble.n	8007708 <__ieee754_pow+0x120>
 800768e:	2134      	movs	r1, #52	; 0x34
 8007690:	1a89      	subs	r1, r1, r2
 8007692:	9a02      	ldr	r2, [sp, #8]
 8007694:	40ca      	lsrs	r2, r1
 8007696:	0010      	movs	r0, r2
 8007698:	4088      	lsls	r0, r1
 800769a:	4298      	cmp	r0, r3
 800769c:	d104      	bne.n	80076a8 <__ieee754_pow+0xc0>
 800769e:	2101      	movs	r1, #1
 80076a0:	400a      	ands	r2, r1
 80076a2:	1849      	adds	r1, r1, r1
 80076a4:	1a8a      	subs	r2, r1, r2
 80076a6:	9206      	str	r2, [sp, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d03c      	beq.n	8007726 <__ieee754_pow+0x13e>
 80076ac:	0038      	movs	r0, r7
 80076ae:	0029      	movs	r1, r5
 80076b0:	f000 fca4 	bl	8007ffc <fabs>
 80076b4:	9000      	str	r0, [sp, #0]
 80076b6:	9101      	str	r1, [sp, #4]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	d000      	beq.n	80076be <__ieee754_pow+0xd6>
 80076bc:	e094      	b.n	80077e8 <__ieee754_pow+0x200>
 80076be:	2c00      	cmp	r4, #0
 80076c0:	d005      	beq.n	80076ce <__ieee754_pow+0xe6>
 80076c2:	4a64      	ldr	r2, [pc, #400]	; (8007854 <__ieee754_pow+0x26c>)
 80076c4:	00ab      	lsls	r3, r5, #2
 80076c6:	089b      	lsrs	r3, r3, #2
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d000      	beq.n	80076ce <__ieee754_pow+0xe6>
 80076cc:	e08c      	b.n	80077e8 <__ieee754_pow+0x200>
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da07      	bge.n	80076e4 <__ieee754_pow+0xfc>
 80076d4:	9a00      	ldr	r2, [sp, #0]
 80076d6:	9b01      	ldr	r3, [sp, #4]
 80076d8:	2000      	movs	r0, #0
 80076da:	495e      	ldr	r1, [pc, #376]	; (8007854 <__ieee754_pow+0x26c>)
 80076dc:	f7f9 fbee 	bl	8000ebc <__aeabi_ddiv>
 80076e0:	9000      	str	r0, [sp, #0]
 80076e2:	9101      	str	r1, [sp, #4]
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da55      	bge.n	8007796 <__ieee754_pow+0x1ae>
 80076ea:	4b56      	ldr	r3, [pc, #344]	; (8007844 <__ieee754_pow+0x25c>)
 80076ec:	18e4      	adds	r4, r4, r3
 80076ee:	9b06      	ldr	r3, [sp, #24]
 80076f0:	431c      	orrs	r4, r3
 80076f2:	d000      	beq.n	80076f6 <__ieee754_pow+0x10e>
 80076f4:	e06c      	b.n	80077d0 <__ieee754_pow+0x1e8>
 80076f6:	9a00      	ldr	r2, [sp, #0]
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	0010      	movs	r0, r2
 80076fc:	0019      	movs	r1, r3
 80076fe:	f7fa fa99 	bl	8001c34 <__aeabi_dsub>
 8007702:	0002      	movs	r2, r0
 8007704:	000b      	movs	r3, r1
 8007706:	e01c      	b.n	8007742 <__ieee754_pow+0x15a>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1cf      	bne.n	80076ac <__ieee754_pow+0xc4>
 800770c:	3314      	adds	r3, #20
 800770e:	1a9a      	subs	r2, r3, r2
 8007710:	0033      	movs	r3, r6
 8007712:	4113      	asrs	r3, r2
 8007714:	0019      	movs	r1, r3
 8007716:	4091      	lsls	r1, r2
 8007718:	42b1      	cmp	r1, r6
 800771a:	d104      	bne.n	8007726 <__ieee754_pow+0x13e>
 800771c:	2201      	movs	r2, #1
 800771e:	4013      	ands	r3, r2
 8007720:	1892      	adds	r2, r2, r2
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	9306      	str	r3, [sp, #24]
 8007726:	4b4b      	ldr	r3, [pc, #300]	; (8007854 <__ieee754_pow+0x26c>)
 8007728:	429e      	cmp	r6, r3
 800772a:	d138      	bne.n	800779e <__ieee754_pow+0x1b6>
 800772c:	0038      	movs	r0, r7
 800772e:	0029      	movs	r1, r5
 8007730:	9b04      	ldr	r3, [sp, #16]
 8007732:	9000      	str	r0, [sp, #0]
 8007734:	9101      	str	r1, [sp, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	da2d      	bge.n	8007796 <__ieee754_pow+0x1ae>
 800773a:	003a      	movs	r2, r7
 800773c:	002b      	movs	r3, r5
 800773e:	2000      	movs	r0, #0
 8007740:	4944      	ldr	r1, [pc, #272]	; (8007854 <__ieee754_pow+0x26c>)
 8007742:	f7f9 fbbb 	bl	8000ebc <__aeabi_ddiv>
 8007746:	e775      	b.n	8007634 <__ieee754_pow+0x4c>
 8007748:	2202      	movs	r2, #2
 800774a:	9206      	str	r2, [sp, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1ad      	bne.n	80076ac <__ieee754_pow+0xc4>
 8007750:	4b3b      	ldr	r3, [pc, #236]	; (8007840 <__ieee754_pow+0x258>)
 8007752:	429e      	cmp	r6, r3
 8007754:	d1e7      	bne.n	8007726 <__ieee754_pow+0x13e>
 8007756:	4b3b      	ldr	r3, [pc, #236]	; (8007844 <__ieee754_pow+0x25c>)
 8007758:	18e3      	adds	r3, r4, r3
 800775a:	433b      	orrs	r3, r7
 800775c:	d101      	bne.n	8007762 <__ieee754_pow+0x17a>
 800775e:	f000 fc15 	bl	8007f8c <__ieee754_pow+0x9a4>
 8007762:	4b3a      	ldr	r3, [pc, #232]	; (800784c <__ieee754_pow+0x264>)
 8007764:	429c      	cmp	r4, r3
 8007766:	dd09      	ble.n	800777c <__ieee754_pow+0x194>
 8007768:	9b04      	ldr	r3, [sp, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	da01      	bge.n	8007772 <__ieee754_pow+0x18a>
 800776e:	f000 fc11 	bl	8007f94 <__ieee754_pow+0x9ac>
 8007772:	9b02      	ldr	r3, [sp, #8]
 8007774:	9c03      	ldr	r4, [sp, #12]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	9401      	str	r4, [sp, #4]
 800777a:	e00c      	b.n	8007796 <__ieee754_pow+0x1ae>
 800777c:	9b04      	ldr	r3, [sp, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	db01      	blt.n	8007786 <__ieee754_pow+0x19e>
 8007782:	f000 fc07 	bl	8007f94 <__ieee754_pow+0x9ac>
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	0612      	lsls	r2, r2, #24
 800778a:	4694      	mov	ip, r2
 800778c:	9b02      	ldr	r3, [sp, #8]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	4463      	add	r3, ip
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	9800      	ldr	r0, [sp, #0]
 8007798:	9901      	ldr	r1, [sp, #4]
 800779a:	b015      	add	sp, #84	; 0x54
 800779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779e:	2380      	movs	r3, #128	; 0x80
 80077a0:	9a04      	ldr	r2, [sp, #16]
 80077a2:	05db      	lsls	r3, r3, #23
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d106      	bne.n	80077b6 <__ieee754_pow+0x1ce>
 80077a8:	003a      	movs	r2, r7
 80077aa:	002b      	movs	r3, r5
 80077ac:	0038      	movs	r0, r7
 80077ae:	0029      	movs	r1, r5
 80077b0:	f7f9 ff7e 	bl	80016b0 <__aeabi_dmul>
 80077b4:	e73e      	b.n	8007634 <__ieee754_pow+0x4c>
 80077b6:	4b28      	ldr	r3, [pc, #160]	; (8007858 <__ieee754_pow+0x270>)
 80077b8:	9a04      	ldr	r2, [sp, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d000      	beq.n	80077c0 <__ieee754_pow+0x1d8>
 80077be:	e775      	b.n	80076ac <__ieee754_pow+0xc4>
 80077c0:	2d00      	cmp	r5, #0
 80077c2:	da00      	bge.n	80077c6 <__ieee754_pow+0x1de>
 80077c4:	e772      	b.n	80076ac <__ieee754_pow+0xc4>
 80077c6:	0038      	movs	r0, r7
 80077c8:	0029      	movs	r1, r5
 80077ca:	f000 fcb7 	bl	800813c <__ieee754_sqrt>
 80077ce:	e731      	b.n	8007634 <__ieee754_pow+0x4c>
 80077d0:	9b06      	ldr	r3, [sp, #24]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d1df      	bne.n	8007796 <__ieee754_pow+0x1ae>
 80077d6:	9800      	ldr	r0, [sp, #0]
 80077d8:	2180      	movs	r1, #128	; 0x80
 80077da:	0002      	movs	r2, r0
 80077dc:	9801      	ldr	r0, [sp, #4]
 80077de:	0609      	lsls	r1, r1, #24
 80077e0:	1843      	adds	r3, r0, r1
 80077e2:	9200      	str	r2, [sp, #0]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	e7d6      	b.n	8007796 <__ieee754_pow+0x1ae>
 80077e8:	0feb      	lsrs	r3, r5, #31
 80077ea:	3b01      	subs	r3, #1
 80077ec:	930e      	str	r3, [sp, #56]	; 0x38
 80077ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077f0:	9b06      	ldr	r3, [sp, #24]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	d104      	bne.n	8007800 <__ieee754_pow+0x218>
 80077f6:	003a      	movs	r2, r7
 80077f8:	002b      	movs	r3, r5
 80077fa:	0038      	movs	r0, r7
 80077fc:	0029      	movs	r1, r5
 80077fe:	e77e      	b.n	80076fe <__ieee754_pow+0x116>
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <__ieee754_pow+0x274>)
 8007802:	429e      	cmp	r6, r3
 8007804:	dc00      	bgt.n	8007808 <__ieee754_pow+0x220>
 8007806:	e0f1      	b.n	80079ec <__ieee754_pow+0x404>
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <__ieee754_pow+0x278>)
 800780a:	429e      	cmp	r6, r3
 800780c:	dd09      	ble.n	8007822 <__ieee754_pow+0x23a>
 800780e:	4b0f      	ldr	r3, [pc, #60]	; (800784c <__ieee754_pow+0x264>)
 8007810:	429c      	cmp	r4, r3
 8007812:	dc0c      	bgt.n	800782e <__ieee754_pow+0x246>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	da0c      	bge.n	8007834 <__ieee754_pow+0x24c>
 800781a:	2000      	movs	r0, #0
 800781c:	f000 fc86 	bl	800812c <__math_oflow>
 8007820:	e708      	b.n	8007634 <__ieee754_pow+0x4c>
 8007822:	4b10      	ldr	r3, [pc, #64]	; (8007864 <__ieee754_pow+0x27c>)
 8007824:	429c      	cmp	r4, r3
 8007826:	ddf5      	ble.n	8007814 <__ieee754_pow+0x22c>
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <__ieee754_pow+0x26c>)
 800782a:	429c      	cmp	r4, r3
 800782c:	dd1c      	ble.n	8007868 <__ieee754_pow+0x280>
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	dcf2      	bgt.n	800781a <__ieee754_pow+0x232>
 8007834:	2000      	movs	r0, #0
 8007836:	f000 fc72 	bl	800811e <__math_uflow>
 800783a:	e6fb      	b.n	8007634 <__ieee754_pow+0x4c>
 800783c:	fff00000 	.word	0xfff00000
 8007840:	7ff00000 	.word	0x7ff00000
 8007844:	c0100000 	.word	0xc0100000
 8007848:	433fffff 	.word	0x433fffff
 800784c:	3fefffff 	.word	0x3fefffff
 8007850:	fffffc01 	.word	0xfffffc01
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	3fe00000 	.word	0x3fe00000
 800785c:	41e00000 	.word	0x41e00000
 8007860:	43f00000 	.word	0x43f00000
 8007864:	3feffffe 	.word	0x3feffffe
 8007868:	2200      	movs	r2, #0
 800786a:	9800      	ldr	r0, [sp, #0]
 800786c:	9901      	ldr	r1, [sp, #4]
 800786e:	4b53      	ldr	r3, [pc, #332]	; (80079bc <__ieee754_pow+0x3d4>)
 8007870:	f7fa f9e0 	bl	8001c34 <__aeabi_dsub>
 8007874:	22c0      	movs	r2, #192	; 0xc0
 8007876:	4b52      	ldr	r3, [pc, #328]	; (80079c0 <__ieee754_pow+0x3d8>)
 8007878:	05d2      	lsls	r2, r2, #23
 800787a:	0004      	movs	r4, r0
 800787c:	000d      	movs	r5, r1
 800787e:	f7f9 ff17 	bl	80016b0 <__aeabi_dmul>
 8007882:	4a50      	ldr	r2, [pc, #320]	; (80079c4 <__ieee754_pow+0x3dc>)
 8007884:	0006      	movs	r6, r0
 8007886:	000f      	movs	r7, r1
 8007888:	0020      	movs	r0, r4
 800788a:	0029      	movs	r1, r5
 800788c:	4b4e      	ldr	r3, [pc, #312]	; (80079c8 <__ieee754_pow+0x3e0>)
 800788e:	f7f9 ff0f 	bl	80016b0 <__aeabi_dmul>
 8007892:	2200      	movs	r2, #0
 8007894:	9000      	str	r0, [sp, #0]
 8007896:	9101      	str	r1, [sp, #4]
 8007898:	4b4c      	ldr	r3, [pc, #304]	; (80079cc <__ieee754_pow+0x3e4>)
 800789a:	0020      	movs	r0, r4
 800789c:	0029      	movs	r1, r5
 800789e:	f7f9 ff07 	bl	80016b0 <__aeabi_dmul>
 80078a2:	0002      	movs	r2, r0
 80078a4:	000b      	movs	r3, r1
 80078a6:	484a      	ldr	r0, [pc, #296]	; (80079d0 <__ieee754_pow+0x3e8>)
 80078a8:	494a      	ldr	r1, [pc, #296]	; (80079d4 <__ieee754_pow+0x3ec>)
 80078aa:	f7fa f9c3 	bl	8001c34 <__aeabi_dsub>
 80078ae:	0022      	movs	r2, r4
 80078b0:	002b      	movs	r3, r5
 80078b2:	f7f9 fefd 	bl	80016b0 <__aeabi_dmul>
 80078b6:	0002      	movs	r2, r0
 80078b8:	000b      	movs	r3, r1
 80078ba:	2000      	movs	r0, #0
 80078bc:	4946      	ldr	r1, [pc, #280]	; (80079d8 <__ieee754_pow+0x3f0>)
 80078be:	f7fa f9b9 	bl	8001c34 <__aeabi_dsub>
 80078c2:	0022      	movs	r2, r4
 80078c4:	002b      	movs	r3, r5
 80078c6:	9004      	str	r0, [sp, #16]
 80078c8:	9105      	str	r1, [sp, #20]
 80078ca:	0020      	movs	r0, r4
 80078cc:	0029      	movs	r1, r5
 80078ce:	f7f9 feef 	bl	80016b0 <__aeabi_dmul>
 80078d2:	0002      	movs	r2, r0
 80078d4:	000b      	movs	r3, r1
 80078d6:	9804      	ldr	r0, [sp, #16]
 80078d8:	9905      	ldr	r1, [sp, #20]
 80078da:	f7f9 fee9 	bl	80016b0 <__aeabi_dmul>
 80078de:	4a3f      	ldr	r2, [pc, #252]	; (80079dc <__ieee754_pow+0x3f4>)
 80078e0:	4b37      	ldr	r3, [pc, #220]	; (80079c0 <__ieee754_pow+0x3d8>)
 80078e2:	f7f9 fee5 	bl	80016b0 <__aeabi_dmul>
 80078e6:	0002      	movs	r2, r0
 80078e8:	000b      	movs	r3, r1
 80078ea:	9800      	ldr	r0, [sp, #0]
 80078ec:	9901      	ldr	r1, [sp, #4]
 80078ee:	f7fa f9a1 	bl	8001c34 <__aeabi_dsub>
 80078f2:	0002      	movs	r2, r0
 80078f4:	000b      	movs	r3, r1
 80078f6:	0004      	movs	r4, r0
 80078f8:	000d      	movs	r5, r1
 80078fa:	0030      	movs	r0, r6
 80078fc:	0039      	movs	r1, r7
 80078fe:	f7f8 ff7d 	bl	80007fc <__aeabi_dadd>
 8007902:	2000      	movs	r0, #0
 8007904:	0032      	movs	r2, r6
 8007906:	003b      	movs	r3, r7
 8007908:	9004      	str	r0, [sp, #16]
 800790a:	9105      	str	r1, [sp, #20]
 800790c:	f7fa f992 	bl	8001c34 <__aeabi_dsub>
 8007910:	0002      	movs	r2, r0
 8007912:	000b      	movs	r3, r1
 8007914:	0020      	movs	r0, r4
 8007916:	0029      	movs	r1, r5
 8007918:	f7fa f98c 	bl	8001c34 <__aeabi_dsub>
 800791c:	9b06      	ldr	r3, [sp, #24]
 800791e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007920:	3b01      	subs	r3, #1
 8007922:	0006      	movs	r6, r0
 8007924:	000f      	movs	r7, r1
 8007926:	4313      	orrs	r3, r2
 8007928:	d000      	beq.n	800792c <__ieee754_pow+0x344>
 800792a:	e1dc      	b.n	8007ce6 <__ieee754_pow+0x6fe>
 800792c:	2300      	movs	r3, #0
 800792e:	4c2c      	ldr	r4, [pc, #176]	; (80079e0 <__ieee754_pow+0x3f8>)
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	9401      	str	r4, [sp, #4]
 8007934:	9c02      	ldr	r4, [sp, #8]
 8007936:	9d03      	ldr	r5, [sp, #12]
 8007938:	9802      	ldr	r0, [sp, #8]
 800793a:	9903      	ldr	r1, [sp, #12]
 800793c:	2400      	movs	r4, #0
 800793e:	002b      	movs	r3, r5
 8007940:	0022      	movs	r2, r4
 8007942:	f7fa f977 	bl	8001c34 <__aeabi_dsub>
 8007946:	9a04      	ldr	r2, [sp, #16]
 8007948:	9b05      	ldr	r3, [sp, #20]
 800794a:	f7f9 feb1 	bl	80016b0 <__aeabi_dmul>
 800794e:	9a02      	ldr	r2, [sp, #8]
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	9006      	str	r0, [sp, #24]
 8007954:	9107      	str	r1, [sp, #28]
 8007956:	0030      	movs	r0, r6
 8007958:	0039      	movs	r1, r7
 800795a:	f7f9 fea9 	bl	80016b0 <__aeabi_dmul>
 800795e:	0002      	movs	r2, r0
 8007960:	000b      	movs	r3, r1
 8007962:	9806      	ldr	r0, [sp, #24]
 8007964:	9907      	ldr	r1, [sp, #28]
 8007966:	f7f8 ff49 	bl	80007fc <__aeabi_dadd>
 800796a:	0022      	movs	r2, r4
 800796c:	002b      	movs	r3, r5
 800796e:	0006      	movs	r6, r0
 8007970:	000f      	movs	r7, r1
 8007972:	9804      	ldr	r0, [sp, #16]
 8007974:	9905      	ldr	r1, [sp, #20]
 8007976:	f7f9 fe9b 	bl	80016b0 <__aeabi_dmul>
 800797a:	0003      	movs	r3, r0
 800797c:	000c      	movs	r4, r1
 800797e:	9004      	str	r0, [sp, #16]
 8007980:	9105      	str	r1, [sp, #20]
 8007982:	9306      	str	r3, [sp, #24]
 8007984:	9407      	str	r4, [sp, #28]
 8007986:	0002      	movs	r2, r0
 8007988:	000b      	movs	r3, r1
 800798a:	0030      	movs	r0, r6
 800798c:	0039      	movs	r1, r7
 800798e:	f7f8 ff35 	bl	80007fc <__aeabi_dadd>
 8007992:	4b14      	ldr	r3, [pc, #80]	; (80079e4 <__ieee754_pow+0x3fc>)
 8007994:	0005      	movs	r5, r0
 8007996:	000c      	movs	r4, r1
 8007998:	9108      	str	r1, [sp, #32]
 800799a:	4299      	cmp	r1, r3
 800799c:	dc00      	bgt.n	80079a0 <__ieee754_pow+0x3b8>
 800799e:	e2d4      	b.n	8007f4a <__ieee754_pow+0x962>
 80079a0:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <__ieee754_pow+0x400>)
 80079a2:	18cb      	adds	r3, r1, r3
 80079a4:	4303      	orrs	r3, r0
 80079a6:	d100      	bne.n	80079aa <__ieee754_pow+0x3c2>
 80079a8:	e1d6      	b.n	8007d58 <__ieee754_pow+0x770>
 80079aa:	9800      	ldr	r0, [sp, #0]
 80079ac:	9901      	ldr	r1, [sp, #4]
 80079ae:	2300      	movs	r3, #0
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7f8 fd3d 	bl	8000430 <__aeabi_dcmplt>
 80079b6:	1e43      	subs	r3, r0, #1
 80079b8:	4198      	sbcs	r0, r3
 80079ba:	e72f      	b.n	800781c <__ieee754_pow+0x234>
 80079bc:	3ff00000 	.word	0x3ff00000
 80079c0:	3ff71547 	.word	0x3ff71547
 80079c4:	f85ddf44 	.word	0xf85ddf44
 80079c8:	3e54ae0b 	.word	0x3e54ae0b
 80079cc:	3fd00000 	.word	0x3fd00000
 80079d0:	55555555 	.word	0x55555555
 80079d4:	3fd55555 	.word	0x3fd55555
 80079d8:	3fe00000 	.word	0x3fe00000
 80079dc:	652b82fe 	.word	0x652b82fe
 80079e0:	bff00000 	.word	0xbff00000
 80079e4:	408fffff 	.word	0x408fffff
 80079e8:	bf700000 	.word	0xbf700000
 80079ec:	4bbf      	ldr	r3, [pc, #764]	; (8007cec <__ieee754_pow+0x704>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	422b      	tst	r3, r5
 80079f2:	d10a      	bne.n	8007a0a <__ieee754_pow+0x422>
 80079f4:	9800      	ldr	r0, [sp, #0]
 80079f6:	9901      	ldr	r1, [sp, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	4bbd      	ldr	r3, [pc, #756]	; (8007cf0 <__ieee754_pow+0x708>)
 80079fc:	f7f9 fe58 	bl	80016b0 <__aeabi_dmul>
 8007a00:	2235      	movs	r2, #53	; 0x35
 8007a02:	9000      	str	r0, [sp, #0]
 8007a04:	9101      	str	r1, [sp, #4]
 8007a06:	9c01      	ldr	r4, [sp, #4]
 8007a08:	4252      	negs	r2, r2
 8007a0a:	49ba      	ldr	r1, [pc, #744]	; (8007cf4 <__ieee754_pow+0x70c>)
 8007a0c:	1523      	asrs	r3, r4, #20
 8007a0e:	185b      	adds	r3, r3, r1
 8007a10:	189b      	adds	r3, r3, r2
 8007a12:	0324      	lsls	r4, r4, #12
 8007a14:	4db8      	ldr	r5, [pc, #736]	; (8007cf8 <__ieee754_pow+0x710>)
 8007a16:	930d      	str	r3, [sp, #52]	; 0x34
 8007a18:	4bb8      	ldr	r3, [pc, #736]	; (8007cfc <__ieee754_pow+0x714>)
 8007a1a:	0b22      	lsrs	r2, r4, #12
 8007a1c:	4315      	orrs	r5, r2
 8007a1e:	2400      	movs	r4, #0
 8007a20:	429a      	cmp	r2, r3
 8007a22:	dd09      	ble.n	8007a38 <__ieee754_pow+0x450>
 8007a24:	4bb6      	ldr	r3, [pc, #728]	; (8007d00 <__ieee754_pow+0x718>)
 8007a26:	3401      	adds	r4, #1
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	dd05      	ble.n	8007a38 <__ieee754_pow+0x450>
 8007a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2e:	191b      	adds	r3, r3, r4
 8007a30:	2400      	movs	r4, #0
 8007a32:	930d      	str	r3, [sp, #52]	; 0x34
 8007a34:	4bb3      	ldr	r3, [pc, #716]	; (8007d04 <__ieee754_pow+0x71c>)
 8007a36:	18ed      	adds	r5, r5, r3
 8007a38:	4bb3      	ldr	r3, [pc, #716]	; (8007d08 <__ieee754_pow+0x720>)
 8007a3a:	00e2      	lsls	r2, r4, #3
 8007a3c:	189b      	adds	r3, r3, r2
 8007a3e:	9800      	ldr	r0, [sp, #0]
 8007a40:	9901      	ldr	r1, [sp, #4]
 8007a42:	920f      	str	r2, [sp, #60]	; 0x3c
 8007a44:	0029      	movs	r1, r5
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	0006      	movs	r6, r0
 8007a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a50:	f7fa f8f0 	bl	8001c34 <__aeabi_dsub>
 8007a54:	0032      	movs	r2, r6
 8007a56:	002b      	movs	r3, r5
 8007a58:	9010      	str	r0, [sp, #64]	; 0x40
 8007a5a:	9111      	str	r1, [sp, #68]	; 0x44
 8007a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a60:	f7f8 fecc 	bl	80007fc <__aeabi_dadd>
 8007a64:	0002      	movs	r2, r0
 8007a66:	000b      	movs	r3, r1
 8007a68:	2000      	movs	r0, #0
 8007a6a:	49a3      	ldr	r1, [pc, #652]	; (8007cf8 <__ieee754_pow+0x710>)
 8007a6c:	f7f9 fa26 	bl	8000ebc <__aeabi_ddiv>
 8007a70:	0002      	movs	r2, r0
 8007a72:	000b      	movs	r3, r1
 8007a74:	9012      	str	r0, [sp, #72]	; 0x48
 8007a76:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007a7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007a7c:	f7f9 fe18 	bl	80016b0 <__aeabi_dmul>
 8007a80:	9008      	str	r0, [sp, #32]
 8007a82:	9109      	str	r1, [sp, #36]	; 0x24
 8007a84:	9a08      	ldr	r2, [sp, #32]
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	9204      	str	r2, [sp, #16]
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	2180      	movs	r1, #128	; 0x80
 8007a90:	2080      	movs	r0, #128	; 0x80
 8007a92:	9304      	str	r3, [sp, #16]
 8007a94:	9a04      	ldr	r2, [sp, #16]
 8007a96:	9b05      	ldr	r3, [sp, #20]
 8007a98:	9200      	str	r2, [sp, #0]
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	002f      	movs	r7, r5
 8007aa0:	0589      	lsls	r1, r1, #22
 8007aa2:	106d      	asrs	r5, r5, #1
 8007aa4:	4329      	orrs	r1, r5
 8007aa6:	0300      	lsls	r0, r0, #12
 8007aa8:	1809      	adds	r1, r1, r0
 8007aaa:	04a0      	lsls	r0, r4, #18
 8007aac:	180b      	adds	r3, r1, r0
 8007aae:	9800      	ldr	r0, [sp, #0]
 8007ab0:	9901      	ldr	r1, [sp, #4]
 8007ab2:	0014      	movs	r4, r2
 8007ab4:	001d      	movs	r5, r3
 8007ab6:	f7f9 fdfb 	bl	80016b0 <__aeabi_dmul>
 8007aba:	0002      	movs	r2, r0
 8007abc:	000b      	movs	r3, r1
 8007abe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ac0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ac2:	f7fa f8b7 	bl	8001c34 <__aeabi_dsub>
 8007ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aca:	9010      	str	r0, [sp, #64]	; 0x40
 8007acc:	9111      	str	r1, [sp, #68]	; 0x44
 8007ace:	0020      	movs	r0, r4
 8007ad0:	0029      	movs	r1, r5
 8007ad2:	f7fa f8af 	bl	8001c34 <__aeabi_dsub>
 8007ad6:	0002      	movs	r2, r0
 8007ad8:	000b      	movs	r3, r1
 8007ada:	0030      	movs	r0, r6
 8007adc:	0039      	movs	r1, r7
 8007ade:	f7fa f8a9 	bl	8001c34 <__aeabi_dsub>
 8007ae2:	9a00      	ldr	r2, [sp, #0]
 8007ae4:	9b01      	ldr	r3, [sp, #4]
 8007ae6:	f7f9 fde3 	bl	80016b0 <__aeabi_dmul>
 8007aea:	0002      	movs	r2, r0
 8007aec:	000b      	movs	r3, r1
 8007aee:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007af0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007af2:	f7fa f89f 	bl	8001c34 <__aeabi_dsub>
 8007af6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007afa:	f7f9 fdd9 	bl	80016b0 <__aeabi_dmul>
 8007afe:	9a08      	ldr	r2, [sp, #32]
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	900a      	str	r0, [sp, #40]	; 0x28
 8007b04:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b06:	0010      	movs	r0, r2
 8007b08:	0019      	movs	r1, r3
 8007b0a:	f7f9 fdd1 	bl	80016b0 <__aeabi_dmul>
 8007b0e:	0006      	movs	r6, r0
 8007b10:	000f      	movs	r7, r1
 8007b12:	4a7e      	ldr	r2, [pc, #504]	; (8007d0c <__ieee754_pow+0x724>)
 8007b14:	4b7e      	ldr	r3, [pc, #504]	; (8007d10 <__ieee754_pow+0x728>)
 8007b16:	f7f9 fdcb 	bl	80016b0 <__aeabi_dmul>
 8007b1a:	4a7e      	ldr	r2, [pc, #504]	; (8007d14 <__ieee754_pow+0x72c>)
 8007b1c:	4b7e      	ldr	r3, [pc, #504]	; (8007d18 <__ieee754_pow+0x730>)
 8007b1e:	f7f8 fe6d 	bl	80007fc <__aeabi_dadd>
 8007b22:	0032      	movs	r2, r6
 8007b24:	003b      	movs	r3, r7
 8007b26:	f7f9 fdc3 	bl	80016b0 <__aeabi_dmul>
 8007b2a:	4a7c      	ldr	r2, [pc, #496]	; (8007d1c <__ieee754_pow+0x734>)
 8007b2c:	4b7c      	ldr	r3, [pc, #496]	; (8007d20 <__ieee754_pow+0x738>)
 8007b2e:	f7f8 fe65 	bl	80007fc <__aeabi_dadd>
 8007b32:	0032      	movs	r2, r6
 8007b34:	003b      	movs	r3, r7
 8007b36:	f7f9 fdbb 	bl	80016b0 <__aeabi_dmul>
 8007b3a:	4a7a      	ldr	r2, [pc, #488]	; (8007d24 <__ieee754_pow+0x73c>)
 8007b3c:	4b7a      	ldr	r3, [pc, #488]	; (8007d28 <__ieee754_pow+0x740>)
 8007b3e:	f7f8 fe5d 	bl	80007fc <__aeabi_dadd>
 8007b42:	0032      	movs	r2, r6
 8007b44:	003b      	movs	r3, r7
 8007b46:	f7f9 fdb3 	bl	80016b0 <__aeabi_dmul>
 8007b4a:	4a78      	ldr	r2, [pc, #480]	; (8007d2c <__ieee754_pow+0x744>)
 8007b4c:	4b78      	ldr	r3, [pc, #480]	; (8007d30 <__ieee754_pow+0x748>)
 8007b4e:	f7f8 fe55 	bl	80007fc <__aeabi_dadd>
 8007b52:	0032      	movs	r2, r6
 8007b54:	003b      	movs	r3, r7
 8007b56:	f7f9 fdab 	bl	80016b0 <__aeabi_dmul>
 8007b5a:	4a76      	ldr	r2, [pc, #472]	; (8007d34 <__ieee754_pow+0x74c>)
 8007b5c:	4b76      	ldr	r3, [pc, #472]	; (8007d38 <__ieee754_pow+0x750>)
 8007b5e:	f7f8 fe4d 	bl	80007fc <__aeabi_dadd>
 8007b62:	0032      	movs	r2, r6
 8007b64:	0004      	movs	r4, r0
 8007b66:	000d      	movs	r5, r1
 8007b68:	003b      	movs	r3, r7
 8007b6a:	0030      	movs	r0, r6
 8007b6c:	0039      	movs	r1, r7
 8007b6e:	f7f9 fd9f 	bl	80016b0 <__aeabi_dmul>
 8007b72:	0002      	movs	r2, r0
 8007b74:	000b      	movs	r3, r1
 8007b76:	0020      	movs	r0, r4
 8007b78:	0029      	movs	r1, r5
 8007b7a:	f7f9 fd99 	bl	80016b0 <__aeabi_dmul>
 8007b7e:	9a00      	ldr	r2, [sp, #0]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	0004      	movs	r4, r0
 8007b84:	000d      	movs	r5, r1
 8007b86:	9808      	ldr	r0, [sp, #32]
 8007b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b8a:	f7f8 fe37 	bl	80007fc <__aeabi_dadd>
 8007b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b92:	f7f9 fd8d 	bl	80016b0 <__aeabi_dmul>
 8007b96:	0022      	movs	r2, r4
 8007b98:	002b      	movs	r3, r5
 8007b9a:	f7f8 fe2f 	bl	80007fc <__aeabi_dadd>
 8007b9e:	9a00      	ldr	r2, [sp, #0]
 8007ba0:	9b01      	ldr	r3, [sp, #4]
 8007ba2:	9010      	str	r0, [sp, #64]	; 0x40
 8007ba4:	9111      	str	r1, [sp, #68]	; 0x44
 8007ba6:	0010      	movs	r0, r2
 8007ba8:	0019      	movs	r1, r3
 8007baa:	f7f9 fd81 	bl	80016b0 <__aeabi_dmul>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4b62      	ldr	r3, [pc, #392]	; (8007d3c <__ieee754_pow+0x754>)
 8007bb2:	0004      	movs	r4, r0
 8007bb4:	000d      	movs	r5, r1
 8007bb6:	f7f8 fe21 	bl	80007fc <__aeabi_dadd>
 8007bba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bbe:	f7f8 fe1d 	bl	80007fc <__aeabi_dadd>
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	000f      	movs	r7, r1
 8007bc6:	0006      	movs	r6, r0
 8007bc8:	0002      	movs	r2, r0
 8007bca:	000b      	movs	r3, r1
 8007bcc:	9800      	ldr	r0, [sp, #0]
 8007bce:	9901      	ldr	r1, [sp, #4]
 8007bd0:	f7f9 fd6e 	bl	80016b0 <__aeabi_dmul>
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	9000      	str	r0, [sp, #0]
 8007bd8:	9101      	str	r1, [sp, #4]
 8007bda:	4b58      	ldr	r3, [pc, #352]	; (8007d3c <__ieee754_pow+0x754>)
 8007bdc:	0030      	movs	r0, r6
 8007bde:	0039      	movs	r1, r7
 8007be0:	f7fa f828 	bl	8001c34 <__aeabi_dsub>
 8007be4:	0022      	movs	r2, r4
 8007be6:	002b      	movs	r3, r5
 8007be8:	f7fa f824 	bl	8001c34 <__aeabi_dsub>
 8007bec:	0002      	movs	r2, r0
 8007bee:	000b      	movs	r3, r1
 8007bf0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007bf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007bf4:	f7fa f81e 	bl	8001c34 <__aeabi_dsub>
 8007bf8:	9a08      	ldr	r2, [sp, #32]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	f7f9 fd58 	bl	80016b0 <__aeabi_dmul>
 8007c00:	0032      	movs	r2, r6
 8007c02:	0004      	movs	r4, r0
 8007c04:	000d      	movs	r5, r1
 8007c06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c0a:	003b      	movs	r3, r7
 8007c0c:	f7f9 fd50 	bl	80016b0 <__aeabi_dmul>
 8007c10:	0002      	movs	r2, r0
 8007c12:	000b      	movs	r3, r1
 8007c14:	0020      	movs	r0, r4
 8007c16:	0029      	movs	r1, r5
 8007c18:	f7f8 fdf0 	bl	80007fc <__aeabi_dadd>
 8007c1c:	0004      	movs	r4, r0
 8007c1e:	000d      	movs	r5, r1
 8007c20:	0002      	movs	r2, r0
 8007c22:	000b      	movs	r3, r1
 8007c24:	9800      	ldr	r0, [sp, #0]
 8007c26:	9901      	ldr	r1, [sp, #4]
 8007c28:	f7f8 fde8 	bl	80007fc <__aeabi_dadd>
 8007c2c:	22e0      	movs	r2, #224	; 0xe0
 8007c2e:	2000      	movs	r0, #0
 8007c30:	4b43      	ldr	r3, [pc, #268]	; (8007d40 <__ieee754_pow+0x758>)
 8007c32:	0612      	lsls	r2, r2, #24
 8007c34:	0006      	movs	r6, r0
 8007c36:	000f      	movs	r7, r1
 8007c38:	f7f9 fd3a 	bl	80016b0 <__aeabi_dmul>
 8007c3c:	9008      	str	r0, [sp, #32]
 8007c3e:	9109      	str	r1, [sp, #36]	; 0x24
 8007c40:	9a00      	ldr	r2, [sp, #0]
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	0030      	movs	r0, r6
 8007c46:	0039      	movs	r1, r7
 8007c48:	f7f9 fff4 	bl	8001c34 <__aeabi_dsub>
 8007c4c:	0002      	movs	r2, r0
 8007c4e:	000b      	movs	r3, r1
 8007c50:	0020      	movs	r0, r4
 8007c52:	0029      	movs	r1, r5
 8007c54:	f7f9 ffee 	bl	8001c34 <__aeabi_dsub>
 8007c58:	4a3a      	ldr	r2, [pc, #232]	; (8007d44 <__ieee754_pow+0x75c>)
 8007c5a:	4b39      	ldr	r3, [pc, #228]	; (8007d40 <__ieee754_pow+0x758>)
 8007c5c:	f7f9 fd28 	bl	80016b0 <__aeabi_dmul>
 8007c60:	4a39      	ldr	r2, [pc, #228]	; (8007d48 <__ieee754_pow+0x760>)
 8007c62:	0004      	movs	r4, r0
 8007c64:	000d      	movs	r5, r1
 8007c66:	0030      	movs	r0, r6
 8007c68:	0039      	movs	r1, r7
 8007c6a:	4b38      	ldr	r3, [pc, #224]	; (8007d4c <__ieee754_pow+0x764>)
 8007c6c:	f7f9 fd20 	bl	80016b0 <__aeabi_dmul>
 8007c70:	0002      	movs	r2, r0
 8007c72:	000b      	movs	r3, r1
 8007c74:	0020      	movs	r0, r4
 8007c76:	0029      	movs	r1, r5
 8007c78:	f7f8 fdc0 	bl	80007fc <__aeabi_dadd>
 8007c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c7e:	4b34      	ldr	r3, [pc, #208]	; (8007d50 <__ieee754_pow+0x768>)
 8007c80:	189b      	adds	r3, r3, r2
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f7f8 fdb9 	bl	80007fc <__aeabi_dadd>
 8007c8a:	9000      	str	r0, [sp, #0]
 8007c8c:	9101      	str	r1, [sp, #4]
 8007c8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007c90:	f7fa fba6 	bl	80023e0 <__aeabi_i2d>
 8007c94:	0004      	movs	r4, r0
 8007c96:	000d      	movs	r5, r1
 8007c98:	9808      	ldr	r0, [sp, #32]
 8007c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c9e:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <__ieee754_pow+0x76c>)
 8007ca0:	189b      	adds	r3, r3, r2
 8007ca2:	681e      	ldr	r6, [r3, #0]
 8007ca4:	685f      	ldr	r7, [r3, #4]
 8007ca6:	9a00      	ldr	r2, [sp, #0]
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	f7f8 fda7 	bl	80007fc <__aeabi_dadd>
 8007cae:	0032      	movs	r2, r6
 8007cb0:	003b      	movs	r3, r7
 8007cb2:	f7f8 fda3 	bl	80007fc <__aeabi_dadd>
 8007cb6:	0022      	movs	r2, r4
 8007cb8:	002b      	movs	r3, r5
 8007cba:	f7f8 fd9f 	bl	80007fc <__aeabi_dadd>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	0022      	movs	r2, r4
 8007cc2:	002b      	movs	r3, r5
 8007cc4:	9004      	str	r0, [sp, #16]
 8007cc6:	9105      	str	r1, [sp, #20]
 8007cc8:	f7f9 ffb4 	bl	8001c34 <__aeabi_dsub>
 8007ccc:	0032      	movs	r2, r6
 8007cce:	003b      	movs	r3, r7
 8007cd0:	f7f9 ffb0 	bl	8001c34 <__aeabi_dsub>
 8007cd4:	9a08      	ldr	r2, [sp, #32]
 8007cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd8:	f7f9 ffac 	bl	8001c34 <__aeabi_dsub>
 8007cdc:	0002      	movs	r2, r0
 8007cde:	000b      	movs	r3, r1
 8007ce0:	9800      	ldr	r0, [sp, #0]
 8007ce2:	9901      	ldr	r1, [sp, #4]
 8007ce4:	e618      	b.n	8007918 <__ieee754_pow+0x330>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4c03      	ldr	r4, [pc, #12]	; (8007cf8 <__ieee754_pow+0x710>)
 8007cea:	e621      	b.n	8007930 <__ieee754_pow+0x348>
 8007cec:	7ff00000 	.word	0x7ff00000
 8007cf0:	43400000 	.word	0x43400000
 8007cf4:	fffffc01 	.word	0xfffffc01
 8007cf8:	3ff00000 	.word	0x3ff00000
 8007cfc:	0003988e 	.word	0x0003988e
 8007d00:	000bb679 	.word	0x000bb679
 8007d04:	fff00000 	.word	0xfff00000
 8007d08:	08008410 	.word	0x08008410
 8007d0c:	4a454eef 	.word	0x4a454eef
 8007d10:	3fca7e28 	.word	0x3fca7e28
 8007d14:	93c9db65 	.word	0x93c9db65
 8007d18:	3fcd864a 	.word	0x3fcd864a
 8007d1c:	a91d4101 	.word	0xa91d4101
 8007d20:	3fd17460 	.word	0x3fd17460
 8007d24:	518f264d 	.word	0x518f264d
 8007d28:	3fd55555 	.word	0x3fd55555
 8007d2c:	db6fabff 	.word	0xdb6fabff
 8007d30:	3fdb6db6 	.word	0x3fdb6db6
 8007d34:	33333303 	.word	0x33333303
 8007d38:	3fe33333 	.word	0x3fe33333
 8007d3c:	40080000 	.word	0x40080000
 8007d40:	3feec709 	.word	0x3feec709
 8007d44:	dc3a03fd 	.word	0xdc3a03fd
 8007d48:	145b01f5 	.word	0x145b01f5
 8007d4c:	be3e2fe0 	.word	0xbe3e2fe0
 8007d50:	08008430 	.word	0x08008430
 8007d54:	08008420 	.word	0x08008420
 8007d58:	4a90      	ldr	r2, [pc, #576]	; (8007f9c <__ieee754_pow+0x9b4>)
 8007d5a:	4b91      	ldr	r3, [pc, #580]	; (8007fa0 <__ieee754_pow+0x9b8>)
 8007d5c:	0030      	movs	r0, r6
 8007d5e:	0039      	movs	r1, r7
 8007d60:	f7f8 fd4c 	bl	80007fc <__aeabi_dadd>
 8007d64:	9a04      	ldr	r2, [sp, #16]
 8007d66:	9b05      	ldr	r3, [sp, #20]
 8007d68:	9002      	str	r0, [sp, #8]
 8007d6a:	9103      	str	r1, [sp, #12]
 8007d6c:	0028      	movs	r0, r5
 8007d6e:	0021      	movs	r1, r4
 8007d70:	f7f9 ff60 	bl	8001c34 <__aeabi_dsub>
 8007d74:	0002      	movs	r2, r0
 8007d76:	000b      	movs	r3, r1
 8007d78:	9802      	ldr	r0, [sp, #8]
 8007d7a:	9903      	ldr	r1, [sp, #12]
 8007d7c:	f7f8 fb6c 	bl	8000458 <__aeabi_dcmpgt>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d000      	beq.n	8007d86 <__ieee754_pow+0x79e>
 8007d84:	e611      	b.n	80079aa <__ieee754_pow+0x3c2>
 8007d86:	2100      	movs	r1, #0
 8007d88:	4a86      	ldr	r2, [pc, #536]	; (8007fa4 <__ieee754_pow+0x9bc>)
 8007d8a:	0063      	lsls	r3, r4, #1
 8007d8c:	085b      	lsrs	r3, r3, #1
 8007d8e:	9102      	str	r1, [sp, #8]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	dd25      	ble.n	8007de0 <__ieee754_pow+0x7f8>
 8007d94:	4a84      	ldr	r2, [pc, #528]	; (8007fa8 <__ieee754_pow+0x9c0>)
 8007d96:	151b      	asrs	r3, r3, #20
 8007d98:	189b      	adds	r3, r3, r2
 8007d9a:	2280      	movs	r2, #128	; 0x80
 8007d9c:	0352      	lsls	r2, r2, #13
 8007d9e:	0011      	movs	r1, r2
 8007da0:	4119      	asrs	r1, r3
 8007da2:	190b      	adds	r3, r1, r4
 8007da4:	005c      	lsls	r4, r3, #1
 8007da6:	4981      	ldr	r1, [pc, #516]	; (8007fac <__ieee754_pow+0x9c4>)
 8007da8:	4d81      	ldr	r5, [pc, #516]	; (8007fb0 <__ieee754_pow+0x9c8>)
 8007daa:	0d64      	lsrs	r4, r4, #21
 8007dac:	1864      	adds	r4, r4, r1
 8007dae:	4125      	asrs	r5, r4
 8007db0:	401d      	ands	r5, r3
 8007db2:	031b      	lsls	r3, r3, #12
 8007db4:	0b1b      	lsrs	r3, r3, #12
 8007db6:	4313      	orrs	r3, r2
 8007db8:	2214      	movs	r2, #20
 8007dba:	1b12      	subs	r2, r2, r4
 8007dbc:	4113      	asrs	r3, r2
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	9b08      	ldr	r3, [sp, #32]
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	0029      	movs	r1, r5
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da02      	bge.n	8007dd0 <__ieee754_pow+0x7e8>
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	425b      	negs	r3, r3
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	0002      	movs	r2, r0
 8007dd2:	000b      	movs	r3, r1
 8007dd4:	9804      	ldr	r0, [sp, #16]
 8007dd6:	9905      	ldr	r1, [sp, #20]
 8007dd8:	f7f9 ff2c 	bl	8001c34 <__aeabi_dsub>
 8007ddc:	9006      	str	r0, [sp, #24]
 8007dde:	9107      	str	r1, [sp, #28]
 8007de0:	9806      	ldr	r0, [sp, #24]
 8007de2:	9907      	ldr	r1, [sp, #28]
 8007de4:	0032      	movs	r2, r6
 8007de6:	003b      	movs	r3, r7
 8007de8:	f7f8 fd08 	bl	80007fc <__aeabi_dadd>
 8007dec:	2000      	movs	r0, #0
 8007dee:	2200      	movs	r2, #0
 8007df0:	4b70      	ldr	r3, [pc, #448]	; (8007fb4 <__ieee754_pow+0x9cc>)
 8007df2:	9004      	str	r0, [sp, #16]
 8007df4:	9105      	str	r1, [sp, #20]
 8007df6:	f7f9 fc5b 	bl	80016b0 <__aeabi_dmul>
 8007dfa:	9a06      	ldr	r2, [sp, #24]
 8007dfc:	9b07      	ldr	r3, [sp, #28]
 8007dfe:	9008      	str	r0, [sp, #32]
 8007e00:	9109      	str	r1, [sp, #36]	; 0x24
 8007e02:	9804      	ldr	r0, [sp, #16]
 8007e04:	9905      	ldr	r1, [sp, #20]
 8007e06:	f7f9 ff15 	bl	8001c34 <__aeabi_dsub>
 8007e0a:	0002      	movs	r2, r0
 8007e0c:	000b      	movs	r3, r1
 8007e0e:	0030      	movs	r0, r6
 8007e10:	0039      	movs	r1, r7
 8007e12:	f7f9 ff0f 	bl	8001c34 <__aeabi_dsub>
 8007e16:	4a68      	ldr	r2, [pc, #416]	; (8007fb8 <__ieee754_pow+0x9d0>)
 8007e18:	4b68      	ldr	r3, [pc, #416]	; (8007fbc <__ieee754_pow+0x9d4>)
 8007e1a:	f7f9 fc49 	bl	80016b0 <__aeabi_dmul>
 8007e1e:	4a68      	ldr	r2, [pc, #416]	; (8007fc0 <__ieee754_pow+0x9d8>)
 8007e20:	0004      	movs	r4, r0
 8007e22:	000d      	movs	r5, r1
 8007e24:	9804      	ldr	r0, [sp, #16]
 8007e26:	9905      	ldr	r1, [sp, #20]
 8007e28:	4b66      	ldr	r3, [pc, #408]	; (8007fc4 <__ieee754_pow+0x9dc>)
 8007e2a:	f7f9 fc41 	bl	80016b0 <__aeabi_dmul>
 8007e2e:	0002      	movs	r2, r0
 8007e30:	000b      	movs	r3, r1
 8007e32:	0020      	movs	r0, r4
 8007e34:	0029      	movs	r1, r5
 8007e36:	f7f8 fce1 	bl	80007fc <__aeabi_dadd>
 8007e3a:	0004      	movs	r4, r0
 8007e3c:	000d      	movs	r5, r1
 8007e3e:	0002      	movs	r2, r0
 8007e40:	000b      	movs	r3, r1
 8007e42:	9808      	ldr	r0, [sp, #32]
 8007e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e46:	f7f8 fcd9 	bl	80007fc <__aeabi_dadd>
 8007e4a:	9a08      	ldr	r2, [sp, #32]
 8007e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4e:	0006      	movs	r6, r0
 8007e50:	000f      	movs	r7, r1
 8007e52:	f7f9 feef 	bl	8001c34 <__aeabi_dsub>
 8007e56:	0002      	movs	r2, r0
 8007e58:	000b      	movs	r3, r1
 8007e5a:	0020      	movs	r0, r4
 8007e5c:	0029      	movs	r1, r5
 8007e5e:	f7f9 fee9 	bl	8001c34 <__aeabi_dsub>
 8007e62:	0032      	movs	r2, r6
 8007e64:	9004      	str	r0, [sp, #16]
 8007e66:	9105      	str	r1, [sp, #20]
 8007e68:	003b      	movs	r3, r7
 8007e6a:	0030      	movs	r0, r6
 8007e6c:	0039      	movs	r1, r7
 8007e6e:	f7f9 fc1f 	bl	80016b0 <__aeabi_dmul>
 8007e72:	0004      	movs	r4, r0
 8007e74:	000d      	movs	r5, r1
 8007e76:	4a54      	ldr	r2, [pc, #336]	; (8007fc8 <__ieee754_pow+0x9e0>)
 8007e78:	4b54      	ldr	r3, [pc, #336]	; (8007fcc <__ieee754_pow+0x9e4>)
 8007e7a:	f7f9 fc19 	bl	80016b0 <__aeabi_dmul>
 8007e7e:	4a54      	ldr	r2, [pc, #336]	; (8007fd0 <__ieee754_pow+0x9e8>)
 8007e80:	4b54      	ldr	r3, [pc, #336]	; (8007fd4 <__ieee754_pow+0x9ec>)
 8007e82:	f7f9 fed7 	bl	8001c34 <__aeabi_dsub>
 8007e86:	0022      	movs	r2, r4
 8007e88:	002b      	movs	r3, r5
 8007e8a:	f7f9 fc11 	bl	80016b0 <__aeabi_dmul>
 8007e8e:	4a52      	ldr	r2, [pc, #328]	; (8007fd8 <__ieee754_pow+0x9f0>)
 8007e90:	4b52      	ldr	r3, [pc, #328]	; (8007fdc <__ieee754_pow+0x9f4>)
 8007e92:	f7f8 fcb3 	bl	80007fc <__aeabi_dadd>
 8007e96:	0022      	movs	r2, r4
 8007e98:	002b      	movs	r3, r5
 8007e9a:	f7f9 fc09 	bl	80016b0 <__aeabi_dmul>
 8007e9e:	4a50      	ldr	r2, [pc, #320]	; (8007fe0 <__ieee754_pow+0x9f8>)
 8007ea0:	4b50      	ldr	r3, [pc, #320]	; (8007fe4 <__ieee754_pow+0x9fc>)
 8007ea2:	f7f9 fec7 	bl	8001c34 <__aeabi_dsub>
 8007ea6:	0022      	movs	r2, r4
 8007ea8:	002b      	movs	r3, r5
 8007eaa:	f7f9 fc01 	bl	80016b0 <__aeabi_dmul>
 8007eae:	4a4e      	ldr	r2, [pc, #312]	; (8007fe8 <__ieee754_pow+0xa00>)
 8007eb0:	4b4e      	ldr	r3, [pc, #312]	; (8007fec <__ieee754_pow+0xa04>)
 8007eb2:	f7f8 fca3 	bl	80007fc <__aeabi_dadd>
 8007eb6:	0022      	movs	r2, r4
 8007eb8:	002b      	movs	r3, r5
 8007eba:	f7f9 fbf9 	bl	80016b0 <__aeabi_dmul>
 8007ebe:	0002      	movs	r2, r0
 8007ec0:	000b      	movs	r3, r1
 8007ec2:	0030      	movs	r0, r6
 8007ec4:	0039      	movs	r1, r7
 8007ec6:	f7f9 feb5 	bl	8001c34 <__aeabi_dsub>
 8007eca:	0004      	movs	r4, r0
 8007ecc:	000d      	movs	r5, r1
 8007ece:	0002      	movs	r2, r0
 8007ed0:	000b      	movs	r3, r1
 8007ed2:	0030      	movs	r0, r6
 8007ed4:	0039      	movs	r1, r7
 8007ed6:	f7f9 fbeb 	bl	80016b0 <__aeabi_dmul>
 8007eda:	2380      	movs	r3, #128	; 0x80
 8007edc:	9006      	str	r0, [sp, #24]
 8007ede:	9107      	str	r1, [sp, #28]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	0020      	movs	r0, r4
 8007ee4:	0029      	movs	r1, r5
 8007ee6:	05db      	lsls	r3, r3, #23
 8007ee8:	f7f9 fea4 	bl	8001c34 <__aeabi_dsub>
 8007eec:	0002      	movs	r2, r0
 8007eee:	000b      	movs	r3, r1
 8007ef0:	9806      	ldr	r0, [sp, #24]
 8007ef2:	9907      	ldr	r1, [sp, #28]
 8007ef4:	f7f8 ffe2 	bl	8000ebc <__aeabi_ddiv>
 8007ef8:	9a04      	ldr	r2, [sp, #16]
 8007efa:	9b05      	ldr	r3, [sp, #20]
 8007efc:	0004      	movs	r4, r0
 8007efe:	000d      	movs	r5, r1
 8007f00:	0030      	movs	r0, r6
 8007f02:	0039      	movs	r1, r7
 8007f04:	f7f9 fbd4 	bl	80016b0 <__aeabi_dmul>
 8007f08:	9a04      	ldr	r2, [sp, #16]
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	f7f8 fc76 	bl	80007fc <__aeabi_dadd>
 8007f10:	0002      	movs	r2, r0
 8007f12:	000b      	movs	r3, r1
 8007f14:	0020      	movs	r0, r4
 8007f16:	0029      	movs	r1, r5
 8007f18:	f7f9 fe8c 	bl	8001c34 <__aeabi_dsub>
 8007f1c:	0032      	movs	r2, r6
 8007f1e:	003b      	movs	r3, r7
 8007f20:	f7f9 fe88 	bl	8001c34 <__aeabi_dsub>
 8007f24:	0002      	movs	r2, r0
 8007f26:	000b      	movs	r3, r1
 8007f28:	2000      	movs	r0, #0
 8007f2a:	4931      	ldr	r1, [pc, #196]	; (8007ff0 <__ieee754_pow+0xa08>)
 8007f2c:	f7f9 fe82 	bl	8001c34 <__aeabi_dsub>
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	051b      	lsls	r3, r3, #20
 8007f34:	185b      	adds	r3, r3, r1
 8007f36:	151a      	asrs	r2, r3, #20
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	dc25      	bgt.n	8007f88 <__ieee754_pow+0x9a0>
 8007f3c:	9a02      	ldr	r2, [sp, #8]
 8007f3e:	f000 f861 	bl	8008004 <scalbn>
 8007f42:	9a00      	ldr	r2, [sp, #0]
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	f7ff fc33 	bl	80077b0 <__ieee754_pow+0x1c8>
 8007f4a:	4a2a      	ldr	r2, [pc, #168]	; (8007ff4 <__ieee754_pow+0xa0c>)
 8007f4c:	004b      	lsls	r3, r1, #1
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	4293      	cmp	r3, r2
 8007f52:	dc00      	bgt.n	8007f56 <__ieee754_pow+0x96e>
 8007f54:	e717      	b.n	8007d86 <__ieee754_pow+0x79e>
 8007f56:	4b28      	ldr	r3, [pc, #160]	; (8007ff8 <__ieee754_pow+0xa10>)
 8007f58:	18cb      	adds	r3, r1, r3
 8007f5a:	4303      	orrs	r3, r0
 8007f5c:	d008      	beq.n	8007f70 <__ieee754_pow+0x988>
 8007f5e:	9800      	ldr	r0, [sp, #0]
 8007f60:	9901      	ldr	r1, [sp, #4]
 8007f62:	2300      	movs	r3, #0
 8007f64:	2200      	movs	r2, #0
 8007f66:	f7f8 fa63 	bl	8000430 <__aeabi_dcmplt>
 8007f6a:	1e43      	subs	r3, r0, #1
 8007f6c:	4198      	sbcs	r0, r3
 8007f6e:	e462      	b.n	8007836 <__ieee754_pow+0x24e>
 8007f70:	9a04      	ldr	r2, [sp, #16]
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	f7f9 fe5e 	bl	8001c34 <__aeabi_dsub>
 8007f78:	0032      	movs	r2, r6
 8007f7a:	003b      	movs	r3, r7
 8007f7c:	f7f8 fa76 	bl	800046c <__aeabi_dcmpge>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d100      	bne.n	8007f86 <__ieee754_pow+0x99e>
 8007f84:	e6ff      	b.n	8007d86 <__ieee754_pow+0x79e>
 8007f86:	e7ea      	b.n	8007f5e <__ieee754_pow+0x976>
 8007f88:	0019      	movs	r1, r3
 8007f8a:	e7da      	b.n	8007f42 <__ieee754_pow+0x95a>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4c18      	ldr	r4, [pc, #96]	; (8007ff0 <__ieee754_pow+0xa08>)
 8007f90:	f7ff fbf1 	bl	8007776 <__ieee754_pow+0x18e>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2400      	movs	r4, #0
 8007f98:	f7ff fbed 	bl	8007776 <__ieee754_pow+0x18e>
 8007f9c:	652b82fe 	.word	0x652b82fe
 8007fa0:	3c971547 	.word	0x3c971547
 8007fa4:	3fe00000 	.word	0x3fe00000
 8007fa8:	fffffc02 	.word	0xfffffc02
 8007fac:	fffffc01 	.word	0xfffffc01
 8007fb0:	fff00000 	.word	0xfff00000
 8007fb4:	3fe62e43 	.word	0x3fe62e43
 8007fb8:	fefa39ef 	.word	0xfefa39ef
 8007fbc:	3fe62e42 	.word	0x3fe62e42
 8007fc0:	0ca86c39 	.word	0x0ca86c39
 8007fc4:	be205c61 	.word	0xbe205c61
 8007fc8:	72bea4d0 	.word	0x72bea4d0
 8007fcc:	3e663769 	.word	0x3e663769
 8007fd0:	c5d26bf1 	.word	0xc5d26bf1
 8007fd4:	3ebbbd41 	.word	0x3ebbbd41
 8007fd8:	af25de2c 	.word	0xaf25de2c
 8007fdc:	3f11566a 	.word	0x3f11566a
 8007fe0:	16bebd93 	.word	0x16bebd93
 8007fe4:	3f66c16c 	.word	0x3f66c16c
 8007fe8:	5555553e 	.word	0x5555553e
 8007fec:	3fc55555 	.word	0x3fc55555
 8007ff0:	3ff00000 	.word	0x3ff00000
 8007ff4:	4090cbff 	.word	0x4090cbff
 8007ff8:	3f6f3400 	.word	0x3f6f3400

08007ffc <fabs>:
 8007ffc:	0049      	lsls	r1, r1, #1
 8007ffe:	084b      	lsrs	r3, r1, #1
 8008000:	0019      	movs	r1, r3
 8008002:	4770      	bx	lr

08008004 <scalbn>:
 8008004:	b570      	push	{r4, r5, r6, lr}
 8008006:	0014      	movs	r4, r2
 8008008:	004a      	lsls	r2, r1, #1
 800800a:	000b      	movs	r3, r1
 800800c:	0d52      	lsrs	r2, r2, #21
 800800e:	d10f      	bne.n	8008030 <scalbn+0x2c>
 8008010:	004b      	lsls	r3, r1, #1
 8008012:	085b      	lsrs	r3, r3, #1
 8008014:	4303      	orrs	r3, r0
 8008016:	d011      	beq.n	800803c <scalbn+0x38>
 8008018:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <scalbn+0xa0>)
 800801a:	2200      	movs	r2, #0
 800801c:	f7f9 fb48 	bl	80016b0 <__aeabi_dmul>
 8008020:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <scalbn+0xa4>)
 8008022:	429c      	cmp	r4, r3
 8008024:	da0b      	bge.n	800803e <scalbn+0x3a>
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <scalbn+0xa8>)
 8008028:	4b21      	ldr	r3, [pc, #132]	; (80080b0 <scalbn+0xac>)
 800802a:	f7f9 fb41 	bl	80016b0 <__aeabi_dmul>
 800802e:	e005      	b.n	800803c <scalbn+0x38>
 8008030:	4d20      	ldr	r5, [pc, #128]	; (80080b4 <scalbn+0xb0>)
 8008032:	42aa      	cmp	r2, r5
 8008034:	d107      	bne.n	8008046 <scalbn+0x42>
 8008036:	0002      	movs	r2, r0
 8008038:	f7f8 fbe0 	bl	80007fc <__aeabi_dadd>
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	000b      	movs	r3, r1
 8008040:	004a      	lsls	r2, r1, #1
 8008042:	0d52      	lsrs	r2, r2, #21
 8008044:	3a36      	subs	r2, #54	; 0x36
 8008046:	4d1c      	ldr	r5, [pc, #112]	; (80080b8 <scalbn+0xb4>)
 8008048:	42ac      	cmp	r4, r5
 800804a:	dd0a      	ble.n	8008062 <scalbn+0x5e>
 800804c:	4c1b      	ldr	r4, [pc, #108]	; (80080bc <scalbn+0xb8>)
 800804e:	4d1c      	ldr	r5, [pc, #112]	; (80080c0 <scalbn+0xbc>)
 8008050:	2900      	cmp	r1, #0
 8008052:	da01      	bge.n	8008058 <scalbn+0x54>
 8008054:	4c19      	ldr	r4, [pc, #100]	; (80080bc <scalbn+0xb8>)
 8008056:	4d1b      	ldr	r5, [pc, #108]	; (80080c4 <scalbn+0xc0>)
 8008058:	4a18      	ldr	r2, [pc, #96]	; (80080bc <scalbn+0xb8>)
 800805a:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <scalbn+0xbc>)
 800805c:	0020      	movs	r0, r4
 800805e:	0029      	movs	r1, r5
 8008060:	e7e3      	b.n	800802a <scalbn+0x26>
 8008062:	18a2      	adds	r2, r4, r2
 8008064:	4c18      	ldr	r4, [pc, #96]	; (80080c8 <scalbn+0xc4>)
 8008066:	42a2      	cmp	r2, r4
 8008068:	dcf0      	bgt.n	800804c <scalbn+0x48>
 800806a:	2a00      	cmp	r2, #0
 800806c:	dd05      	ble.n	800807a <scalbn+0x76>
 800806e:	4c17      	ldr	r4, [pc, #92]	; (80080cc <scalbn+0xc8>)
 8008070:	0512      	lsls	r2, r2, #20
 8008072:	4023      	ands	r3, r4
 8008074:	4313      	orrs	r3, r2
 8008076:	0019      	movs	r1, r3
 8008078:	e7e0      	b.n	800803c <scalbn+0x38>
 800807a:	0014      	movs	r4, r2
 800807c:	3435      	adds	r4, #53	; 0x35
 800807e:	da08      	bge.n	8008092 <scalbn+0x8e>
 8008080:	4c0a      	ldr	r4, [pc, #40]	; (80080ac <scalbn+0xa8>)
 8008082:	4d0b      	ldr	r5, [pc, #44]	; (80080b0 <scalbn+0xac>)
 8008084:	2900      	cmp	r1, #0
 8008086:	da01      	bge.n	800808c <scalbn+0x88>
 8008088:	4c08      	ldr	r4, [pc, #32]	; (80080ac <scalbn+0xa8>)
 800808a:	4d11      	ldr	r5, [pc, #68]	; (80080d0 <scalbn+0xcc>)
 800808c:	4a07      	ldr	r2, [pc, #28]	; (80080ac <scalbn+0xa8>)
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <scalbn+0xac>)
 8008090:	e7e4      	b.n	800805c <scalbn+0x58>
 8008092:	4c0e      	ldr	r4, [pc, #56]	; (80080cc <scalbn+0xc8>)
 8008094:	3236      	adds	r2, #54	; 0x36
 8008096:	4023      	ands	r3, r4
 8008098:	0512      	lsls	r2, r2, #20
 800809a:	431a      	orrs	r2, r3
 800809c:	0011      	movs	r1, r2
 800809e:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <scalbn+0xd0>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	e7c2      	b.n	800802a <scalbn+0x26>
 80080a4:	43500000 	.word	0x43500000
 80080a8:	ffff3cb0 	.word	0xffff3cb0
 80080ac:	c2f8f359 	.word	0xc2f8f359
 80080b0:	01a56e1f 	.word	0x01a56e1f
 80080b4:	000007ff 	.word	0x000007ff
 80080b8:	0000c350 	.word	0x0000c350
 80080bc:	8800759c 	.word	0x8800759c
 80080c0:	7e37e43c 	.word	0x7e37e43c
 80080c4:	fe37e43c 	.word	0xfe37e43c
 80080c8:	000007fe 	.word	0x000007fe
 80080cc:	800fffff 	.word	0x800fffff
 80080d0:	81a56e1f 	.word	0x81a56e1f
 80080d4:	3c900000 	.word	0x3c900000

080080d8 <with_errno>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	000d      	movs	r5, r1
 80080dc:	0016      	movs	r6, r2
 80080de:	0004      	movs	r4, r0
 80080e0:	f7fe f88a 	bl	80061f8 <__errno>
 80080e4:	0029      	movs	r1, r5
 80080e6:	6006      	str	r6, [r0, #0]
 80080e8:	0020      	movs	r0, r4
 80080ea:	bd70      	pop	{r4, r5, r6, pc}

080080ec <xflow>:
 80080ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ee:	0015      	movs	r5, r2
 80080f0:	001c      	movs	r4, r3
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d010      	beq.n	8008118 <xflow+0x2c>
 80080f6:	2380      	movs	r3, #128	; 0x80
 80080f8:	0010      	movs	r0, r2
 80080fa:	061b      	lsls	r3, r3, #24
 80080fc:	18e1      	adds	r1, r4, r3
 80080fe:	9000      	str	r0, [sp, #0]
 8008100:	9101      	str	r1, [sp, #4]
 8008102:	9a00      	ldr	r2, [sp, #0]
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	0028      	movs	r0, r5
 8008108:	0021      	movs	r1, r4
 800810a:	f7f9 fad1 	bl	80016b0 <__aeabi_dmul>
 800810e:	2222      	movs	r2, #34	; 0x22
 8008110:	f7ff ffe2 	bl	80080d8 <with_errno>
 8008114:	b003      	add	sp, #12
 8008116:	bd30      	pop	{r4, r5, pc}
 8008118:	0010      	movs	r0, r2
 800811a:	0019      	movs	r1, r3
 800811c:	e7ef      	b.n	80080fe <xflow+0x12>

0800811e <__math_uflow>:
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	b510      	push	{r4, lr}
 8008122:	2200      	movs	r2, #0
 8008124:	055b      	lsls	r3, r3, #21
 8008126:	f7ff ffe1 	bl	80080ec <xflow>
 800812a:	bd10      	pop	{r4, pc}

0800812c <__math_oflow>:
 800812c:	23e0      	movs	r3, #224	; 0xe0
 800812e:	b510      	push	{r4, lr}
 8008130:	2200      	movs	r2, #0
 8008132:	05db      	lsls	r3, r3, #23
 8008134:	f7ff ffda 	bl	80080ec <xflow>
 8008138:	bd10      	pop	{r4, pc}
	...

0800813c <__ieee754_sqrt>:
 800813c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800813e:	000a      	movs	r2, r1
 8008140:	000c      	movs	r4, r1
 8008142:	496f      	ldr	r1, [pc, #444]	; (8008300 <__ieee754_sqrt+0x1c4>)
 8008144:	0005      	movs	r5, r0
 8008146:	0003      	movs	r3, r0
 8008148:	0008      	movs	r0, r1
 800814a:	b087      	sub	sp, #28
 800814c:	4020      	ands	r0, r4
 800814e:	4288      	cmp	r0, r1
 8008150:	d111      	bne.n	8008176 <__ieee754_sqrt+0x3a>
 8008152:	002a      	movs	r2, r5
 8008154:	0023      	movs	r3, r4
 8008156:	0028      	movs	r0, r5
 8008158:	0021      	movs	r1, r4
 800815a:	f7f9 faa9 	bl	80016b0 <__aeabi_dmul>
 800815e:	0002      	movs	r2, r0
 8008160:	000b      	movs	r3, r1
 8008162:	0028      	movs	r0, r5
 8008164:	0021      	movs	r1, r4
 8008166:	f7f8 fb49 	bl	80007fc <__aeabi_dadd>
 800816a:	0005      	movs	r5, r0
 800816c:	000c      	movs	r4, r1
 800816e:	0028      	movs	r0, r5
 8008170:	0021      	movs	r1, r4
 8008172:	b007      	add	sp, #28
 8008174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008176:	2c00      	cmp	r4, #0
 8008178:	dc12      	bgt.n	80081a0 <__ieee754_sqrt+0x64>
 800817a:	0061      	lsls	r1, r4, #1
 800817c:	0849      	lsrs	r1, r1, #1
 800817e:	4329      	orrs	r1, r5
 8008180:	d0f5      	beq.n	800816e <__ieee754_sqrt+0x32>
 8008182:	2100      	movs	r1, #0
 8008184:	428c      	cmp	r4, r1
 8008186:	d100      	bne.n	800818a <__ieee754_sqrt+0x4e>
 8008188:	e09f      	b.n	80082ca <__ieee754_sqrt+0x18e>
 800818a:	002a      	movs	r2, r5
 800818c:	0023      	movs	r3, r4
 800818e:	0028      	movs	r0, r5
 8008190:	0021      	movs	r1, r4
 8008192:	f7f9 fd4f 	bl	8001c34 <__aeabi_dsub>
 8008196:	0002      	movs	r2, r0
 8008198:	000b      	movs	r3, r1
 800819a:	f7f8 fe8f 	bl	8000ebc <__aeabi_ddiv>
 800819e:	e7e4      	b.n	800816a <__ieee754_sqrt+0x2e>
 80081a0:	1521      	asrs	r1, r4, #20
 80081a2:	d100      	bne.n	80081a6 <__ieee754_sqrt+0x6a>
 80081a4:	e091      	b.n	80082ca <__ieee754_sqrt+0x18e>
 80081a6:	4857      	ldr	r0, [pc, #348]	; (8008304 <__ieee754_sqrt+0x1c8>)
 80081a8:	0312      	lsls	r2, r2, #12
 80081aa:	180c      	adds	r4, r1, r0
 80081ac:	2080      	movs	r0, #128	; 0x80
 80081ae:	0b12      	lsrs	r2, r2, #12
 80081b0:	0340      	lsls	r0, r0, #13
 80081b2:	4310      	orrs	r0, r2
 80081b4:	07c9      	lsls	r1, r1, #31
 80081b6:	d403      	bmi.n	80081c0 <__ieee754_sqrt+0x84>
 80081b8:	0fda      	lsrs	r2, r3, #31
 80081ba:	0040      	lsls	r0, r0, #1
 80081bc:	1810      	adds	r0, r2, r0
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	2500      	movs	r5, #0
 80081c2:	1062      	asrs	r2, r4, #1
 80081c4:	0040      	lsls	r0, r0, #1
 80081c6:	2480      	movs	r4, #128	; 0x80
 80081c8:	9205      	str	r2, [sp, #20]
 80081ca:	0fda      	lsrs	r2, r3, #31
 80081cc:	1812      	adds	r2, r2, r0
 80081ce:	0029      	movs	r1, r5
 80081d0:	2016      	movs	r0, #22
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	03a4      	lsls	r4, r4, #14
 80081d6:	190e      	adds	r6, r1, r4
 80081d8:	4296      	cmp	r6, r2
 80081da:	dc02      	bgt.n	80081e2 <__ieee754_sqrt+0xa6>
 80081dc:	1931      	adds	r1, r6, r4
 80081de:	1b92      	subs	r2, r2, r6
 80081e0:	192d      	adds	r5, r5, r4
 80081e2:	0fde      	lsrs	r6, r3, #31
 80081e4:	0052      	lsls	r2, r2, #1
 80081e6:	3801      	subs	r0, #1
 80081e8:	18b2      	adds	r2, r6, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	0864      	lsrs	r4, r4, #1
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d1f1      	bne.n	80081d6 <__ieee754_sqrt+0x9a>
 80081f2:	2620      	movs	r6, #32
 80081f4:	2780      	movs	r7, #128	; 0x80
 80081f6:	0004      	movs	r4, r0
 80081f8:	9604      	str	r6, [sp, #16]
 80081fa:	063f      	lsls	r7, r7, #24
 80081fc:	183e      	adds	r6, r7, r0
 80081fe:	46b4      	mov	ip, r6
 8008200:	428a      	cmp	r2, r1
 8008202:	dc02      	bgt.n	800820a <__ieee754_sqrt+0xce>
 8008204:	d114      	bne.n	8008230 <__ieee754_sqrt+0xf4>
 8008206:	429e      	cmp	r6, r3
 8008208:	d812      	bhi.n	8008230 <__ieee754_sqrt+0xf4>
 800820a:	4660      	mov	r0, ip
 800820c:	4666      	mov	r6, ip
 800820e:	19c0      	adds	r0, r0, r7
 8008210:	9100      	str	r1, [sp, #0]
 8008212:	2e00      	cmp	r6, #0
 8008214:	da03      	bge.n	800821e <__ieee754_sqrt+0xe2>
 8008216:	43c6      	mvns	r6, r0
 8008218:	0ff6      	lsrs	r6, r6, #31
 800821a:	198e      	adds	r6, r1, r6
 800821c:	9600      	str	r6, [sp, #0]
 800821e:	1a52      	subs	r2, r2, r1
 8008220:	4563      	cmp	r3, ip
 8008222:	4189      	sbcs	r1, r1
 8008224:	4249      	negs	r1, r1
 8008226:	1a52      	subs	r2, r2, r1
 8008228:	4661      	mov	r1, ip
 800822a:	1a5b      	subs	r3, r3, r1
 800822c:	9900      	ldr	r1, [sp, #0]
 800822e:	19e4      	adds	r4, r4, r7
 8008230:	0fde      	lsrs	r6, r3, #31
 8008232:	0052      	lsls	r2, r2, #1
 8008234:	18b2      	adds	r2, r6, r2
 8008236:	9e04      	ldr	r6, [sp, #16]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	3e01      	subs	r6, #1
 800823c:	087f      	lsrs	r7, r7, #1
 800823e:	9604      	str	r6, [sp, #16]
 8008240:	2e00      	cmp	r6, #0
 8008242:	d1db      	bne.n	80081fc <__ieee754_sqrt+0xc0>
 8008244:	431a      	orrs	r2, r3
 8008246:	d01f      	beq.n	8008288 <__ieee754_sqrt+0x14c>
 8008248:	4e2f      	ldr	r6, [pc, #188]	; (8008308 <__ieee754_sqrt+0x1cc>)
 800824a:	4f30      	ldr	r7, [pc, #192]	; (800830c <__ieee754_sqrt+0x1d0>)
 800824c:	6830      	ldr	r0, [r6, #0]
 800824e:	6871      	ldr	r1, [r6, #4]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	9200      	str	r2, [sp, #0]
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	6832      	ldr	r2, [r6, #0]
 800825a:	6873      	ldr	r3, [r6, #4]
 800825c:	9202      	str	r2, [sp, #8]
 800825e:	9303      	str	r3, [sp, #12]
 8008260:	9a00      	ldr	r2, [sp, #0]
 8008262:	9b01      	ldr	r3, [sp, #4]
 8008264:	f7f9 fce6 	bl	8001c34 <__aeabi_dsub>
 8008268:	0002      	movs	r2, r0
 800826a:	000b      	movs	r3, r1
 800826c:	9802      	ldr	r0, [sp, #8]
 800826e:	9903      	ldr	r1, [sp, #12]
 8008270:	f7f8 f8e8 	bl	8000444 <__aeabi_dcmple>
 8008274:	2800      	cmp	r0, #0
 8008276:	d007      	beq.n	8008288 <__ieee754_sqrt+0x14c>
 8008278:	6830      	ldr	r0, [r6, #0]
 800827a:	6871      	ldr	r1, [r6, #4]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	1c67      	adds	r7, r4, #1
 8008282:	d127      	bne.n	80082d4 <__ieee754_sqrt+0x198>
 8008284:	9c04      	ldr	r4, [sp, #16]
 8008286:	3501      	adds	r5, #1
 8008288:	4b21      	ldr	r3, [pc, #132]	; (8008310 <__ieee754_sqrt+0x1d4>)
 800828a:	1069      	asrs	r1, r5, #1
 800828c:	18c9      	adds	r1, r1, r3
 800828e:	0864      	lsrs	r4, r4, #1
 8008290:	07ed      	lsls	r5, r5, #31
 8008292:	d502      	bpl.n	800829a <__ieee754_sqrt+0x15e>
 8008294:	2380      	movs	r3, #128	; 0x80
 8008296:	061b      	lsls	r3, r3, #24
 8008298:	431c      	orrs	r4, r3
 800829a:	9b05      	ldr	r3, [sp, #20]
 800829c:	0025      	movs	r5, r4
 800829e:	0518      	lsls	r0, r3, #20
 80082a0:	1843      	adds	r3, r0, r1
 80082a2:	001c      	movs	r4, r3
 80082a4:	e763      	b.n	800816e <__ieee754_sqrt+0x32>
 80082a6:	0ada      	lsrs	r2, r3, #11
 80082a8:	3815      	subs	r0, #21
 80082aa:	055b      	lsls	r3, r3, #21
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d0fa      	beq.n	80082a6 <__ieee754_sqrt+0x16a>
 80082b0:	2480      	movs	r4, #128	; 0x80
 80082b2:	0364      	lsls	r4, r4, #13
 80082b4:	4222      	tst	r2, r4
 80082b6:	d00a      	beq.n	80082ce <__ieee754_sqrt+0x192>
 80082b8:	2420      	movs	r4, #32
 80082ba:	001e      	movs	r6, r3
 80082bc:	1a64      	subs	r4, r4, r1
 80082be:	40e6      	lsrs	r6, r4
 80082c0:	1e4d      	subs	r5, r1, #1
 80082c2:	408b      	lsls	r3, r1
 80082c4:	4332      	orrs	r2, r6
 80082c6:	1b41      	subs	r1, r0, r5
 80082c8:	e76d      	b.n	80081a6 <__ieee754_sqrt+0x6a>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e7ee      	b.n	80082ac <__ieee754_sqrt+0x170>
 80082ce:	0052      	lsls	r2, r2, #1
 80082d0:	3101      	adds	r1, #1
 80082d2:	e7ef      	b.n	80082b4 <__ieee754_sqrt+0x178>
 80082d4:	f7f8 fa92 	bl	80007fc <__aeabi_dadd>
 80082d8:	6877      	ldr	r7, [r6, #4]
 80082da:	6836      	ldr	r6, [r6, #0]
 80082dc:	0002      	movs	r2, r0
 80082de:	000b      	movs	r3, r1
 80082e0:	0030      	movs	r0, r6
 80082e2:	0039      	movs	r1, r7
 80082e4:	f7f8 f8a4 	bl	8000430 <__aeabi_dcmplt>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d004      	beq.n	80082f6 <__ieee754_sqrt+0x1ba>
 80082ec:	3402      	adds	r4, #2
 80082ee:	4263      	negs	r3, r4
 80082f0:	4163      	adcs	r3, r4
 80082f2:	18ed      	adds	r5, r5, r3
 80082f4:	e7c8      	b.n	8008288 <__ieee754_sqrt+0x14c>
 80082f6:	2301      	movs	r3, #1
 80082f8:	3401      	adds	r4, #1
 80082fa:	439c      	bics	r4, r3
 80082fc:	e7c4      	b.n	8008288 <__ieee754_sqrt+0x14c>
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	7ff00000 	.word	0x7ff00000
 8008304:	fffffc01 	.word	0xfffffc01
 8008308:	20000078 	.word	0x20000078
 800830c:	20000080 	.word	0x20000080
 8008310:	3fe00000 	.word	0x3fe00000

08008314 <_init>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	46c0      	nop			; (mov r8, r8)
 8008318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831a:	bc08      	pop	{r3}
 800831c:	469e      	mov	lr, r3
 800831e:	4770      	bx	lr

08008320 <_fini>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr
